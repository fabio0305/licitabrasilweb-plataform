
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Supplier
 * 
 */
export type Supplier = $Result.DefaultSelection<Prisma.$SupplierPayload>
/**
 * Model PublicEntity
 * 
 */
export type PublicEntity = $Result.DefaultSelection<Prisma.$PublicEntityPayload>
/**
 * Model Citizen
 * 
 */
export type Citizen = $Result.DefaultSelection<Prisma.$CitizenPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model Bidding
 * 
 */
export type Bidding = $Result.DefaultSelection<Prisma.$BiddingPayload>
/**
 * Model Proposal
 * 
 */
export type Proposal = $Result.DefaultSelection<Prisma.$ProposalPayload>
/**
 * Model ProposalItem
 * 
 */
export type ProposalItem = $Result.DefaultSelection<Prisma.$ProposalItemPayload>
/**
 * Model Contract
 * 
 */
export type Contract = $Result.DefaultSelection<Prisma.$ContractPayload>
/**
 * Model Document
 * 
 */
export type Document = $Result.DefaultSelection<Prisma.$DocumentPayload>
/**
 * Model BiddingCategory
 * 
 */
export type BiddingCategory = $Result.DefaultSelection<Prisma.$BiddingCategoryPayload>
/**
 * Model SupplierCategory
 * 
 */
export type SupplierCategory = $Result.DefaultSelection<Prisma.$SupplierCategoryPayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>
/**
 * Model UserSession
 * 
 */
export type UserSession = $Result.DefaultSelection<Prisma.$UserSessionPayload>
/**
 * Model SystemConfig
 * 
 */
export type SystemConfig = $Result.DefaultSelection<Prisma.$SystemConfigPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model UserPermission
 * 
 */
export type UserPermission = $Result.DefaultSelection<Prisma.$UserPermissionPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  ADMIN: 'ADMIN',
  SUPPLIER: 'SUPPLIER',
  PUBLIC_ENTITY: 'PUBLIC_ENTITY',
  AUDITOR: 'AUDITOR',
  CITIZEN: 'CITIZEN'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const UserStatus: {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  PENDING: 'PENDING',
  SUSPENDED: 'SUSPENDED'
};

export type UserStatus = (typeof UserStatus)[keyof typeof UserStatus]


export const BiddingType: {
  PREGAO_ELETRONICO: 'PREGAO_ELETRONICO',
  CONCORRENCIA: 'CONCORRENCIA',
  TOMADA_PRECOS: 'TOMADA_PRECOS',
  CONVITE: 'CONVITE',
  CONCURSO: 'CONCURSO',
  LEILAO: 'LEILAO'
};

export type BiddingType = (typeof BiddingType)[keyof typeof BiddingType]


export const BiddingStatus: {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  OPEN: 'OPEN',
  CLOSED: 'CLOSED',
  CANCELLED: 'CANCELLED',
  AWARDED: 'AWARDED'
};

export type BiddingStatus = (typeof BiddingStatus)[keyof typeof BiddingStatus]


export const ProposalStatus: {
  DRAFT: 'DRAFT',
  SUBMITTED: 'SUBMITTED',
  UNDER_REVIEW: 'UNDER_REVIEW',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  WITHDRAWN: 'WITHDRAWN'
};

export type ProposalStatus = (typeof ProposalStatus)[keyof typeof ProposalStatus]


export const ContractStatus: {
  DRAFT: 'DRAFT',
  ACTIVE: 'ACTIVE',
  SUSPENDED: 'SUSPENDED',
  TERMINATED: 'TERMINATED',
  COMPLETED: 'COMPLETED'
};

export type ContractStatus = (typeof ContractStatus)[keyof typeof ContractStatus]


export const DocumentType: {
  EDITAL: 'EDITAL',
  PROPOSAL: 'PROPOSAL',
  CONTRACT: 'CONTRACT',
  CERTIFICATE: 'CERTIFICATE',
  REPORT: 'REPORT',
  OTHER: 'OTHER'
};

export type DocumentType = (typeof DocumentType)[keyof typeof DocumentType]


export const Permission: {
  READ_PUBLIC_DATA: 'READ_PUBLIC_DATA',
  READ_PRIVATE_DATA: 'READ_PRIVATE_DATA',
  WRITE_DATA: 'WRITE_DATA',
  DELETE_DATA: 'DELETE_DATA',
  CREATE_BIDDING: 'CREATE_BIDDING',
  EDIT_BIDDING: 'EDIT_BIDDING',
  DELETE_BIDDING: 'DELETE_BIDDING',
  PUBLISH_BIDDING: 'PUBLISH_BIDDING',
  CANCEL_BIDDING: 'CANCEL_BIDDING',
  CREATE_PROPOSAL: 'CREATE_PROPOSAL',
  EDIT_PROPOSAL: 'EDIT_PROPOSAL',
  DELETE_PROPOSAL: 'DELETE_PROPOSAL',
  SUBMIT_PROPOSAL: 'SUBMIT_PROPOSAL',
  CREATE_CONTRACT: 'CREATE_CONTRACT',
  EDIT_CONTRACT: 'EDIT_CONTRACT',
  SIGN_CONTRACT: 'SIGN_CONTRACT',
  TERMINATE_CONTRACT: 'TERMINATE_CONTRACT',
  MANAGE_USERS: 'MANAGE_USERS',
  MANAGE_SYSTEM: 'MANAGE_SYSTEM',
  VIEW_AUDIT_LOGS: 'VIEW_AUDIT_LOGS',
  MANAGE_CATEGORIES: 'MANAGE_CATEGORIES',
  GENERATE_REPORTS: 'GENERATE_REPORTS',
  EXPORT_DATA: 'EXPORT_DATA'
};

export type Permission = (typeof Permission)[keyof typeof Permission]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type UserStatus = $Enums.UserStatus

export const UserStatus: typeof $Enums.UserStatus

export type BiddingType = $Enums.BiddingType

export const BiddingType: typeof $Enums.BiddingType

export type BiddingStatus = $Enums.BiddingStatus

export const BiddingStatus: typeof $Enums.BiddingStatus

export type ProposalStatus = $Enums.ProposalStatus

export const ProposalStatus: typeof $Enums.ProposalStatus

export type ContractStatus = $Enums.ContractStatus

export const ContractStatus: typeof $Enums.ContractStatus

export type DocumentType = $Enums.DocumentType

export const DocumentType: typeof $Enums.DocumentType

export type Permission = $Enums.Permission

export const Permission: typeof $Enums.Permission

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.supplier`: Exposes CRUD operations for the **Supplier** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Suppliers
    * const suppliers = await prisma.supplier.findMany()
    * ```
    */
  get supplier(): Prisma.SupplierDelegate<ExtArgs>;

  /**
   * `prisma.publicEntity`: Exposes CRUD operations for the **PublicEntity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PublicEntities
    * const publicEntities = await prisma.publicEntity.findMany()
    * ```
    */
  get publicEntity(): Prisma.PublicEntityDelegate<ExtArgs>;

  /**
   * `prisma.citizen`: Exposes CRUD operations for the **Citizen** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Citizens
    * const citizens = await prisma.citizen.findMany()
    * ```
    */
  get citizen(): Prisma.CitizenDelegate<ExtArgs>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs>;

  /**
   * `prisma.bidding`: Exposes CRUD operations for the **Bidding** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Biddings
    * const biddings = await prisma.bidding.findMany()
    * ```
    */
  get bidding(): Prisma.BiddingDelegate<ExtArgs>;

  /**
   * `prisma.proposal`: Exposes CRUD operations for the **Proposal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Proposals
    * const proposals = await prisma.proposal.findMany()
    * ```
    */
  get proposal(): Prisma.ProposalDelegate<ExtArgs>;

  /**
   * `prisma.proposalItem`: Exposes CRUD operations for the **ProposalItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProposalItems
    * const proposalItems = await prisma.proposalItem.findMany()
    * ```
    */
  get proposalItem(): Prisma.ProposalItemDelegate<ExtArgs>;

  /**
   * `prisma.contract`: Exposes CRUD operations for the **Contract** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contracts
    * const contracts = await prisma.contract.findMany()
    * ```
    */
  get contract(): Prisma.ContractDelegate<ExtArgs>;

  /**
   * `prisma.document`: Exposes CRUD operations for the **Document** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Documents
    * const documents = await prisma.document.findMany()
    * ```
    */
  get document(): Prisma.DocumentDelegate<ExtArgs>;

  /**
   * `prisma.biddingCategory`: Exposes CRUD operations for the **BiddingCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BiddingCategories
    * const biddingCategories = await prisma.biddingCategory.findMany()
    * ```
    */
  get biddingCategory(): Prisma.BiddingCategoryDelegate<ExtArgs>;

  /**
   * `prisma.supplierCategory`: Exposes CRUD operations for the **SupplierCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SupplierCategories
    * const supplierCategories = await prisma.supplierCategory.findMany()
    * ```
    */
  get supplierCategory(): Prisma.SupplierCategoryDelegate<ExtArgs>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs>;

  /**
   * `prisma.userSession`: Exposes CRUD operations for the **UserSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserSessions
    * const userSessions = await prisma.userSession.findMany()
    * ```
    */
  get userSession(): Prisma.UserSessionDelegate<ExtArgs>;

  /**
   * `prisma.systemConfig`: Exposes CRUD operations for the **SystemConfig** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SystemConfigs
    * const systemConfigs = await prisma.systemConfig.findMany()
    * ```
    */
  get systemConfig(): Prisma.SystemConfigDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;

  /**
   * `prisma.userPermission`: Exposes CRUD operations for the **UserPermission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserPermissions
    * const userPermissions = await prisma.userPermission.findMany()
    * ```
    */
  get userPermission(): Prisma.UserPermissionDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Supplier: 'Supplier',
    PublicEntity: 'PublicEntity',
    Citizen: 'Citizen',
    Category: 'Category',
    Bidding: 'Bidding',
    Proposal: 'Proposal',
    ProposalItem: 'ProposalItem',
    Contract: 'Contract',
    Document: 'Document',
    BiddingCategory: 'BiddingCategory',
    SupplierCategory: 'SupplierCategory',
    AuditLog: 'AuditLog',
    UserSession: 'UserSession',
    SystemConfig: 'SystemConfig',
    Notification: 'Notification',
    UserPermission: 'UserPermission'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "supplier" | "publicEntity" | "citizen" | "category" | "bidding" | "proposal" | "proposalItem" | "contract" | "document" | "biddingCategory" | "supplierCategory" | "auditLog" | "userSession" | "systemConfig" | "notification" | "userPermission"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Supplier: {
        payload: Prisma.$SupplierPayload<ExtArgs>
        fields: Prisma.SupplierFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SupplierFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SupplierFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>
          }
          findFirst: {
            args: Prisma.SupplierFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SupplierFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>
          }
          findMany: {
            args: Prisma.SupplierFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>[]
          }
          create: {
            args: Prisma.SupplierCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>
          }
          createMany: {
            args: Prisma.SupplierCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SupplierCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>[]
          }
          delete: {
            args: Prisma.SupplierDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>
          }
          update: {
            args: Prisma.SupplierUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>
          }
          deleteMany: {
            args: Prisma.SupplierDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SupplierUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SupplierUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>
          }
          aggregate: {
            args: Prisma.SupplierAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSupplier>
          }
          groupBy: {
            args: Prisma.SupplierGroupByArgs<ExtArgs>
            result: $Utils.Optional<SupplierGroupByOutputType>[]
          }
          count: {
            args: Prisma.SupplierCountArgs<ExtArgs>
            result: $Utils.Optional<SupplierCountAggregateOutputType> | number
          }
        }
      }
      PublicEntity: {
        payload: Prisma.$PublicEntityPayload<ExtArgs>
        fields: Prisma.PublicEntityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PublicEntityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicEntityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PublicEntityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicEntityPayload>
          }
          findFirst: {
            args: Prisma.PublicEntityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicEntityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PublicEntityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicEntityPayload>
          }
          findMany: {
            args: Prisma.PublicEntityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicEntityPayload>[]
          }
          create: {
            args: Prisma.PublicEntityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicEntityPayload>
          }
          createMany: {
            args: Prisma.PublicEntityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PublicEntityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicEntityPayload>[]
          }
          delete: {
            args: Prisma.PublicEntityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicEntityPayload>
          }
          update: {
            args: Prisma.PublicEntityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicEntityPayload>
          }
          deleteMany: {
            args: Prisma.PublicEntityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PublicEntityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PublicEntityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicEntityPayload>
          }
          aggregate: {
            args: Prisma.PublicEntityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePublicEntity>
          }
          groupBy: {
            args: Prisma.PublicEntityGroupByArgs<ExtArgs>
            result: $Utils.Optional<PublicEntityGroupByOutputType>[]
          }
          count: {
            args: Prisma.PublicEntityCountArgs<ExtArgs>
            result: $Utils.Optional<PublicEntityCountAggregateOutputType> | number
          }
        }
      }
      Citizen: {
        payload: Prisma.$CitizenPayload<ExtArgs>
        fields: Prisma.CitizenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CitizenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitizenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CitizenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitizenPayload>
          }
          findFirst: {
            args: Prisma.CitizenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitizenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CitizenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitizenPayload>
          }
          findMany: {
            args: Prisma.CitizenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitizenPayload>[]
          }
          create: {
            args: Prisma.CitizenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitizenPayload>
          }
          createMany: {
            args: Prisma.CitizenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CitizenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitizenPayload>[]
          }
          delete: {
            args: Prisma.CitizenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitizenPayload>
          }
          update: {
            args: Prisma.CitizenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitizenPayload>
          }
          deleteMany: {
            args: Prisma.CitizenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CitizenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CitizenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitizenPayload>
          }
          aggregate: {
            args: Prisma.CitizenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCitizen>
          }
          groupBy: {
            args: Prisma.CitizenGroupByArgs<ExtArgs>
            result: $Utils.Optional<CitizenGroupByOutputType>[]
          }
          count: {
            args: Prisma.CitizenCountArgs<ExtArgs>
            result: $Utils.Optional<CitizenCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      Bidding: {
        payload: Prisma.$BiddingPayload<ExtArgs>
        fields: Prisma.BiddingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BiddingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiddingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BiddingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiddingPayload>
          }
          findFirst: {
            args: Prisma.BiddingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiddingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BiddingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiddingPayload>
          }
          findMany: {
            args: Prisma.BiddingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiddingPayload>[]
          }
          create: {
            args: Prisma.BiddingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiddingPayload>
          }
          createMany: {
            args: Prisma.BiddingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BiddingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiddingPayload>[]
          }
          delete: {
            args: Prisma.BiddingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiddingPayload>
          }
          update: {
            args: Prisma.BiddingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiddingPayload>
          }
          deleteMany: {
            args: Prisma.BiddingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BiddingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BiddingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiddingPayload>
          }
          aggregate: {
            args: Prisma.BiddingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBidding>
          }
          groupBy: {
            args: Prisma.BiddingGroupByArgs<ExtArgs>
            result: $Utils.Optional<BiddingGroupByOutputType>[]
          }
          count: {
            args: Prisma.BiddingCountArgs<ExtArgs>
            result: $Utils.Optional<BiddingCountAggregateOutputType> | number
          }
        }
      }
      Proposal: {
        payload: Prisma.$ProposalPayload<ExtArgs>
        fields: Prisma.ProposalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProposalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProposalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalPayload>
          }
          findFirst: {
            args: Prisma.ProposalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProposalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalPayload>
          }
          findMany: {
            args: Prisma.ProposalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalPayload>[]
          }
          create: {
            args: Prisma.ProposalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalPayload>
          }
          createMany: {
            args: Prisma.ProposalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProposalCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalPayload>[]
          }
          delete: {
            args: Prisma.ProposalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalPayload>
          }
          update: {
            args: Prisma.ProposalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalPayload>
          }
          deleteMany: {
            args: Prisma.ProposalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProposalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProposalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalPayload>
          }
          aggregate: {
            args: Prisma.ProposalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProposal>
          }
          groupBy: {
            args: Prisma.ProposalGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProposalGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProposalCountArgs<ExtArgs>
            result: $Utils.Optional<ProposalCountAggregateOutputType> | number
          }
        }
      }
      ProposalItem: {
        payload: Prisma.$ProposalItemPayload<ExtArgs>
        fields: Prisma.ProposalItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProposalItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProposalItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalItemPayload>
          }
          findFirst: {
            args: Prisma.ProposalItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProposalItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalItemPayload>
          }
          findMany: {
            args: Prisma.ProposalItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalItemPayload>[]
          }
          create: {
            args: Prisma.ProposalItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalItemPayload>
          }
          createMany: {
            args: Prisma.ProposalItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProposalItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalItemPayload>[]
          }
          delete: {
            args: Prisma.ProposalItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalItemPayload>
          }
          update: {
            args: Prisma.ProposalItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalItemPayload>
          }
          deleteMany: {
            args: Prisma.ProposalItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProposalItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProposalItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalItemPayload>
          }
          aggregate: {
            args: Prisma.ProposalItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProposalItem>
          }
          groupBy: {
            args: Prisma.ProposalItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProposalItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProposalItemCountArgs<ExtArgs>
            result: $Utils.Optional<ProposalItemCountAggregateOutputType> | number
          }
        }
      }
      Contract: {
        payload: Prisma.$ContractPayload<ExtArgs>
        fields: Prisma.ContractFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContractFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContractFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          findFirst: {
            args: Prisma.ContractFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContractFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          findMany: {
            args: Prisma.ContractFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>[]
          }
          create: {
            args: Prisma.ContractCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          createMany: {
            args: Prisma.ContractCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContractCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>[]
          }
          delete: {
            args: Prisma.ContractDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          update: {
            args: Prisma.ContractUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          deleteMany: {
            args: Prisma.ContractDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContractUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ContractUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          aggregate: {
            args: Prisma.ContractAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContract>
          }
          groupBy: {
            args: Prisma.ContractGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContractGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContractCountArgs<ExtArgs>
            result: $Utils.Optional<ContractCountAggregateOutputType> | number
          }
        }
      }
      Document: {
        payload: Prisma.$DocumentPayload<ExtArgs>
        fields: Prisma.DocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findFirst: {
            args: Prisma.DocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findMany: {
            args: Prisma.DocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          create: {
            args: Prisma.DocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          createMany: {
            args: Prisma.DocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          delete: {
            args: Prisma.DocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          update: {
            args: Prisma.DocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          deleteMany: {
            args: Prisma.DocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          aggregate: {
            args: Prisma.DocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocument>
          }
          groupBy: {
            args: Prisma.DocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentCountAggregateOutputType> | number
          }
        }
      }
      BiddingCategory: {
        payload: Prisma.$BiddingCategoryPayload<ExtArgs>
        fields: Prisma.BiddingCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BiddingCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiddingCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BiddingCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiddingCategoryPayload>
          }
          findFirst: {
            args: Prisma.BiddingCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiddingCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BiddingCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiddingCategoryPayload>
          }
          findMany: {
            args: Prisma.BiddingCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiddingCategoryPayload>[]
          }
          create: {
            args: Prisma.BiddingCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiddingCategoryPayload>
          }
          createMany: {
            args: Prisma.BiddingCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BiddingCategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiddingCategoryPayload>[]
          }
          delete: {
            args: Prisma.BiddingCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiddingCategoryPayload>
          }
          update: {
            args: Prisma.BiddingCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiddingCategoryPayload>
          }
          deleteMany: {
            args: Prisma.BiddingCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BiddingCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BiddingCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiddingCategoryPayload>
          }
          aggregate: {
            args: Prisma.BiddingCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBiddingCategory>
          }
          groupBy: {
            args: Prisma.BiddingCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<BiddingCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.BiddingCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<BiddingCategoryCountAggregateOutputType> | number
          }
        }
      }
      SupplierCategory: {
        payload: Prisma.$SupplierCategoryPayload<ExtArgs>
        fields: Prisma.SupplierCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SupplierCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SupplierCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierCategoryPayload>
          }
          findFirst: {
            args: Prisma.SupplierCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SupplierCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierCategoryPayload>
          }
          findMany: {
            args: Prisma.SupplierCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierCategoryPayload>[]
          }
          create: {
            args: Prisma.SupplierCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierCategoryPayload>
          }
          createMany: {
            args: Prisma.SupplierCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SupplierCategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierCategoryPayload>[]
          }
          delete: {
            args: Prisma.SupplierCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierCategoryPayload>
          }
          update: {
            args: Prisma.SupplierCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierCategoryPayload>
          }
          deleteMany: {
            args: Prisma.SupplierCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SupplierCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SupplierCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierCategoryPayload>
          }
          aggregate: {
            args: Prisma.SupplierCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSupplierCategory>
          }
          groupBy: {
            args: Prisma.SupplierCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<SupplierCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.SupplierCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<SupplierCategoryCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
      UserSession: {
        payload: Prisma.$UserSessionPayload<ExtArgs>
        fields: Prisma.UserSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          findFirst: {
            args: Prisma.UserSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          findMany: {
            args: Prisma.UserSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>[]
          }
          create: {
            args: Prisma.UserSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          createMany: {
            args: Prisma.UserSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>[]
          }
          delete: {
            args: Prisma.UserSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          update: {
            args: Prisma.UserSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          deleteMany: {
            args: Prisma.UserSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          aggregate: {
            args: Prisma.UserSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserSession>
          }
          groupBy: {
            args: Prisma.UserSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserSessionCountArgs<ExtArgs>
            result: $Utils.Optional<UserSessionCountAggregateOutputType> | number
          }
        }
      }
      SystemConfig: {
        payload: Prisma.$SystemConfigPayload<ExtArgs>
        fields: Prisma.SystemConfigFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SystemConfigFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SystemConfigFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          findFirst: {
            args: Prisma.SystemConfigFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SystemConfigFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          findMany: {
            args: Prisma.SystemConfigFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>[]
          }
          create: {
            args: Prisma.SystemConfigCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          createMany: {
            args: Prisma.SystemConfigCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SystemConfigCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>[]
          }
          delete: {
            args: Prisma.SystemConfigDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          update: {
            args: Prisma.SystemConfigUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          deleteMany: {
            args: Prisma.SystemConfigDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SystemConfigUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SystemConfigUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          aggregate: {
            args: Prisma.SystemConfigAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSystemConfig>
          }
          groupBy: {
            args: Prisma.SystemConfigGroupByArgs<ExtArgs>
            result: $Utils.Optional<SystemConfigGroupByOutputType>[]
          }
          count: {
            args: Prisma.SystemConfigCountArgs<ExtArgs>
            result: $Utils.Optional<SystemConfigCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      UserPermission: {
        payload: Prisma.$UserPermissionPayload<ExtArgs>
        fields: Prisma.UserPermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserPermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserPermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          findFirst: {
            args: Prisma.UserPermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserPermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          findMany: {
            args: Prisma.UserPermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>[]
          }
          create: {
            args: Prisma.UserPermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          createMany: {
            args: Prisma.UserPermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserPermissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>[]
          }
          delete: {
            args: Prisma.UserPermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          update: {
            args: Prisma.UserPermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          deleteMany: {
            args: Prisma.UserPermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserPermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserPermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          aggregate: {
            args: Prisma.UserPermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserPermission>
          }
          groupBy: {
            args: Prisma.UserPermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserPermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserPermissionCountArgs<ExtArgs>
            result: $Utils.Optional<UserPermissionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    auditLogs: number
    sessions: number
    permissions: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    auditLogs?: boolean | UserCountOutputTypeCountAuditLogsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    permissions?: boolean | UserCountOutputTypeCountPermissionsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPermissionWhereInput
  }


  /**
   * Count Type SupplierCountOutputType
   */

  export type SupplierCountOutputType = {
    proposals: number
    contracts: number
    documents: number
    categories: number
  }

  export type SupplierCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    proposals?: boolean | SupplierCountOutputTypeCountProposalsArgs
    contracts?: boolean | SupplierCountOutputTypeCountContractsArgs
    documents?: boolean | SupplierCountOutputTypeCountDocumentsArgs
    categories?: boolean | SupplierCountOutputTypeCountCategoriesArgs
  }

  // Custom InputTypes
  /**
   * SupplierCountOutputType without action
   */
  export type SupplierCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierCountOutputType
     */
    select?: SupplierCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SupplierCountOutputType without action
   */
  export type SupplierCountOutputTypeCountProposalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProposalWhereInput
  }

  /**
   * SupplierCountOutputType without action
   */
  export type SupplierCountOutputTypeCountContractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractWhereInput
  }

  /**
   * SupplierCountOutputType without action
   */
  export type SupplierCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }

  /**
   * SupplierCountOutputType without action
   */
  export type SupplierCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SupplierCategoryWhereInput
  }


  /**
   * Count Type PublicEntityCountOutputType
   */

  export type PublicEntityCountOutputType = {
    biddings: number
    contracts: number
    documents: number
  }

  export type PublicEntityCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    biddings?: boolean | PublicEntityCountOutputTypeCountBiddingsArgs
    contracts?: boolean | PublicEntityCountOutputTypeCountContractsArgs
    documents?: boolean | PublicEntityCountOutputTypeCountDocumentsArgs
  }

  // Custom InputTypes
  /**
   * PublicEntityCountOutputType without action
   */
  export type PublicEntityCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublicEntityCountOutputType
     */
    select?: PublicEntityCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PublicEntityCountOutputType without action
   */
  export type PublicEntityCountOutputTypeCountBiddingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BiddingWhereInput
  }

  /**
   * PublicEntityCountOutputType without action
   */
  export type PublicEntityCountOutputTypeCountContractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractWhereInput
  }

  /**
   * PublicEntityCountOutputType without action
   */
  export type PublicEntityCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    children: number
    biddings: number
    suppliers: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    children?: boolean | CategoryCountOutputTypeCountChildrenArgs
    biddings?: boolean | CategoryCountOutputTypeCountBiddingsArgs
    suppliers?: boolean | CategoryCountOutputTypeCountSuppliersArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountChildrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountBiddingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BiddingCategoryWhereInput
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountSuppliersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SupplierCategoryWhereInput
  }


  /**
   * Count Type BiddingCountOutputType
   */

  export type BiddingCountOutputType = {
    proposals: number
    documents: number
    categories: number
  }

  export type BiddingCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    proposals?: boolean | BiddingCountOutputTypeCountProposalsArgs
    documents?: boolean | BiddingCountOutputTypeCountDocumentsArgs
    categories?: boolean | BiddingCountOutputTypeCountCategoriesArgs
  }

  // Custom InputTypes
  /**
   * BiddingCountOutputType without action
   */
  export type BiddingCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BiddingCountOutputType
     */
    select?: BiddingCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BiddingCountOutputType without action
   */
  export type BiddingCountOutputTypeCountProposalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProposalWhereInput
  }

  /**
   * BiddingCountOutputType without action
   */
  export type BiddingCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }

  /**
   * BiddingCountOutputType without action
   */
  export type BiddingCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BiddingCategoryWhereInput
  }


  /**
   * Count Type ProposalCountOutputType
   */

  export type ProposalCountOutputType = {
    items: number
    documents: number
  }

  export type ProposalCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | ProposalCountOutputTypeCountItemsArgs
    documents?: boolean | ProposalCountOutputTypeCountDocumentsArgs
  }

  // Custom InputTypes
  /**
   * ProposalCountOutputType without action
   */
  export type ProposalCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProposalCountOutputType
     */
    select?: ProposalCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProposalCountOutputType without action
   */
  export type ProposalCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProposalItemWhereInput
  }

  /**
   * ProposalCountOutputType without action
   */
  export type ProposalCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }


  /**
   * Count Type ContractCountOutputType
   */

  export type ContractCountOutputType = {
    documents: number
  }

  export type ContractCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documents?: boolean | ContractCountOutputTypeCountDocumentsArgs
  }

  // Custom InputTypes
  /**
   * ContractCountOutputType without action
   */
  export type ContractCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractCountOutputType
     */
    select?: ContractCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ContractCountOutputType without action
   */
  export type ContractCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    role: $Enums.UserRole | null
    status: $Enums.UserStatus | null
    firstName: string | null
    lastName: string | null
    phone: string | null
    avatar: string | null
    lastLoginAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    role: $Enums.UserRole | null
    status: $Enums.UserStatus | null
    firstName: string | null
    lastName: string | null
    phone: string | null
    avatar: string | null
    lastLoginAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    role: number
    status: number
    firstName: number
    lastName: number
    phone: number
    avatar: number
    lastLoginAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    status?: true
    firstName?: true
    lastName?: true
    phone?: true
    avatar?: true
    lastLoginAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    status?: true
    firstName?: true
    lastName?: true
    phone?: true
    avatar?: true
    lastLoginAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    status?: true
    firstName?: true
    lastName?: true
    phone?: true
    avatar?: true
    lastLoginAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    role: $Enums.UserRole
    status: $Enums.UserStatus
    firstName: string
    lastName: string
    phone: string | null
    avatar: string | null
    lastLoginAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    status?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    avatar?: boolean
    lastLoginAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    supplier?: boolean | User$supplierArgs<ExtArgs>
    publicEntity?: boolean | User$publicEntityArgs<ExtArgs>
    citizen?: boolean | User$citizenArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    permissions?: boolean | User$permissionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    status?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    avatar?: boolean
    lastLoginAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    status?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    avatar?: boolean
    lastLoginAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    supplier?: boolean | User$supplierArgs<ExtArgs>
    publicEntity?: boolean | User$publicEntityArgs<ExtArgs>
    citizen?: boolean | User$citizenArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    permissions?: boolean | User$permissionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      supplier: Prisma.$SupplierPayload<ExtArgs> | null
      publicEntity: Prisma.$PublicEntityPayload<ExtArgs> | null
      citizen: Prisma.$CitizenPayload<ExtArgs> | null
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
      sessions: Prisma.$UserSessionPayload<ExtArgs>[]
      permissions: Prisma.$UserPermissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      role: $Enums.UserRole
      status: $Enums.UserStatus
      firstName: string
      lastName: string
      phone: string | null
      avatar: string | null
      lastLoginAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    supplier<T extends User$supplierArgs<ExtArgs> = {}>(args?: Subset<T, User$supplierArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    publicEntity<T extends User$publicEntityArgs<ExtArgs> = {}>(args?: Subset<T, User$publicEntityArgs<ExtArgs>>): Prisma__PublicEntityClient<$Result.GetResult<Prisma.$PublicEntityPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    citizen<T extends User$citizenArgs<ExtArgs> = {}>(args?: Subset<T, User$citizenArgs<ExtArgs>>): Prisma__CitizenClient<$Result.GetResult<Prisma.$CitizenPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    auditLogs<T extends User$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany"> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findMany"> | Null>
    permissions<T extends User$permissionsArgs<ExtArgs> = {}>(args?: Subset<T, User$permissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly status: FieldRef<"User", 'UserStatus'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly lastLoginAt: FieldRef<"User", 'DateTime'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.supplier
   */
  export type User$supplierArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierInclude<ExtArgs> | null
    where?: SupplierWhereInput
  }

  /**
   * User.publicEntity
   */
  export type User$publicEntityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublicEntity
     */
    select?: PublicEntitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicEntityInclude<ExtArgs> | null
    where?: PublicEntityWhereInput
  }

  /**
   * User.citizen
   */
  export type User$citizenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Citizen
     */
    select?: CitizenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitizenInclude<ExtArgs> | null
    where?: CitizenWhereInput
  }

  /**
   * User.auditLogs
   */
  export type User$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    where?: UserSessionWhereInput
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    cursor?: UserSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * User.permissions
   */
  export type User$permissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    where?: UserPermissionWhereInput
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    cursor?: UserPermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Supplier
   */

  export type AggregateSupplier = {
    _count: SupplierCountAggregateOutputType | null
    _min: SupplierMinAggregateOutputType | null
    _max: SupplierMaxAggregateOutputType | null
  }

  export type SupplierMinAggregateOutputType = {
    id: string | null
    userId: string | null
    companyName: string | null
    tradeName: string | null
    cnpj: string | null
    stateRegistration: string | null
    municipalRegistration: string | null
    address: string | null
    city: string | null
    state: string | null
    zipCode: string | null
    website: string | null
    description: string | null
    isActive: boolean | null
    verifiedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SupplierMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    companyName: string | null
    tradeName: string | null
    cnpj: string | null
    stateRegistration: string | null
    municipalRegistration: string | null
    address: string | null
    city: string | null
    state: string | null
    zipCode: string | null
    website: string | null
    description: string | null
    isActive: boolean | null
    verifiedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SupplierCountAggregateOutputType = {
    id: number
    userId: number
    companyName: number
    tradeName: number
    cnpj: number
    stateRegistration: number
    municipalRegistration: number
    address: number
    city: number
    state: number
    zipCode: number
    website: number
    description: number
    isActive: number
    verifiedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SupplierMinAggregateInputType = {
    id?: true
    userId?: true
    companyName?: true
    tradeName?: true
    cnpj?: true
    stateRegistration?: true
    municipalRegistration?: true
    address?: true
    city?: true
    state?: true
    zipCode?: true
    website?: true
    description?: true
    isActive?: true
    verifiedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SupplierMaxAggregateInputType = {
    id?: true
    userId?: true
    companyName?: true
    tradeName?: true
    cnpj?: true
    stateRegistration?: true
    municipalRegistration?: true
    address?: true
    city?: true
    state?: true
    zipCode?: true
    website?: true
    description?: true
    isActive?: true
    verifiedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SupplierCountAggregateInputType = {
    id?: true
    userId?: true
    companyName?: true
    tradeName?: true
    cnpj?: true
    stateRegistration?: true
    municipalRegistration?: true
    address?: true
    city?: true
    state?: true
    zipCode?: true
    website?: true
    description?: true
    isActive?: true
    verifiedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SupplierAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Supplier to aggregate.
     */
    where?: SupplierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Suppliers to fetch.
     */
    orderBy?: SupplierOrderByWithRelationInput | SupplierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SupplierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Suppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Suppliers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Suppliers
    **/
    _count?: true | SupplierCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SupplierMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SupplierMaxAggregateInputType
  }

  export type GetSupplierAggregateType<T extends SupplierAggregateArgs> = {
        [P in keyof T & keyof AggregateSupplier]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSupplier[P]>
      : GetScalarType<T[P], AggregateSupplier[P]>
  }




  export type SupplierGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SupplierWhereInput
    orderBy?: SupplierOrderByWithAggregationInput | SupplierOrderByWithAggregationInput[]
    by: SupplierScalarFieldEnum[] | SupplierScalarFieldEnum
    having?: SupplierScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SupplierCountAggregateInputType | true
    _min?: SupplierMinAggregateInputType
    _max?: SupplierMaxAggregateInputType
  }

  export type SupplierGroupByOutputType = {
    id: string
    userId: string
    companyName: string
    tradeName: string | null
    cnpj: string
    stateRegistration: string | null
    municipalRegistration: string | null
    address: string
    city: string
    state: string
    zipCode: string
    website: string | null
    description: string | null
    isActive: boolean
    verifiedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: SupplierCountAggregateOutputType | null
    _min: SupplierMinAggregateOutputType | null
    _max: SupplierMaxAggregateOutputType | null
  }

  type GetSupplierGroupByPayload<T extends SupplierGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SupplierGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SupplierGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SupplierGroupByOutputType[P]>
            : GetScalarType<T[P], SupplierGroupByOutputType[P]>
        }
      >
    >


  export type SupplierSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    companyName?: boolean
    tradeName?: boolean
    cnpj?: boolean
    stateRegistration?: boolean
    municipalRegistration?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    zipCode?: boolean
    website?: boolean
    description?: boolean
    isActive?: boolean
    verifiedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    proposals?: boolean | Supplier$proposalsArgs<ExtArgs>
    contracts?: boolean | Supplier$contractsArgs<ExtArgs>
    documents?: boolean | Supplier$documentsArgs<ExtArgs>
    categories?: boolean | Supplier$categoriesArgs<ExtArgs>
    _count?: boolean | SupplierCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["supplier"]>

  export type SupplierSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    companyName?: boolean
    tradeName?: boolean
    cnpj?: boolean
    stateRegistration?: boolean
    municipalRegistration?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    zipCode?: boolean
    website?: boolean
    description?: boolean
    isActive?: boolean
    verifiedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["supplier"]>

  export type SupplierSelectScalar = {
    id?: boolean
    userId?: boolean
    companyName?: boolean
    tradeName?: boolean
    cnpj?: boolean
    stateRegistration?: boolean
    municipalRegistration?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    zipCode?: boolean
    website?: boolean
    description?: boolean
    isActive?: boolean
    verifiedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SupplierInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    proposals?: boolean | Supplier$proposalsArgs<ExtArgs>
    contracts?: boolean | Supplier$contractsArgs<ExtArgs>
    documents?: boolean | Supplier$documentsArgs<ExtArgs>
    categories?: boolean | Supplier$categoriesArgs<ExtArgs>
    _count?: boolean | SupplierCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SupplierIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SupplierPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Supplier"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      proposals: Prisma.$ProposalPayload<ExtArgs>[]
      contracts: Prisma.$ContractPayload<ExtArgs>[]
      documents: Prisma.$DocumentPayload<ExtArgs>[]
      categories: Prisma.$SupplierCategoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      companyName: string
      tradeName: string | null
      cnpj: string
      stateRegistration: string | null
      municipalRegistration: string | null
      address: string
      city: string
      state: string
      zipCode: string
      website: string | null
      description: string | null
      isActive: boolean
      verifiedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["supplier"]>
    composites: {}
  }

  type SupplierGetPayload<S extends boolean | null | undefined | SupplierDefaultArgs> = $Result.GetResult<Prisma.$SupplierPayload, S>

  type SupplierCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SupplierFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SupplierCountAggregateInputType | true
    }

  export interface SupplierDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Supplier'], meta: { name: 'Supplier' } }
    /**
     * Find zero or one Supplier that matches the filter.
     * @param {SupplierFindUniqueArgs} args - Arguments to find a Supplier
     * @example
     * // Get one Supplier
     * const supplier = await prisma.supplier.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SupplierFindUniqueArgs>(args: SelectSubset<T, SupplierFindUniqueArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Supplier that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SupplierFindUniqueOrThrowArgs} args - Arguments to find a Supplier
     * @example
     * // Get one Supplier
     * const supplier = await prisma.supplier.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SupplierFindUniqueOrThrowArgs>(args: SelectSubset<T, SupplierFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Supplier that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierFindFirstArgs} args - Arguments to find a Supplier
     * @example
     * // Get one Supplier
     * const supplier = await prisma.supplier.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SupplierFindFirstArgs>(args?: SelectSubset<T, SupplierFindFirstArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Supplier that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierFindFirstOrThrowArgs} args - Arguments to find a Supplier
     * @example
     * // Get one Supplier
     * const supplier = await prisma.supplier.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SupplierFindFirstOrThrowArgs>(args?: SelectSubset<T, SupplierFindFirstOrThrowArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Suppliers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Suppliers
     * const suppliers = await prisma.supplier.findMany()
     * 
     * // Get first 10 Suppliers
     * const suppliers = await prisma.supplier.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const supplierWithIdOnly = await prisma.supplier.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SupplierFindManyArgs>(args?: SelectSubset<T, SupplierFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Supplier.
     * @param {SupplierCreateArgs} args - Arguments to create a Supplier.
     * @example
     * // Create one Supplier
     * const Supplier = await prisma.supplier.create({
     *   data: {
     *     // ... data to create a Supplier
     *   }
     * })
     * 
     */
    create<T extends SupplierCreateArgs>(args: SelectSubset<T, SupplierCreateArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Suppliers.
     * @param {SupplierCreateManyArgs} args - Arguments to create many Suppliers.
     * @example
     * // Create many Suppliers
     * const supplier = await prisma.supplier.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SupplierCreateManyArgs>(args?: SelectSubset<T, SupplierCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Suppliers and returns the data saved in the database.
     * @param {SupplierCreateManyAndReturnArgs} args - Arguments to create many Suppliers.
     * @example
     * // Create many Suppliers
     * const supplier = await prisma.supplier.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Suppliers and only return the `id`
     * const supplierWithIdOnly = await prisma.supplier.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SupplierCreateManyAndReturnArgs>(args?: SelectSubset<T, SupplierCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Supplier.
     * @param {SupplierDeleteArgs} args - Arguments to delete one Supplier.
     * @example
     * // Delete one Supplier
     * const Supplier = await prisma.supplier.delete({
     *   where: {
     *     // ... filter to delete one Supplier
     *   }
     * })
     * 
     */
    delete<T extends SupplierDeleteArgs>(args: SelectSubset<T, SupplierDeleteArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Supplier.
     * @param {SupplierUpdateArgs} args - Arguments to update one Supplier.
     * @example
     * // Update one Supplier
     * const supplier = await prisma.supplier.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SupplierUpdateArgs>(args: SelectSubset<T, SupplierUpdateArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Suppliers.
     * @param {SupplierDeleteManyArgs} args - Arguments to filter Suppliers to delete.
     * @example
     * // Delete a few Suppliers
     * const { count } = await prisma.supplier.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SupplierDeleteManyArgs>(args?: SelectSubset<T, SupplierDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Suppliers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Suppliers
     * const supplier = await prisma.supplier.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SupplierUpdateManyArgs>(args: SelectSubset<T, SupplierUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Supplier.
     * @param {SupplierUpsertArgs} args - Arguments to update or create a Supplier.
     * @example
     * // Update or create a Supplier
     * const supplier = await prisma.supplier.upsert({
     *   create: {
     *     // ... data to create a Supplier
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Supplier we want to update
     *   }
     * })
     */
    upsert<T extends SupplierUpsertArgs>(args: SelectSubset<T, SupplierUpsertArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Suppliers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierCountArgs} args - Arguments to filter Suppliers to count.
     * @example
     * // Count the number of Suppliers
     * const count = await prisma.supplier.count({
     *   where: {
     *     // ... the filter for the Suppliers we want to count
     *   }
     * })
    **/
    count<T extends SupplierCountArgs>(
      args?: Subset<T, SupplierCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SupplierCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Supplier.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SupplierAggregateArgs>(args: Subset<T, SupplierAggregateArgs>): Prisma.PrismaPromise<GetSupplierAggregateType<T>>

    /**
     * Group by Supplier.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SupplierGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SupplierGroupByArgs['orderBy'] }
        : { orderBy?: SupplierGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SupplierGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSupplierGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Supplier model
   */
  readonly fields: SupplierFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Supplier.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SupplierClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    proposals<T extends Supplier$proposalsArgs<ExtArgs> = {}>(args?: Subset<T, Supplier$proposalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "findMany"> | Null>
    contracts<T extends Supplier$contractsArgs<ExtArgs> = {}>(args?: Subset<T, Supplier$contractsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findMany"> | Null>
    documents<T extends Supplier$documentsArgs<ExtArgs> = {}>(args?: Subset<T, Supplier$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany"> | Null>
    categories<T extends Supplier$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, Supplier$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupplierCategoryPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Supplier model
   */ 
  interface SupplierFieldRefs {
    readonly id: FieldRef<"Supplier", 'String'>
    readonly userId: FieldRef<"Supplier", 'String'>
    readonly companyName: FieldRef<"Supplier", 'String'>
    readonly tradeName: FieldRef<"Supplier", 'String'>
    readonly cnpj: FieldRef<"Supplier", 'String'>
    readonly stateRegistration: FieldRef<"Supplier", 'String'>
    readonly municipalRegistration: FieldRef<"Supplier", 'String'>
    readonly address: FieldRef<"Supplier", 'String'>
    readonly city: FieldRef<"Supplier", 'String'>
    readonly state: FieldRef<"Supplier", 'String'>
    readonly zipCode: FieldRef<"Supplier", 'String'>
    readonly website: FieldRef<"Supplier", 'String'>
    readonly description: FieldRef<"Supplier", 'String'>
    readonly isActive: FieldRef<"Supplier", 'Boolean'>
    readonly verifiedAt: FieldRef<"Supplier", 'DateTime'>
    readonly createdAt: FieldRef<"Supplier", 'DateTime'>
    readonly updatedAt: FieldRef<"Supplier", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Supplier findUnique
   */
  export type SupplierFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * Filter, which Supplier to fetch.
     */
    where: SupplierWhereUniqueInput
  }

  /**
   * Supplier findUniqueOrThrow
   */
  export type SupplierFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * Filter, which Supplier to fetch.
     */
    where: SupplierWhereUniqueInput
  }

  /**
   * Supplier findFirst
   */
  export type SupplierFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * Filter, which Supplier to fetch.
     */
    where?: SupplierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Suppliers to fetch.
     */
    orderBy?: SupplierOrderByWithRelationInput | SupplierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Suppliers.
     */
    cursor?: SupplierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Suppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Suppliers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Suppliers.
     */
    distinct?: SupplierScalarFieldEnum | SupplierScalarFieldEnum[]
  }

  /**
   * Supplier findFirstOrThrow
   */
  export type SupplierFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * Filter, which Supplier to fetch.
     */
    where?: SupplierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Suppliers to fetch.
     */
    orderBy?: SupplierOrderByWithRelationInput | SupplierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Suppliers.
     */
    cursor?: SupplierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Suppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Suppliers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Suppliers.
     */
    distinct?: SupplierScalarFieldEnum | SupplierScalarFieldEnum[]
  }

  /**
   * Supplier findMany
   */
  export type SupplierFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * Filter, which Suppliers to fetch.
     */
    where?: SupplierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Suppliers to fetch.
     */
    orderBy?: SupplierOrderByWithRelationInput | SupplierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Suppliers.
     */
    cursor?: SupplierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Suppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Suppliers.
     */
    skip?: number
    distinct?: SupplierScalarFieldEnum | SupplierScalarFieldEnum[]
  }

  /**
   * Supplier create
   */
  export type SupplierCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * The data needed to create a Supplier.
     */
    data: XOR<SupplierCreateInput, SupplierUncheckedCreateInput>
  }

  /**
   * Supplier createMany
   */
  export type SupplierCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Suppliers.
     */
    data: SupplierCreateManyInput | SupplierCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Supplier createManyAndReturn
   */
  export type SupplierCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Suppliers.
     */
    data: SupplierCreateManyInput | SupplierCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Supplier update
   */
  export type SupplierUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * The data needed to update a Supplier.
     */
    data: XOR<SupplierUpdateInput, SupplierUncheckedUpdateInput>
    /**
     * Choose, which Supplier to update.
     */
    where: SupplierWhereUniqueInput
  }

  /**
   * Supplier updateMany
   */
  export type SupplierUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Suppliers.
     */
    data: XOR<SupplierUpdateManyMutationInput, SupplierUncheckedUpdateManyInput>
    /**
     * Filter which Suppliers to update
     */
    where?: SupplierWhereInput
  }

  /**
   * Supplier upsert
   */
  export type SupplierUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * The filter to search for the Supplier to update in case it exists.
     */
    where: SupplierWhereUniqueInput
    /**
     * In case the Supplier found by the `where` argument doesn't exist, create a new Supplier with this data.
     */
    create: XOR<SupplierCreateInput, SupplierUncheckedCreateInput>
    /**
     * In case the Supplier was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SupplierUpdateInput, SupplierUncheckedUpdateInput>
  }

  /**
   * Supplier delete
   */
  export type SupplierDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * Filter which Supplier to delete.
     */
    where: SupplierWhereUniqueInput
  }

  /**
   * Supplier deleteMany
   */
  export type SupplierDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Suppliers to delete
     */
    where?: SupplierWhereInput
  }

  /**
   * Supplier.proposals
   */
  export type Supplier$proposalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    where?: ProposalWhereInput
    orderBy?: ProposalOrderByWithRelationInput | ProposalOrderByWithRelationInput[]
    cursor?: ProposalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProposalScalarFieldEnum | ProposalScalarFieldEnum[]
  }

  /**
   * Supplier.contracts
   */
  export type Supplier$contractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    where?: ContractWhereInput
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    cursor?: ContractWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContractScalarFieldEnum | ContractScalarFieldEnum[]
  }

  /**
   * Supplier.documents
   */
  export type Supplier$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Supplier.categories
   */
  export type Supplier$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierCategory
     */
    select?: SupplierCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierCategoryInclude<ExtArgs> | null
    where?: SupplierCategoryWhereInput
    orderBy?: SupplierCategoryOrderByWithRelationInput | SupplierCategoryOrderByWithRelationInput[]
    cursor?: SupplierCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SupplierCategoryScalarFieldEnum | SupplierCategoryScalarFieldEnum[]
  }

  /**
   * Supplier without action
   */
  export type SupplierDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierInclude<ExtArgs> | null
  }


  /**
   * Model PublicEntity
   */

  export type AggregatePublicEntity = {
    _count: PublicEntityCountAggregateOutputType | null
    _min: PublicEntityMinAggregateOutputType | null
    _max: PublicEntityMaxAggregateOutputType | null
  }

  export type PublicEntityMinAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    cnpj: string | null
    entityType: string | null
    address: string | null
    city: string | null
    state: string | null
    zipCode: string | null
    phone: string | null
    website: string | null
    isActive: boolean | null
    verifiedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PublicEntityMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    cnpj: string | null
    entityType: string | null
    address: string | null
    city: string | null
    state: string | null
    zipCode: string | null
    phone: string | null
    website: string | null
    isActive: boolean | null
    verifiedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PublicEntityCountAggregateOutputType = {
    id: number
    userId: number
    name: number
    cnpj: number
    entityType: number
    address: number
    city: number
    state: number
    zipCode: number
    phone: number
    website: number
    isActive: number
    verifiedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PublicEntityMinAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    cnpj?: true
    entityType?: true
    address?: true
    city?: true
    state?: true
    zipCode?: true
    phone?: true
    website?: true
    isActive?: true
    verifiedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PublicEntityMaxAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    cnpj?: true
    entityType?: true
    address?: true
    city?: true
    state?: true
    zipCode?: true
    phone?: true
    website?: true
    isActive?: true
    verifiedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PublicEntityCountAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    cnpj?: true
    entityType?: true
    address?: true
    city?: true
    state?: true
    zipCode?: true
    phone?: true
    website?: true
    isActive?: true
    verifiedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PublicEntityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PublicEntity to aggregate.
     */
    where?: PublicEntityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PublicEntities to fetch.
     */
    orderBy?: PublicEntityOrderByWithRelationInput | PublicEntityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PublicEntityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PublicEntities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PublicEntities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PublicEntities
    **/
    _count?: true | PublicEntityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PublicEntityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PublicEntityMaxAggregateInputType
  }

  export type GetPublicEntityAggregateType<T extends PublicEntityAggregateArgs> = {
        [P in keyof T & keyof AggregatePublicEntity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePublicEntity[P]>
      : GetScalarType<T[P], AggregatePublicEntity[P]>
  }




  export type PublicEntityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PublicEntityWhereInput
    orderBy?: PublicEntityOrderByWithAggregationInput | PublicEntityOrderByWithAggregationInput[]
    by: PublicEntityScalarFieldEnum[] | PublicEntityScalarFieldEnum
    having?: PublicEntityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PublicEntityCountAggregateInputType | true
    _min?: PublicEntityMinAggregateInputType
    _max?: PublicEntityMaxAggregateInputType
  }

  export type PublicEntityGroupByOutputType = {
    id: string
    userId: string
    name: string
    cnpj: string
    entityType: string
    address: string
    city: string
    state: string
    zipCode: string
    phone: string
    website: string | null
    isActive: boolean
    verifiedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: PublicEntityCountAggregateOutputType | null
    _min: PublicEntityMinAggregateOutputType | null
    _max: PublicEntityMaxAggregateOutputType | null
  }

  type GetPublicEntityGroupByPayload<T extends PublicEntityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PublicEntityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PublicEntityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PublicEntityGroupByOutputType[P]>
            : GetScalarType<T[P], PublicEntityGroupByOutputType[P]>
        }
      >
    >


  export type PublicEntitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    cnpj?: boolean
    entityType?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    zipCode?: boolean
    phone?: boolean
    website?: boolean
    isActive?: boolean
    verifiedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    biddings?: boolean | PublicEntity$biddingsArgs<ExtArgs>
    contracts?: boolean | PublicEntity$contractsArgs<ExtArgs>
    documents?: boolean | PublicEntity$documentsArgs<ExtArgs>
    _count?: boolean | PublicEntityCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["publicEntity"]>

  export type PublicEntitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    cnpj?: boolean
    entityType?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    zipCode?: boolean
    phone?: boolean
    website?: boolean
    isActive?: boolean
    verifiedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["publicEntity"]>

  export type PublicEntitySelectScalar = {
    id?: boolean
    userId?: boolean
    name?: boolean
    cnpj?: boolean
    entityType?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    zipCode?: boolean
    phone?: boolean
    website?: boolean
    isActive?: boolean
    verifiedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PublicEntityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    biddings?: boolean | PublicEntity$biddingsArgs<ExtArgs>
    contracts?: boolean | PublicEntity$contractsArgs<ExtArgs>
    documents?: boolean | PublicEntity$documentsArgs<ExtArgs>
    _count?: boolean | PublicEntityCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PublicEntityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PublicEntityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PublicEntity"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      biddings: Prisma.$BiddingPayload<ExtArgs>[]
      contracts: Prisma.$ContractPayload<ExtArgs>[]
      documents: Prisma.$DocumentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      name: string
      cnpj: string
      entityType: string
      address: string
      city: string
      state: string
      zipCode: string
      phone: string
      website: string | null
      isActive: boolean
      verifiedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["publicEntity"]>
    composites: {}
  }

  type PublicEntityGetPayload<S extends boolean | null | undefined | PublicEntityDefaultArgs> = $Result.GetResult<Prisma.$PublicEntityPayload, S>

  type PublicEntityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PublicEntityFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PublicEntityCountAggregateInputType | true
    }

  export interface PublicEntityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PublicEntity'], meta: { name: 'PublicEntity' } }
    /**
     * Find zero or one PublicEntity that matches the filter.
     * @param {PublicEntityFindUniqueArgs} args - Arguments to find a PublicEntity
     * @example
     * // Get one PublicEntity
     * const publicEntity = await prisma.publicEntity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PublicEntityFindUniqueArgs>(args: SelectSubset<T, PublicEntityFindUniqueArgs<ExtArgs>>): Prisma__PublicEntityClient<$Result.GetResult<Prisma.$PublicEntityPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PublicEntity that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PublicEntityFindUniqueOrThrowArgs} args - Arguments to find a PublicEntity
     * @example
     * // Get one PublicEntity
     * const publicEntity = await prisma.publicEntity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PublicEntityFindUniqueOrThrowArgs>(args: SelectSubset<T, PublicEntityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PublicEntityClient<$Result.GetResult<Prisma.$PublicEntityPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PublicEntity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicEntityFindFirstArgs} args - Arguments to find a PublicEntity
     * @example
     * // Get one PublicEntity
     * const publicEntity = await prisma.publicEntity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PublicEntityFindFirstArgs>(args?: SelectSubset<T, PublicEntityFindFirstArgs<ExtArgs>>): Prisma__PublicEntityClient<$Result.GetResult<Prisma.$PublicEntityPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PublicEntity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicEntityFindFirstOrThrowArgs} args - Arguments to find a PublicEntity
     * @example
     * // Get one PublicEntity
     * const publicEntity = await prisma.publicEntity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PublicEntityFindFirstOrThrowArgs>(args?: SelectSubset<T, PublicEntityFindFirstOrThrowArgs<ExtArgs>>): Prisma__PublicEntityClient<$Result.GetResult<Prisma.$PublicEntityPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PublicEntities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicEntityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PublicEntities
     * const publicEntities = await prisma.publicEntity.findMany()
     * 
     * // Get first 10 PublicEntities
     * const publicEntities = await prisma.publicEntity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const publicEntityWithIdOnly = await prisma.publicEntity.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PublicEntityFindManyArgs>(args?: SelectSubset<T, PublicEntityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PublicEntityPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PublicEntity.
     * @param {PublicEntityCreateArgs} args - Arguments to create a PublicEntity.
     * @example
     * // Create one PublicEntity
     * const PublicEntity = await prisma.publicEntity.create({
     *   data: {
     *     // ... data to create a PublicEntity
     *   }
     * })
     * 
     */
    create<T extends PublicEntityCreateArgs>(args: SelectSubset<T, PublicEntityCreateArgs<ExtArgs>>): Prisma__PublicEntityClient<$Result.GetResult<Prisma.$PublicEntityPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PublicEntities.
     * @param {PublicEntityCreateManyArgs} args - Arguments to create many PublicEntities.
     * @example
     * // Create many PublicEntities
     * const publicEntity = await prisma.publicEntity.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PublicEntityCreateManyArgs>(args?: SelectSubset<T, PublicEntityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PublicEntities and returns the data saved in the database.
     * @param {PublicEntityCreateManyAndReturnArgs} args - Arguments to create many PublicEntities.
     * @example
     * // Create many PublicEntities
     * const publicEntity = await prisma.publicEntity.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PublicEntities and only return the `id`
     * const publicEntityWithIdOnly = await prisma.publicEntity.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PublicEntityCreateManyAndReturnArgs>(args?: SelectSubset<T, PublicEntityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PublicEntityPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PublicEntity.
     * @param {PublicEntityDeleteArgs} args - Arguments to delete one PublicEntity.
     * @example
     * // Delete one PublicEntity
     * const PublicEntity = await prisma.publicEntity.delete({
     *   where: {
     *     // ... filter to delete one PublicEntity
     *   }
     * })
     * 
     */
    delete<T extends PublicEntityDeleteArgs>(args: SelectSubset<T, PublicEntityDeleteArgs<ExtArgs>>): Prisma__PublicEntityClient<$Result.GetResult<Prisma.$PublicEntityPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PublicEntity.
     * @param {PublicEntityUpdateArgs} args - Arguments to update one PublicEntity.
     * @example
     * // Update one PublicEntity
     * const publicEntity = await prisma.publicEntity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PublicEntityUpdateArgs>(args: SelectSubset<T, PublicEntityUpdateArgs<ExtArgs>>): Prisma__PublicEntityClient<$Result.GetResult<Prisma.$PublicEntityPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PublicEntities.
     * @param {PublicEntityDeleteManyArgs} args - Arguments to filter PublicEntities to delete.
     * @example
     * // Delete a few PublicEntities
     * const { count } = await prisma.publicEntity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PublicEntityDeleteManyArgs>(args?: SelectSubset<T, PublicEntityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PublicEntities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicEntityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PublicEntities
     * const publicEntity = await prisma.publicEntity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PublicEntityUpdateManyArgs>(args: SelectSubset<T, PublicEntityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PublicEntity.
     * @param {PublicEntityUpsertArgs} args - Arguments to update or create a PublicEntity.
     * @example
     * // Update or create a PublicEntity
     * const publicEntity = await prisma.publicEntity.upsert({
     *   create: {
     *     // ... data to create a PublicEntity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PublicEntity we want to update
     *   }
     * })
     */
    upsert<T extends PublicEntityUpsertArgs>(args: SelectSubset<T, PublicEntityUpsertArgs<ExtArgs>>): Prisma__PublicEntityClient<$Result.GetResult<Prisma.$PublicEntityPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PublicEntities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicEntityCountArgs} args - Arguments to filter PublicEntities to count.
     * @example
     * // Count the number of PublicEntities
     * const count = await prisma.publicEntity.count({
     *   where: {
     *     // ... the filter for the PublicEntities we want to count
     *   }
     * })
    **/
    count<T extends PublicEntityCountArgs>(
      args?: Subset<T, PublicEntityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PublicEntityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PublicEntity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicEntityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PublicEntityAggregateArgs>(args: Subset<T, PublicEntityAggregateArgs>): Prisma.PrismaPromise<GetPublicEntityAggregateType<T>>

    /**
     * Group by PublicEntity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicEntityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PublicEntityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PublicEntityGroupByArgs['orderBy'] }
        : { orderBy?: PublicEntityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PublicEntityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPublicEntityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PublicEntity model
   */
  readonly fields: PublicEntityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PublicEntity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PublicEntityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    biddings<T extends PublicEntity$biddingsArgs<ExtArgs> = {}>(args?: Subset<T, PublicEntity$biddingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BiddingPayload<ExtArgs>, T, "findMany"> | Null>
    contracts<T extends PublicEntity$contractsArgs<ExtArgs> = {}>(args?: Subset<T, PublicEntity$contractsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findMany"> | Null>
    documents<T extends PublicEntity$documentsArgs<ExtArgs> = {}>(args?: Subset<T, PublicEntity$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PublicEntity model
   */ 
  interface PublicEntityFieldRefs {
    readonly id: FieldRef<"PublicEntity", 'String'>
    readonly userId: FieldRef<"PublicEntity", 'String'>
    readonly name: FieldRef<"PublicEntity", 'String'>
    readonly cnpj: FieldRef<"PublicEntity", 'String'>
    readonly entityType: FieldRef<"PublicEntity", 'String'>
    readonly address: FieldRef<"PublicEntity", 'String'>
    readonly city: FieldRef<"PublicEntity", 'String'>
    readonly state: FieldRef<"PublicEntity", 'String'>
    readonly zipCode: FieldRef<"PublicEntity", 'String'>
    readonly phone: FieldRef<"PublicEntity", 'String'>
    readonly website: FieldRef<"PublicEntity", 'String'>
    readonly isActive: FieldRef<"PublicEntity", 'Boolean'>
    readonly verifiedAt: FieldRef<"PublicEntity", 'DateTime'>
    readonly createdAt: FieldRef<"PublicEntity", 'DateTime'>
    readonly updatedAt: FieldRef<"PublicEntity", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PublicEntity findUnique
   */
  export type PublicEntityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublicEntity
     */
    select?: PublicEntitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicEntityInclude<ExtArgs> | null
    /**
     * Filter, which PublicEntity to fetch.
     */
    where: PublicEntityWhereUniqueInput
  }

  /**
   * PublicEntity findUniqueOrThrow
   */
  export type PublicEntityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublicEntity
     */
    select?: PublicEntitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicEntityInclude<ExtArgs> | null
    /**
     * Filter, which PublicEntity to fetch.
     */
    where: PublicEntityWhereUniqueInput
  }

  /**
   * PublicEntity findFirst
   */
  export type PublicEntityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublicEntity
     */
    select?: PublicEntitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicEntityInclude<ExtArgs> | null
    /**
     * Filter, which PublicEntity to fetch.
     */
    where?: PublicEntityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PublicEntities to fetch.
     */
    orderBy?: PublicEntityOrderByWithRelationInput | PublicEntityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PublicEntities.
     */
    cursor?: PublicEntityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PublicEntities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PublicEntities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PublicEntities.
     */
    distinct?: PublicEntityScalarFieldEnum | PublicEntityScalarFieldEnum[]
  }

  /**
   * PublicEntity findFirstOrThrow
   */
  export type PublicEntityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublicEntity
     */
    select?: PublicEntitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicEntityInclude<ExtArgs> | null
    /**
     * Filter, which PublicEntity to fetch.
     */
    where?: PublicEntityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PublicEntities to fetch.
     */
    orderBy?: PublicEntityOrderByWithRelationInput | PublicEntityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PublicEntities.
     */
    cursor?: PublicEntityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PublicEntities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PublicEntities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PublicEntities.
     */
    distinct?: PublicEntityScalarFieldEnum | PublicEntityScalarFieldEnum[]
  }

  /**
   * PublicEntity findMany
   */
  export type PublicEntityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublicEntity
     */
    select?: PublicEntitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicEntityInclude<ExtArgs> | null
    /**
     * Filter, which PublicEntities to fetch.
     */
    where?: PublicEntityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PublicEntities to fetch.
     */
    orderBy?: PublicEntityOrderByWithRelationInput | PublicEntityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PublicEntities.
     */
    cursor?: PublicEntityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PublicEntities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PublicEntities.
     */
    skip?: number
    distinct?: PublicEntityScalarFieldEnum | PublicEntityScalarFieldEnum[]
  }

  /**
   * PublicEntity create
   */
  export type PublicEntityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublicEntity
     */
    select?: PublicEntitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicEntityInclude<ExtArgs> | null
    /**
     * The data needed to create a PublicEntity.
     */
    data: XOR<PublicEntityCreateInput, PublicEntityUncheckedCreateInput>
  }

  /**
   * PublicEntity createMany
   */
  export type PublicEntityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PublicEntities.
     */
    data: PublicEntityCreateManyInput | PublicEntityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PublicEntity createManyAndReturn
   */
  export type PublicEntityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublicEntity
     */
    select?: PublicEntitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PublicEntities.
     */
    data: PublicEntityCreateManyInput | PublicEntityCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicEntityIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PublicEntity update
   */
  export type PublicEntityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublicEntity
     */
    select?: PublicEntitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicEntityInclude<ExtArgs> | null
    /**
     * The data needed to update a PublicEntity.
     */
    data: XOR<PublicEntityUpdateInput, PublicEntityUncheckedUpdateInput>
    /**
     * Choose, which PublicEntity to update.
     */
    where: PublicEntityWhereUniqueInput
  }

  /**
   * PublicEntity updateMany
   */
  export type PublicEntityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PublicEntities.
     */
    data: XOR<PublicEntityUpdateManyMutationInput, PublicEntityUncheckedUpdateManyInput>
    /**
     * Filter which PublicEntities to update
     */
    where?: PublicEntityWhereInput
  }

  /**
   * PublicEntity upsert
   */
  export type PublicEntityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublicEntity
     */
    select?: PublicEntitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicEntityInclude<ExtArgs> | null
    /**
     * The filter to search for the PublicEntity to update in case it exists.
     */
    where: PublicEntityWhereUniqueInput
    /**
     * In case the PublicEntity found by the `where` argument doesn't exist, create a new PublicEntity with this data.
     */
    create: XOR<PublicEntityCreateInput, PublicEntityUncheckedCreateInput>
    /**
     * In case the PublicEntity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PublicEntityUpdateInput, PublicEntityUncheckedUpdateInput>
  }

  /**
   * PublicEntity delete
   */
  export type PublicEntityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublicEntity
     */
    select?: PublicEntitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicEntityInclude<ExtArgs> | null
    /**
     * Filter which PublicEntity to delete.
     */
    where: PublicEntityWhereUniqueInput
  }

  /**
   * PublicEntity deleteMany
   */
  export type PublicEntityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PublicEntities to delete
     */
    where?: PublicEntityWhereInput
  }

  /**
   * PublicEntity.biddings
   */
  export type PublicEntity$biddingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bidding
     */
    select?: BiddingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiddingInclude<ExtArgs> | null
    where?: BiddingWhereInput
    orderBy?: BiddingOrderByWithRelationInput | BiddingOrderByWithRelationInput[]
    cursor?: BiddingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BiddingScalarFieldEnum | BiddingScalarFieldEnum[]
  }

  /**
   * PublicEntity.contracts
   */
  export type PublicEntity$contractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    where?: ContractWhereInput
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    cursor?: ContractWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContractScalarFieldEnum | ContractScalarFieldEnum[]
  }

  /**
   * PublicEntity.documents
   */
  export type PublicEntity$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * PublicEntity without action
   */
  export type PublicEntityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublicEntity
     */
    select?: PublicEntitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicEntityInclude<ExtArgs> | null
  }


  /**
   * Model Citizen
   */

  export type AggregateCitizen = {
    _count: CitizenCountAggregateOutputType | null
    _min: CitizenMinAggregateOutputType | null
    _max: CitizenMaxAggregateOutputType | null
  }

  export type CitizenMinAggregateOutputType = {
    id: string | null
    userId: string | null
    cpf: string | null
    dateOfBirth: Date | null
    profession: string | null
    address: string | null
    city: string | null
    state: string | null
    zipCode: string | null
    isActive: boolean | null
    verifiedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CitizenMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    cpf: string | null
    dateOfBirth: Date | null
    profession: string | null
    address: string | null
    city: string | null
    state: string | null
    zipCode: string | null
    isActive: boolean | null
    verifiedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CitizenCountAggregateOutputType = {
    id: number
    userId: number
    cpf: number
    dateOfBirth: number
    profession: number
    address: number
    city: number
    state: number
    zipCode: number
    interests: number
    isActive: number
    verifiedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CitizenMinAggregateInputType = {
    id?: true
    userId?: true
    cpf?: true
    dateOfBirth?: true
    profession?: true
    address?: true
    city?: true
    state?: true
    zipCode?: true
    isActive?: true
    verifiedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CitizenMaxAggregateInputType = {
    id?: true
    userId?: true
    cpf?: true
    dateOfBirth?: true
    profession?: true
    address?: true
    city?: true
    state?: true
    zipCode?: true
    isActive?: true
    verifiedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CitizenCountAggregateInputType = {
    id?: true
    userId?: true
    cpf?: true
    dateOfBirth?: true
    profession?: true
    address?: true
    city?: true
    state?: true
    zipCode?: true
    interests?: true
    isActive?: true
    verifiedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CitizenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Citizen to aggregate.
     */
    where?: CitizenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Citizens to fetch.
     */
    orderBy?: CitizenOrderByWithRelationInput | CitizenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CitizenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Citizens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Citizens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Citizens
    **/
    _count?: true | CitizenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CitizenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CitizenMaxAggregateInputType
  }

  export type GetCitizenAggregateType<T extends CitizenAggregateArgs> = {
        [P in keyof T & keyof AggregateCitizen]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCitizen[P]>
      : GetScalarType<T[P], AggregateCitizen[P]>
  }




  export type CitizenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CitizenWhereInput
    orderBy?: CitizenOrderByWithAggregationInput | CitizenOrderByWithAggregationInput[]
    by: CitizenScalarFieldEnum[] | CitizenScalarFieldEnum
    having?: CitizenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CitizenCountAggregateInputType | true
    _min?: CitizenMinAggregateInputType
    _max?: CitizenMaxAggregateInputType
  }

  export type CitizenGroupByOutputType = {
    id: string
    userId: string
    cpf: string | null
    dateOfBirth: Date | null
    profession: string | null
    address: string | null
    city: string | null
    state: string | null
    zipCode: string | null
    interests: string[]
    isActive: boolean
    verifiedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: CitizenCountAggregateOutputType | null
    _min: CitizenMinAggregateOutputType | null
    _max: CitizenMaxAggregateOutputType | null
  }

  type GetCitizenGroupByPayload<T extends CitizenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CitizenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CitizenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CitizenGroupByOutputType[P]>
            : GetScalarType<T[P], CitizenGroupByOutputType[P]>
        }
      >
    >


  export type CitizenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    cpf?: boolean
    dateOfBirth?: boolean
    profession?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    zipCode?: boolean
    interests?: boolean
    isActive?: boolean
    verifiedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["citizen"]>

  export type CitizenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    cpf?: boolean
    dateOfBirth?: boolean
    profession?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    zipCode?: boolean
    interests?: boolean
    isActive?: boolean
    verifiedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["citizen"]>

  export type CitizenSelectScalar = {
    id?: boolean
    userId?: boolean
    cpf?: boolean
    dateOfBirth?: boolean
    profession?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    zipCode?: boolean
    interests?: boolean
    isActive?: boolean
    verifiedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CitizenInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CitizenIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CitizenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Citizen"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      cpf: string | null
      dateOfBirth: Date | null
      profession: string | null
      address: string | null
      city: string | null
      state: string | null
      zipCode: string | null
      interests: string[]
      isActive: boolean
      verifiedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["citizen"]>
    composites: {}
  }

  type CitizenGetPayload<S extends boolean | null | undefined | CitizenDefaultArgs> = $Result.GetResult<Prisma.$CitizenPayload, S>

  type CitizenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CitizenFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CitizenCountAggregateInputType | true
    }

  export interface CitizenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Citizen'], meta: { name: 'Citizen' } }
    /**
     * Find zero or one Citizen that matches the filter.
     * @param {CitizenFindUniqueArgs} args - Arguments to find a Citizen
     * @example
     * // Get one Citizen
     * const citizen = await prisma.citizen.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CitizenFindUniqueArgs>(args: SelectSubset<T, CitizenFindUniqueArgs<ExtArgs>>): Prisma__CitizenClient<$Result.GetResult<Prisma.$CitizenPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Citizen that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CitizenFindUniqueOrThrowArgs} args - Arguments to find a Citizen
     * @example
     * // Get one Citizen
     * const citizen = await prisma.citizen.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CitizenFindUniqueOrThrowArgs>(args: SelectSubset<T, CitizenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CitizenClient<$Result.GetResult<Prisma.$CitizenPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Citizen that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CitizenFindFirstArgs} args - Arguments to find a Citizen
     * @example
     * // Get one Citizen
     * const citizen = await prisma.citizen.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CitizenFindFirstArgs>(args?: SelectSubset<T, CitizenFindFirstArgs<ExtArgs>>): Prisma__CitizenClient<$Result.GetResult<Prisma.$CitizenPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Citizen that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CitizenFindFirstOrThrowArgs} args - Arguments to find a Citizen
     * @example
     * // Get one Citizen
     * const citizen = await prisma.citizen.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CitizenFindFirstOrThrowArgs>(args?: SelectSubset<T, CitizenFindFirstOrThrowArgs<ExtArgs>>): Prisma__CitizenClient<$Result.GetResult<Prisma.$CitizenPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Citizens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CitizenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Citizens
     * const citizens = await prisma.citizen.findMany()
     * 
     * // Get first 10 Citizens
     * const citizens = await prisma.citizen.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const citizenWithIdOnly = await prisma.citizen.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CitizenFindManyArgs>(args?: SelectSubset<T, CitizenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CitizenPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Citizen.
     * @param {CitizenCreateArgs} args - Arguments to create a Citizen.
     * @example
     * // Create one Citizen
     * const Citizen = await prisma.citizen.create({
     *   data: {
     *     // ... data to create a Citizen
     *   }
     * })
     * 
     */
    create<T extends CitizenCreateArgs>(args: SelectSubset<T, CitizenCreateArgs<ExtArgs>>): Prisma__CitizenClient<$Result.GetResult<Prisma.$CitizenPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Citizens.
     * @param {CitizenCreateManyArgs} args - Arguments to create many Citizens.
     * @example
     * // Create many Citizens
     * const citizen = await prisma.citizen.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CitizenCreateManyArgs>(args?: SelectSubset<T, CitizenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Citizens and returns the data saved in the database.
     * @param {CitizenCreateManyAndReturnArgs} args - Arguments to create many Citizens.
     * @example
     * // Create many Citizens
     * const citizen = await prisma.citizen.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Citizens and only return the `id`
     * const citizenWithIdOnly = await prisma.citizen.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CitizenCreateManyAndReturnArgs>(args?: SelectSubset<T, CitizenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CitizenPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Citizen.
     * @param {CitizenDeleteArgs} args - Arguments to delete one Citizen.
     * @example
     * // Delete one Citizen
     * const Citizen = await prisma.citizen.delete({
     *   where: {
     *     // ... filter to delete one Citizen
     *   }
     * })
     * 
     */
    delete<T extends CitizenDeleteArgs>(args: SelectSubset<T, CitizenDeleteArgs<ExtArgs>>): Prisma__CitizenClient<$Result.GetResult<Prisma.$CitizenPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Citizen.
     * @param {CitizenUpdateArgs} args - Arguments to update one Citizen.
     * @example
     * // Update one Citizen
     * const citizen = await prisma.citizen.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CitizenUpdateArgs>(args: SelectSubset<T, CitizenUpdateArgs<ExtArgs>>): Prisma__CitizenClient<$Result.GetResult<Prisma.$CitizenPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Citizens.
     * @param {CitizenDeleteManyArgs} args - Arguments to filter Citizens to delete.
     * @example
     * // Delete a few Citizens
     * const { count } = await prisma.citizen.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CitizenDeleteManyArgs>(args?: SelectSubset<T, CitizenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Citizens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CitizenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Citizens
     * const citizen = await prisma.citizen.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CitizenUpdateManyArgs>(args: SelectSubset<T, CitizenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Citizen.
     * @param {CitizenUpsertArgs} args - Arguments to update or create a Citizen.
     * @example
     * // Update or create a Citizen
     * const citizen = await prisma.citizen.upsert({
     *   create: {
     *     // ... data to create a Citizen
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Citizen we want to update
     *   }
     * })
     */
    upsert<T extends CitizenUpsertArgs>(args: SelectSubset<T, CitizenUpsertArgs<ExtArgs>>): Prisma__CitizenClient<$Result.GetResult<Prisma.$CitizenPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Citizens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CitizenCountArgs} args - Arguments to filter Citizens to count.
     * @example
     * // Count the number of Citizens
     * const count = await prisma.citizen.count({
     *   where: {
     *     // ... the filter for the Citizens we want to count
     *   }
     * })
    **/
    count<T extends CitizenCountArgs>(
      args?: Subset<T, CitizenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CitizenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Citizen.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CitizenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CitizenAggregateArgs>(args: Subset<T, CitizenAggregateArgs>): Prisma.PrismaPromise<GetCitizenAggregateType<T>>

    /**
     * Group by Citizen.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CitizenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CitizenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CitizenGroupByArgs['orderBy'] }
        : { orderBy?: CitizenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CitizenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCitizenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Citizen model
   */
  readonly fields: CitizenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Citizen.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CitizenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Citizen model
   */ 
  interface CitizenFieldRefs {
    readonly id: FieldRef<"Citizen", 'String'>
    readonly userId: FieldRef<"Citizen", 'String'>
    readonly cpf: FieldRef<"Citizen", 'String'>
    readonly dateOfBirth: FieldRef<"Citizen", 'DateTime'>
    readonly profession: FieldRef<"Citizen", 'String'>
    readonly address: FieldRef<"Citizen", 'String'>
    readonly city: FieldRef<"Citizen", 'String'>
    readonly state: FieldRef<"Citizen", 'String'>
    readonly zipCode: FieldRef<"Citizen", 'String'>
    readonly interests: FieldRef<"Citizen", 'String[]'>
    readonly isActive: FieldRef<"Citizen", 'Boolean'>
    readonly verifiedAt: FieldRef<"Citizen", 'DateTime'>
    readonly createdAt: FieldRef<"Citizen", 'DateTime'>
    readonly updatedAt: FieldRef<"Citizen", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Citizen findUnique
   */
  export type CitizenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Citizen
     */
    select?: CitizenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitizenInclude<ExtArgs> | null
    /**
     * Filter, which Citizen to fetch.
     */
    where: CitizenWhereUniqueInput
  }

  /**
   * Citizen findUniqueOrThrow
   */
  export type CitizenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Citizen
     */
    select?: CitizenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitizenInclude<ExtArgs> | null
    /**
     * Filter, which Citizen to fetch.
     */
    where: CitizenWhereUniqueInput
  }

  /**
   * Citizen findFirst
   */
  export type CitizenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Citizen
     */
    select?: CitizenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitizenInclude<ExtArgs> | null
    /**
     * Filter, which Citizen to fetch.
     */
    where?: CitizenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Citizens to fetch.
     */
    orderBy?: CitizenOrderByWithRelationInput | CitizenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Citizens.
     */
    cursor?: CitizenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Citizens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Citizens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Citizens.
     */
    distinct?: CitizenScalarFieldEnum | CitizenScalarFieldEnum[]
  }

  /**
   * Citizen findFirstOrThrow
   */
  export type CitizenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Citizen
     */
    select?: CitizenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitizenInclude<ExtArgs> | null
    /**
     * Filter, which Citizen to fetch.
     */
    where?: CitizenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Citizens to fetch.
     */
    orderBy?: CitizenOrderByWithRelationInput | CitizenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Citizens.
     */
    cursor?: CitizenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Citizens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Citizens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Citizens.
     */
    distinct?: CitizenScalarFieldEnum | CitizenScalarFieldEnum[]
  }

  /**
   * Citizen findMany
   */
  export type CitizenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Citizen
     */
    select?: CitizenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitizenInclude<ExtArgs> | null
    /**
     * Filter, which Citizens to fetch.
     */
    where?: CitizenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Citizens to fetch.
     */
    orderBy?: CitizenOrderByWithRelationInput | CitizenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Citizens.
     */
    cursor?: CitizenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Citizens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Citizens.
     */
    skip?: number
    distinct?: CitizenScalarFieldEnum | CitizenScalarFieldEnum[]
  }

  /**
   * Citizen create
   */
  export type CitizenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Citizen
     */
    select?: CitizenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitizenInclude<ExtArgs> | null
    /**
     * The data needed to create a Citizen.
     */
    data: XOR<CitizenCreateInput, CitizenUncheckedCreateInput>
  }

  /**
   * Citizen createMany
   */
  export type CitizenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Citizens.
     */
    data: CitizenCreateManyInput | CitizenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Citizen createManyAndReturn
   */
  export type CitizenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Citizen
     */
    select?: CitizenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Citizens.
     */
    data: CitizenCreateManyInput | CitizenCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitizenIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Citizen update
   */
  export type CitizenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Citizen
     */
    select?: CitizenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitizenInclude<ExtArgs> | null
    /**
     * The data needed to update a Citizen.
     */
    data: XOR<CitizenUpdateInput, CitizenUncheckedUpdateInput>
    /**
     * Choose, which Citizen to update.
     */
    where: CitizenWhereUniqueInput
  }

  /**
   * Citizen updateMany
   */
  export type CitizenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Citizens.
     */
    data: XOR<CitizenUpdateManyMutationInput, CitizenUncheckedUpdateManyInput>
    /**
     * Filter which Citizens to update
     */
    where?: CitizenWhereInput
  }

  /**
   * Citizen upsert
   */
  export type CitizenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Citizen
     */
    select?: CitizenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitizenInclude<ExtArgs> | null
    /**
     * The filter to search for the Citizen to update in case it exists.
     */
    where: CitizenWhereUniqueInput
    /**
     * In case the Citizen found by the `where` argument doesn't exist, create a new Citizen with this data.
     */
    create: XOR<CitizenCreateInput, CitizenUncheckedCreateInput>
    /**
     * In case the Citizen was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CitizenUpdateInput, CitizenUncheckedUpdateInput>
  }

  /**
   * Citizen delete
   */
  export type CitizenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Citizen
     */
    select?: CitizenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitizenInclude<ExtArgs> | null
    /**
     * Filter which Citizen to delete.
     */
    where: CitizenWhereUniqueInput
  }

  /**
   * Citizen deleteMany
   */
  export type CitizenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Citizens to delete
     */
    where?: CitizenWhereInput
  }

  /**
   * Citizen without action
   */
  export type CitizenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Citizen
     */
    select?: CitizenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitizenInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    code: string | null
    parentId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    code: string | null
    parentId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    description: number
    code: number
    parentId: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    code?: true
    parentId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    code?: true
    parentId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    code?: true
    parentId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: string
    name: string
    description: string | null
    code: string
    parentId: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    code?: boolean
    parentId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parent?: boolean | Category$parentArgs<ExtArgs>
    children?: boolean | Category$childrenArgs<ExtArgs>
    biddings?: boolean | Category$biddingsArgs<ExtArgs>
    suppliers?: boolean | Category$suppliersArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    code?: boolean
    parentId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parent?: boolean | Category$parentArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    code?: boolean
    parentId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Category$parentArgs<ExtArgs>
    children?: boolean | Category$childrenArgs<ExtArgs>
    biddings?: boolean | Category$biddingsArgs<ExtArgs>
    suppliers?: boolean | Category$suppliersArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Category$parentArgs<ExtArgs>
  }

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      parent: Prisma.$CategoryPayload<ExtArgs> | null
      children: Prisma.$CategoryPayload<ExtArgs>[]
      biddings: Prisma.$BiddingCategoryPayload<ExtArgs>[]
      suppliers: Prisma.$SupplierCategoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      code: string
      parentId: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {CategoryCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    parent<T extends Category$parentArgs<ExtArgs> = {}>(args?: Subset<T, Category$parentArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    children<T extends Category$childrenArgs<ExtArgs> = {}>(args?: Subset<T, Category$childrenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany"> | Null>
    biddings<T extends Category$biddingsArgs<ExtArgs> = {}>(args?: Subset<T, Category$biddingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BiddingCategoryPayload<ExtArgs>, T, "findMany"> | Null>
    suppliers<T extends Category$suppliersArgs<ExtArgs> = {}>(args?: Subset<T, Category$suppliersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupplierCategoryPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */ 
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'String'>
    readonly name: FieldRef<"Category", 'String'>
    readonly description: FieldRef<"Category", 'String'>
    readonly code: FieldRef<"Category", 'String'>
    readonly parentId: FieldRef<"Category", 'String'>
    readonly isActive: FieldRef<"Category", 'Boolean'>
    readonly createdAt: FieldRef<"Category", 'DateTime'>
    readonly updatedAt: FieldRef<"Category", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category createManyAndReturn
   */
  export type CategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
  }

  /**
   * Category.parent
   */
  export type Category$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
  }

  /**
   * Category.children
   */
  export type Category$childrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    cursor?: CategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category.biddings
   */
  export type Category$biddingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BiddingCategory
     */
    select?: BiddingCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiddingCategoryInclude<ExtArgs> | null
    where?: BiddingCategoryWhereInput
    orderBy?: BiddingCategoryOrderByWithRelationInput | BiddingCategoryOrderByWithRelationInput[]
    cursor?: BiddingCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BiddingCategoryScalarFieldEnum | BiddingCategoryScalarFieldEnum[]
  }

  /**
   * Category.suppliers
   */
  export type Category$suppliersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierCategory
     */
    select?: SupplierCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierCategoryInclude<ExtArgs> | null
    where?: SupplierCategoryWhereInput
    orderBy?: SupplierCategoryOrderByWithRelationInput | SupplierCategoryOrderByWithRelationInput[]
    cursor?: SupplierCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SupplierCategoryScalarFieldEnum | SupplierCategoryScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model Bidding
   */

  export type AggregateBidding = {
    _count: BiddingCountAggregateOutputType | null
    _avg: BiddingAvgAggregateOutputType | null
    _sum: BiddingSumAggregateOutputType | null
    _min: BiddingMinAggregateOutputType | null
    _max: BiddingMaxAggregateOutputType | null
  }

  export type BiddingAvgAggregateOutputType = {
    estimatedValue: Decimal | null
  }

  export type BiddingSumAggregateOutputType = {
    estimatedValue: Decimal | null
  }

  export type BiddingMinAggregateOutputType = {
    id: string | null
    publicEntityId: string | null
    title: string | null
    description: string | null
    biddingNumber: string | null
    type: $Enums.BiddingType | null
    status: $Enums.BiddingStatus | null
    estimatedValue: Decimal | null
    openingDate: Date | null
    closingDate: Date | null
    deliveryLocation: string | null
    deliveryDeadline: Date | null
    requirements: string | null
    evaluationCriteria: string | null
    isPublic: boolean | null
    publishedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BiddingMaxAggregateOutputType = {
    id: string | null
    publicEntityId: string | null
    title: string | null
    description: string | null
    biddingNumber: string | null
    type: $Enums.BiddingType | null
    status: $Enums.BiddingStatus | null
    estimatedValue: Decimal | null
    openingDate: Date | null
    closingDate: Date | null
    deliveryLocation: string | null
    deliveryDeadline: Date | null
    requirements: string | null
    evaluationCriteria: string | null
    isPublic: boolean | null
    publishedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BiddingCountAggregateOutputType = {
    id: number
    publicEntityId: number
    title: number
    description: number
    biddingNumber: number
    type: number
    status: number
    estimatedValue: number
    openingDate: number
    closingDate: number
    deliveryLocation: number
    deliveryDeadline: number
    requirements: number
    evaluationCriteria: number
    isPublic: number
    publishedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BiddingAvgAggregateInputType = {
    estimatedValue?: true
  }

  export type BiddingSumAggregateInputType = {
    estimatedValue?: true
  }

  export type BiddingMinAggregateInputType = {
    id?: true
    publicEntityId?: true
    title?: true
    description?: true
    biddingNumber?: true
    type?: true
    status?: true
    estimatedValue?: true
    openingDate?: true
    closingDate?: true
    deliveryLocation?: true
    deliveryDeadline?: true
    requirements?: true
    evaluationCriteria?: true
    isPublic?: true
    publishedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BiddingMaxAggregateInputType = {
    id?: true
    publicEntityId?: true
    title?: true
    description?: true
    biddingNumber?: true
    type?: true
    status?: true
    estimatedValue?: true
    openingDate?: true
    closingDate?: true
    deliveryLocation?: true
    deliveryDeadline?: true
    requirements?: true
    evaluationCriteria?: true
    isPublic?: true
    publishedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BiddingCountAggregateInputType = {
    id?: true
    publicEntityId?: true
    title?: true
    description?: true
    biddingNumber?: true
    type?: true
    status?: true
    estimatedValue?: true
    openingDate?: true
    closingDate?: true
    deliveryLocation?: true
    deliveryDeadline?: true
    requirements?: true
    evaluationCriteria?: true
    isPublic?: true
    publishedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BiddingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bidding to aggregate.
     */
    where?: BiddingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Biddings to fetch.
     */
    orderBy?: BiddingOrderByWithRelationInput | BiddingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BiddingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Biddings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Biddings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Biddings
    **/
    _count?: true | BiddingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BiddingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BiddingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BiddingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BiddingMaxAggregateInputType
  }

  export type GetBiddingAggregateType<T extends BiddingAggregateArgs> = {
        [P in keyof T & keyof AggregateBidding]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBidding[P]>
      : GetScalarType<T[P], AggregateBidding[P]>
  }




  export type BiddingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BiddingWhereInput
    orderBy?: BiddingOrderByWithAggregationInput | BiddingOrderByWithAggregationInput[]
    by: BiddingScalarFieldEnum[] | BiddingScalarFieldEnum
    having?: BiddingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BiddingCountAggregateInputType | true
    _avg?: BiddingAvgAggregateInputType
    _sum?: BiddingSumAggregateInputType
    _min?: BiddingMinAggregateInputType
    _max?: BiddingMaxAggregateInputType
  }

  export type BiddingGroupByOutputType = {
    id: string
    publicEntityId: string
    title: string
    description: string
    biddingNumber: string
    type: $Enums.BiddingType
    status: $Enums.BiddingStatus
    estimatedValue: Decimal
    openingDate: Date
    closingDate: Date
    deliveryLocation: string
    deliveryDeadline: Date
    requirements: string
    evaluationCriteria: string
    isPublic: boolean
    publishedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: BiddingCountAggregateOutputType | null
    _avg: BiddingAvgAggregateOutputType | null
    _sum: BiddingSumAggregateOutputType | null
    _min: BiddingMinAggregateOutputType | null
    _max: BiddingMaxAggregateOutputType | null
  }

  type GetBiddingGroupByPayload<T extends BiddingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BiddingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BiddingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BiddingGroupByOutputType[P]>
            : GetScalarType<T[P], BiddingGroupByOutputType[P]>
        }
      >
    >


  export type BiddingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    publicEntityId?: boolean
    title?: boolean
    description?: boolean
    biddingNumber?: boolean
    type?: boolean
    status?: boolean
    estimatedValue?: boolean
    openingDate?: boolean
    closingDate?: boolean
    deliveryLocation?: boolean
    deliveryDeadline?: boolean
    requirements?: boolean
    evaluationCriteria?: boolean
    isPublic?: boolean
    publishedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    publicEntity?: boolean | PublicEntityDefaultArgs<ExtArgs>
    proposals?: boolean | Bidding$proposalsArgs<ExtArgs>
    documents?: boolean | Bidding$documentsArgs<ExtArgs>
    categories?: boolean | Bidding$categoriesArgs<ExtArgs>
    contract?: boolean | Bidding$contractArgs<ExtArgs>
    _count?: boolean | BiddingCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bidding"]>

  export type BiddingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    publicEntityId?: boolean
    title?: boolean
    description?: boolean
    biddingNumber?: boolean
    type?: boolean
    status?: boolean
    estimatedValue?: boolean
    openingDate?: boolean
    closingDate?: boolean
    deliveryLocation?: boolean
    deliveryDeadline?: boolean
    requirements?: boolean
    evaluationCriteria?: boolean
    isPublic?: boolean
    publishedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    publicEntity?: boolean | PublicEntityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bidding"]>

  export type BiddingSelectScalar = {
    id?: boolean
    publicEntityId?: boolean
    title?: boolean
    description?: boolean
    biddingNumber?: boolean
    type?: boolean
    status?: boolean
    estimatedValue?: boolean
    openingDate?: boolean
    closingDate?: boolean
    deliveryLocation?: boolean
    deliveryDeadline?: boolean
    requirements?: boolean
    evaluationCriteria?: boolean
    isPublic?: boolean
    publishedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BiddingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    publicEntity?: boolean | PublicEntityDefaultArgs<ExtArgs>
    proposals?: boolean | Bidding$proposalsArgs<ExtArgs>
    documents?: boolean | Bidding$documentsArgs<ExtArgs>
    categories?: boolean | Bidding$categoriesArgs<ExtArgs>
    contract?: boolean | Bidding$contractArgs<ExtArgs>
    _count?: boolean | BiddingCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BiddingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    publicEntity?: boolean | PublicEntityDefaultArgs<ExtArgs>
  }

  export type $BiddingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Bidding"
    objects: {
      publicEntity: Prisma.$PublicEntityPayload<ExtArgs>
      proposals: Prisma.$ProposalPayload<ExtArgs>[]
      documents: Prisma.$DocumentPayload<ExtArgs>[]
      categories: Prisma.$BiddingCategoryPayload<ExtArgs>[]
      contract: Prisma.$ContractPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      publicEntityId: string
      title: string
      description: string
      biddingNumber: string
      type: $Enums.BiddingType
      status: $Enums.BiddingStatus
      estimatedValue: Prisma.Decimal
      openingDate: Date
      closingDate: Date
      deliveryLocation: string
      deliveryDeadline: Date
      requirements: string
      evaluationCriteria: string
      isPublic: boolean
      publishedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["bidding"]>
    composites: {}
  }

  type BiddingGetPayload<S extends boolean | null | undefined | BiddingDefaultArgs> = $Result.GetResult<Prisma.$BiddingPayload, S>

  type BiddingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BiddingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BiddingCountAggregateInputType | true
    }

  export interface BiddingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Bidding'], meta: { name: 'Bidding' } }
    /**
     * Find zero or one Bidding that matches the filter.
     * @param {BiddingFindUniqueArgs} args - Arguments to find a Bidding
     * @example
     * // Get one Bidding
     * const bidding = await prisma.bidding.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BiddingFindUniqueArgs>(args: SelectSubset<T, BiddingFindUniqueArgs<ExtArgs>>): Prisma__BiddingClient<$Result.GetResult<Prisma.$BiddingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Bidding that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BiddingFindUniqueOrThrowArgs} args - Arguments to find a Bidding
     * @example
     * // Get one Bidding
     * const bidding = await prisma.bidding.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BiddingFindUniqueOrThrowArgs>(args: SelectSubset<T, BiddingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BiddingClient<$Result.GetResult<Prisma.$BiddingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Bidding that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BiddingFindFirstArgs} args - Arguments to find a Bidding
     * @example
     * // Get one Bidding
     * const bidding = await prisma.bidding.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BiddingFindFirstArgs>(args?: SelectSubset<T, BiddingFindFirstArgs<ExtArgs>>): Prisma__BiddingClient<$Result.GetResult<Prisma.$BiddingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Bidding that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BiddingFindFirstOrThrowArgs} args - Arguments to find a Bidding
     * @example
     * // Get one Bidding
     * const bidding = await prisma.bidding.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BiddingFindFirstOrThrowArgs>(args?: SelectSubset<T, BiddingFindFirstOrThrowArgs<ExtArgs>>): Prisma__BiddingClient<$Result.GetResult<Prisma.$BiddingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Biddings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BiddingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Biddings
     * const biddings = await prisma.bidding.findMany()
     * 
     * // Get first 10 Biddings
     * const biddings = await prisma.bidding.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const biddingWithIdOnly = await prisma.bidding.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BiddingFindManyArgs>(args?: SelectSubset<T, BiddingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BiddingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Bidding.
     * @param {BiddingCreateArgs} args - Arguments to create a Bidding.
     * @example
     * // Create one Bidding
     * const Bidding = await prisma.bidding.create({
     *   data: {
     *     // ... data to create a Bidding
     *   }
     * })
     * 
     */
    create<T extends BiddingCreateArgs>(args: SelectSubset<T, BiddingCreateArgs<ExtArgs>>): Prisma__BiddingClient<$Result.GetResult<Prisma.$BiddingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Biddings.
     * @param {BiddingCreateManyArgs} args - Arguments to create many Biddings.
     * @example
     * // Create many Biddings
     * const bidding = await prisma.bidding.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BiddingCreateManyArgs>(args?: SelectSubset<T, BiddingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Biddings and returns the data saved in the database.
     * @param {BiddingCreateManyAndReturnArgs} args - Arguments to create many Biddings.
     * @example
     * // Create many Biddings
     * const bidding = await prisma.bidding.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Biddings and only return the `id`
     * const biddingWithIdOnly = await prisma.bidding.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BiddingCreateManyAndReturnArgs>(args?: SelectSubset<T, BiddingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BiddingPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Bidding.
     * @param {BiddingDeleteArgs} args - Arguments to delete one Bidding.
     * @example
     * // Delete one Bidding
     * const Bidding = await prisma.bidding.delete({
     *   where: {
     *     // ... filter to delete one Bidding
     *   }
     * })
     * 
     */
    delete<T extends BiddingDeleteArgs>(args: SelectSubset<T, BiddingDeleteArgs<ExtArgs>>): Prisma__BiddingClient<$Result.GetResult<Prisma.$BiddingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Bidding.
     * @param {BiddingUpdateArgs} args - Arguments to update one Bidding.
     * @example
     * // Update one Bidding
     * const bidding = await prisma.bidding.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BiddingUpdateArgs>(args: SelectSubset<T, BiddingUpdateArgs<ExtArgs>>): Prisma__BiddingClient<$Result.GetResult<Prisma.$BiddingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Biddings.
     * @param {BiddingDeleteManyArgs} args - Arguments to filter Biddings to delete.
     * @example
     * // Delete a few Biddings
     * const { count } = await prisma.bidding.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BiddingDeleteManyArgs>(args?: SelectSubset<T, BiddingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Biddings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BiddingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Biddings
     * const bidding = await prisma.bidding.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BiddingUpdateManyArgs>(args: SelectSubset<T, BiddingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Bidding.
     * @param {BiddingUpsertArgs} args - Arguments to update or create a Bidding.
     * @example
     * // Update or create a Bidding
     * const bidding = await prisma.bidding.upsert({
     *   create: {
     *     // ... data to create a Bidding
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Bidding we want to update
     *   }
     * })
     */
    upsert<T extends BiddingUpsertArgs>(args: SelectSubset<T, BiddingUpsertArgs<ExtArgs>>): Prisma__BiddingClient<$Result.GetResult<Prisma.$BiddingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Biddings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BiddingCountArgs} args - Arguments to filter Biddings to count.
     * @example
     * // Count the number of Biddings
     * const count = await prisma.bidding.count({
     *   where: {
     *     // ... the filter for the Biddings we want to count
     *   }
     * })
    **/
    count<T extends BiddingCountArgs>(
      args?: Subset<T, BiddingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BiddingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Bidding.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BiddingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BiddingAggregateArgs>(args: Subset<T, BiddingAggregateArgs>): Prisma.PrismaPromise<GetBiddingAggregateType<T>>

    /**
     * Group by Bidding.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BiddingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BiddingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BiddingGroupByArgs['orderBy'] }
        : { orderBy?: BiddingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BiddingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBiddingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Bidding model
   */
  readonly fields: BiddingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Bidding.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BiddingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    publicEntity<T extends PublicEntityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PublicEntityDefaultArgs<ExtArgs>>): Prisma__PublicEntityClient<$Result.GetResult<Prisma.$PublicEntityPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    proposals<T extends Bidding$proposalsArgs<ExtArgs> = {}>(args?: Subset<T, Bidding$proposalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "findMany"> | Null>
    documents<T extends Bidding$documentsArgs<ExtArgs> = {}>(args?: Subset<T, Bidding$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany"> | Null>
    categories<T extends Bidding$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, Bidding$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BiddingCategoryPayload<ExtArgs>, T, "findMany"> | Null>
    contract<T extends Bidding$contractArgs<ExtArgs> = {}>(args?: Subset<T, Bidding$contractArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Bidding model
   */ 
  interface BiddingFieldRefs {
    readonly id: FieldRef<"Bidding", 'String'>
    readonly publicEntityId: FieldRef<"Bidding", 'String'>
    readonly title: FieldRef<"Bidding", 'String'>
    readonly description: FieldRef<"Bidding", 'String'>
    readonly biddingNumber: FieldRef<"Bidding", 'String'>
    readonly type: FieldRef<"Bidding", 'BiddingType'>
    readonly status: FieldRef<"Bidding", 'BiddingStatus'>
    readonly estimatedValue: FieldRef<"Bidding", 'Decimal'>
    readonly openingDate: FieldRef<"Bidding", 'DateTime'>
    readonly closingDate: FieldRef<"Bidding", 'DateTime'>
    readonly deliveryLocation: FieldRef<"Bidding", 'String'>
    readonly deliveryDeadline: FieldRef<"Bidding", 'DateTime'>
    readonly requirements: FieldRef<"Bidding", 'String'>
    readonly evaluationCriteria: FieldRef<"Bidding", 'String'>
    readonly isPublic: FieldRef<"Bidding", 'Boolean'>
    readonly publishedAt: FieldRef<"Bidding", 'DateTime'>
    readonly createdAt: FieldRef<"Bidding", 'DateTime'>
    readonly updatedAt: FieldRef<"Bidding", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Bidding findUnique
   */
  export type BiddingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bidding
     */
    select?: BiddingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiddingInclude<ExtArgs> | null
    /**
     * Filter, which Bidding to fetch.
     */
    where: BiddingWhereUniqueInput
  }

  /**
   * Bidding findUniqueOrThrow
   */
  export type BiddingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bidding
     */
    select?: BiddingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiddingInclude<ExtArgs> | null
    /**
     * Filter, which Bidding to fetch.
     */
    where: BiddingWhereUniqueInput
  }

  /**
   * Bidding findFirst
   */
  export type BiddingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bidding
     */
    select?: BiddingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiddingInclude<ExtArgs> | null
    /**
     * Filter, which Bidding to fetch.
     */
    where?: BiddingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Biddings to fetch.
     */
    orderBy?: BiddingOrderByWithRelationInput | BiddingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Biddings.
     */
    cursor?: BiddingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Biddings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Biddings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Biddings.
     */
    distinct?: BiddingScalarFieldEnum | BiddingScalarFieldEnum[]
  }

  /**
   * Bidding findFirstOrThrow
   */
  export type BiddingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bidding
     */
    select?: BiddingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiddingInclude<ExtArgs> | null
    /**
     * Filter, which Bidding to fetch.
     */
    where?: BiddingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Biddings to fetch.
     */
    orderBy?: BiddingOrderByWithRelationInput | BiddingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Biddings.
     */
    cursor?: BiddingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Biddings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Biddings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Biddings.
     */
    distinct?: BiddingScalarFieldEnum | BiddingScalarFieldEnum[]
  }

  /**
   * Bidding findMany
   */
  export type BiddingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bidding
     */
    select?: BiddingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiddingInclude<ExtArgs> | null
    /**
     * Filter, which Biddings to fetch.
     */
    where?: BiddingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Biddings to fetch.
     */
    orderBy?: BiddingOrderByWithRelationInput | BiddingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Biddings.
     */
    cursor?: BiddingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Biddings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Biddings.
     */
    skip?: number
    distinct?: BiddingScalarFieldEnum | BiddingScalarFieldEnum[]
  }

  /**
   * Bidding create
   */
  export type BiddingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bidding
     */
    select?: BiddingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiddingInclude<ExtArgs> | null
    /**
     * The data needed to create a Bidding.
     */
    data: XOR<BiddingCreateInput, BiddingUncheckedCreateInput>
  }

  /**
   * Bidding createMany
   */
  export type BiddingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Biddings.
     */
    data: BiddingCreateManyInput | BiddingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Bidding createManyAndReturn
   */
  export type BiddingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bidding
     */
    select?: BiddingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Biddings.
     */
    data: BiddingCreateManyInput | BiddingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiddingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Bidding update
   */
  export type BiddingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bidding
     */
    select?: BiddingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiddingInclude<ExtArgs> | null
    /**
     * The data needed to update a Bidding.
     */
    data: XOR<BiddingUpdateInput, BiddingUncheckedUpdateInput>
    /**
     * Choose, which Bidding to update.
     */
    where: BiddingWhereUniqueInput
  }

  /**
   * Bidding updateMany
   */
  export type BiddingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Biddings.
     */
    data: XOR<BiddingUpdateManyMutationInput, BiddingUncheckedUpdateManyInput>
    /**
     * Filter which Biddings to update
     */
    where?: BiddingWhereInput
  }

  /**
   * Bidding upsert
   */
  export type BiddingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bidding
     */
    select?: BiddingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiddingInclude<ExtArgs> | null
    /**
     * The filter to search for the Bidding to update in case it exists.
     */
    where: BiddingWhereUniqueInput
    /**
     * In case the Bidding found by the `where` argument doesn't exist, create a new Bidding with this data.
     */
    create: XOR<BiddingCreateInput, BiddingUncheckedCreateInput>
    /**
     * In case the Bidding was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BiddingUpdateInput, BiddingUncheckedUpdateInput>
  }

  /**
   * Bidding delete
   */
  export type BiddingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bidding
     */
    select?: BiddingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiddingInclude<ExtArgs> | null
    /**
     * Filter which Bidding to delete.
     */
    where: BiddingWhereUniqueInput
  }

  /**
   * Bidding deleteMany
   */
  export type BiddingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Biddings to delete
     */
    where?: BiddingWhereInput
  }

  /**
   * Bidding.proposals
   */
  export type Bidding$proposalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    where?: ProposalWhereInput
    orderBy?: ProposalOrderByWithRelationInput | ProposalOrderByWithRelationInput[]
    cursor?: ProposalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProposalScalarFieldEnum | ProposalScalarFieldEnum[]
  }

  /**
   * Bidding.documents
   */
  export type Bidding$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Bidding.categories
   */
  export type Bidding$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BiddingCategory
     */
    select?: BiddingCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiddingCategoryInclude<ExtArgs> | null
    where?: BiddingCategoryWhereInput
    orderBy?: BiddingCategoryOrderByWithRelationInput | BiddingCategoryOrderByWithRelationInput[]
    cursor?: BiddingCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BiddingCategoryScalarFieldEnum | BiddingCategoryScalarFieldEnum[]
  }

  /**
   * Bidding.contract
   */
  export type Bidding$contractArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    where?: ContractWhereInput
  }

  /**
   * Bidding without action
   */
  export type BiddingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bidding
     */
    select?: BiddingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiddingInclude<ExtArgs> | null
  }


  /**
   * Model Proposal
   */

  export type AggregateProposal = {
    _count: ProposalCountAggregateOutputType | null
    _avg: ProposalAvgAggregateOutputType | null
    _sum: ProposalSumAggregateOutputType | null
    _min: ProposalMinAggregateOutputType | null
    _max: ProposalMaxAggregateOutputType | null
  }

  export type ProposalAvgAggregateOutputType = {
    totalValue: Decimal | null
  }

  export type ProposalSumAggregateOutputType = {
    totalValue: Decimal | null
  }

  export type ProposalMinAggregateOutputType = {
    id: string | null
    biddingId: string | null
    supplierId: string | null
    totalValue: Decimal | null
    description: string | null
    status: $Enums.ProposalStatus | null
    submittedAt: Date | null
    validUntil: Date | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProposalMaxAggregateOutputType = {
    id: string | null
    biddingId: string | null
    supplierId: string | null
    totalValue: Decimal | null
    description: string | null
    status: $Enums.ProposalStatus | null
    submittedAt: Date | null
    validUntil: Date | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProposalCountAggregateOutputType = {
    id: number
    biddingId: number
    supplierId: number
    totalValue: number
    description: number
    status: number
    submittedAt: number
    validUntil: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProposalAvgAggregateInputType = {
    totalValue?: true
  }

  export type ProposalSumAggregateInputType = {
    totalValue?: true
  }

  export type ProposalMinAggregateInputType = {
    id?: true
    biddingId?: true
    supplierId?: true
    totalValue?: true
    description?: true
    status?: true
    submittedAt?: true
    validUntil?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProposalMaxAggregateInputType = {
    id?: true
    biddingId?: true
    supplierId?: true
    totalValue?: true
    description?: true
    status?: true
    submittedAt?: true
    validUntil?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProposalCountAggregateInputType = {
    id?: true
    biddingId?: true
    supplierId?: true
    totalValue?: true
    description?: true
    status?: true
    submittedAt?: true
    validUntil?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProposalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Proposal to aggregate.
     */
    where?: ProposalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proposals to fetch.
     */
    orderBy?: ProposalOrderByWithRelationInput | ProposalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProposalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proposals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proposals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Proposals
    **/
    _count?: true | ProposalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProposalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProposalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProposalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProposalMaxAggregateInputType
  }

  export type GetProposalAggregateType<T extends ProposalAggregateArgs> = {
        [P in keyof T & keyof AggregateProposal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProposal[P]>
      : GetScalarType<T[P], AggregateProposal[P]>
  }




  export type ProposalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProposalWhereInput
    orderBy?: ProposalOrderByWithAggregationInput | ProposalOrderByWithAggregationInput[]
    by: ProposalScalarFieldEnum[] | ProposalScalarFieldEnum
    having?: ProposalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProposalCountAggregateInputType | true
    _avg?: ProposalAvgAggregateInputType
    _sum?: ProposalSumAggregateInputType
    _min?: ProposalMinAggregateInputType
    _max?: ProposalMaxAggregateInputType
  }

  export type ProposalGroupByOutputType = {
    id: string
    biddingId: string
    supplierId: string
    totalValue: Decimal
    description: string
    status: $Enums.ProposalStatus
    submittedAt: Date | null
    validUntil: Date
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: ProposalCountAggregateOutputType | null
    _avg: ProposalAvgAggregateOutputType | null
    _sum: ProposalSumAggregateOutputType | null
    _min: ProposalMinAggregateOutputType | null
    _max: ProposalMaxAggregateOutputType | null
  }

  type GetProposalGroupByPayload<T extends ProposalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProposalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProposalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProposalGroupByOutputType[P]>
            : GetScalarType<T[P], ProposalGroupByOutputType[P]>
        }
      >
    >


  export type ProposalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    biddingId?: boolean
    supplierId?: boolean
    totalValue?: boolean
    description?: boolean
    status?: boolean
    submittedAt?: boolean
    validUntil?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    bidding?: boolean | BiddingDefaultArgs<ExtArgs>
    supplier?: boolean | SupplierDefaultArgs<ExtArgs>
    items?: boolean | Proposal$itemsArgs<ExtArgs>
    documents?: boolean | Proposal$documentsArgs<ExtArgs>
    contract?: boolean | Proposal$contractArgs<ExtArgs>
    _count?: boolean | ProposalCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["proposal"]>

  export type ProposalSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    biddingId?: boolean
    supplierId?: boolean
    totalValue?: boolean
    description?: boolean
    status?: boolean
    submittedAt?: boolean
    validUntil?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    bidding?: boolean | BiddingDefaultArgs<ExtArgs>
    supplier?: boolean | SupplierDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["proposal"]>

  export type ProposalSelectScalar = {
    id?: boolean
    biddingId?: boolean
    supplierId?: boolean
    totalValue?: boolean
    description?: boolean
    status?: boolean
    submittedAt?: boolean
    validUntil?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProposalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bidding?: boolean | BiddingDefaultArgs<ExtArgs>
    supplier?: boolean | SupplierDefaultArgs<ExtArgs>
    items?: boolean | Proposal$itemsArgs<ExtArgs>
    documents?: boolean | Proposal$documentsArgs<ExtArgs>
    contract?: boolean | Proposal$contractArgs<ExtArgs>
    _count?: boolean | ProposalCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProposalIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bidding?: boolean | BiddingDefaultArgs<ExtArgs>
    supplier?: boolean | SupplierDefaultArgs<ExtArgs>
  }

  export type $ProposalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Proposal"
    objects: {
      bidding: Prisma.$BiddingPayload<ExtArgs>
      supplier: Prisma.$SupplierPayload<ExtArgs>
      items: Prisma.$ProposalItemPayload<ExtArgs>[]
      documents: Prisma.$DocumentPayload<ExtArgs>[]
      contract: Prisma.$ContractPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      biddingId: string
      supplierId: string
      totalValue: Prisma.Decimal
      description: string
      status: $Enums.ProposalStatus
      submittedAt: Date | null
      validUntil: Date
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["proposal"]>
    composites: {}
  }

  type ProposalGetPayload<S extends boolean | null | undefined | ProposalDefaultArgs> = $Result.GetResult<Prisma.$ProposalPayload, S>

  type ProposalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProposalFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProposalCountAggregateInputType | true
    }

  export interface ProposalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Proposal'], meta: { name: 'Proposal' } }
    /**
     * Find zero or one Proposal that matches the filter.
     * @param {ProposalFindUniqueArgs} args - Arguments to find a Proposal
     * @example
     * // Get one Proposal
     * const proposal = await prisma.proposal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProposalFindUniqueArgs>(args: SelectSubset<T, ProposalFindUniqueArgs<ExtArgs>>): Prisma__ProposalClient<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Proposal that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProposalFindUniqueOrThrowArgs} args - Arguments to find a Proposal
     * @example
     * // Get one Proposal
     * const proposal = await prisma.proposal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProposalFindUniqueOrThrowArgs>(args: SelectSubset<T, ProposalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProposalClient<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Proposal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalFindFirstArgs} args - Arguments to find a Proposal
     * @example
     * // Get one Proposal
     * const proposal = await prisma.proposal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProposalFindFirstArgs>(args?: SelectSubset<T, ProposalFindFirstArgs<ExtArgs>>): Prisma__ProposalClient<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Proposal that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalFindFirstOrThrowArgs} args - Arguments to find a Proposal
     * @example
     * // Get one Proposal
     * const proposal = await prisma.proposal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProposalFindFirstOrThrowArgs>(args?: SelectSubset<T, ProposalFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProposalClient<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Proposals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Proposals
     * const proposals = await prisma.proposal.findMany()
     * 
     * // Get first 10 Proposals
     * const proposals = await prisma.proposal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const proposalWithIdOnly = await prisma.proposal.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProposalFindManyArgs>(args?: SelectSubset<T, ProposalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Proposal.
     * @param {ProposalCreateArgs} args - Arguments to create a Proposal.
     * @example
     * // Create one Proposal
     * const Proposal = await prisma.proposal.create({
     *   data: {
     *     // ... data to create a Proposal
     *   }
     * })
     * 
     */
    create<T extends ProposalCreateArgs>(args: SelectSubset<T, ProposalCreateArgs<ExtArgs>>): Prisma__ProposalClient<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Proposals.
     * @param {ProposalCreateManyArgs} args - Arguments to create many Proposals.
     * @example
     * // Create many Proposals
     * const proposal = await prisma.proposal.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProposalCreateManyArgs>(args?: SelectSubset<T, ProposalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Proposals and returns the data saved in the database.
     * @param {ProposalCreateManyAndReturnArgs} args - Arguments to create many Proposals.
     * @example
     * // Create many Proposals
     * const proposal = await prisma.proposal.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Proposals and only return the `id`
     * const proposalWithIdOnly = await prisma.proposal.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProposalCreateManyAndReturnArgs>(args?: SelectSubset<T, ProposalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Proposal.
     * @param {ProposalDeleteArgs} args - Arguments to delete one Proposal.
     * @example
     * // Delete one Proposal
     * const Proposal = await prisma.proposal.delete({
     *   where: {
     *     // ... filter to delete one Proposal
     *   }
     * })
     * 
     */
    delete<T extends ProposalDeleteArgs>(args: SelectSubset<T, ProposalDeleteArgs<ExtArgs>>): Prisma__ProposalClient<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Proposal.
     * @param {ProposalUpdateArgs} args - Arguments to update one Proposal.
     * @example
     * // Update one Proposal
     * const proposal = await prisma.proposal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProposalUpdateArgs>(args: SelectSubset<T, ProposalUpdateArgs<ExtArgs>>): Prisma__ProposalClient<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Proposals.
     * @param {ProposalDeleteManyArgs} args - Arguments to filter Proposals to delete.
     * @example
     * // Delete a few Proposals
     * const { count } = await prisma.proposal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProposalDeleteManyArgs>(args?: SelectSubset<T, ProposalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Proposals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Proposals
     * const proposal = await prisma.proposal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProposalUpdateManyArgs>(args: SelectSubset<T, ProposalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Proposal.
     * @param {ProposalUpsertArgs} args - Arguments to update or create a Proposal.
     * @example
     * // Update or create a Proposal
     * const proposal = await prisma.proposal.upsert({
     *   create: {
     *     // ... data to create a Proposal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Proposal we want to update
     *   }
     * })
     */
    upsert<T extends ProposalUpsertArgs>(args: SelectSubset<T, ProposalUpsertArgs<ExtArgs>>): Prisma__ProposalClient<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Proposals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalCountArgs} args - Arguments to filter Proposals to count.
     * @example
     * // Count the number of Proposals
     * const count = await prisma.proposal.count({
     *   where: {
     *     // ... the filter for the Proposals we want to count
     *   }
     * })
    **/
    count<T extends ProposalCountArgs>(
      args?: Subset<T, ProposalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProposalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Proposal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProposalAggregateArgs>(args: Subset<T, ProposalAggregateArgs>): Prisma.PrismaPromise<GetProposalAggregateType<T>>

    /**
     * Group by Proposal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProposalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProposalGroupByArgs['orderBy'] }
        : { orderBy?: ProposalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProposalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProposalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Proposal model
   */
  readonly fields: ProposalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Proposal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProposalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bidding<T extends BiddingDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BiddingDefaultArgs<ExtArgs>>): Prisma__BiddingClient<$Result.GetResult<Prisma.$BiddingPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    supplier<T extends SupplierDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SupplierDefaultArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    items<T extends Proposal$itemsArgs<ExtArgs> = {}>(args?: Subset<T, Proposal$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProposalItemPayload<ExtArgs>, T, "findMany"> | Null>
    documents<T extends Proposal$documentsArgs<ExtArgs> = {}>(args?: Subset<T, Proposal$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany"> | Null>
    contract<T extends Proposal$contractArgs<ExtArgs> = {}>(args?: Subset<T, Proposal$contractArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Proposal model
   */ 
  interface ProposalFieldRefs {
    readonly id: FieldRef<"Proposal", 'String'>
    readonly biddingId: FieldRef<"Proposal", 'String'>
    readonly supplierId: FieldRef<"Proposal", 'String'>
    readonly totalValue: FieldRef<"Proposal", 'Decimal'>
    readonly description: FieldRef<"Proposal", 'String'>
    readonly status: FieldRef<"Proposal", 'ProposalStatus'>
    readonly submittedAt: FieldRef<"Proposal", 'DateTime'>
    readonly validUntil: FieldRef<"Proposal", 'DateTime'>
    readonly notes: FieldRef<"Proposal", 'String'>
    readonly createdAt: FieldRef<"Proposal", 'DateTime'>
    readonly updatedAt: FieldRef<"Proposal", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Proposal findUnique
   */
  export type ProposalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    /**
     * Filter, which Proposal to fetch.
     */
    where: ProposalWhereUniqueInput
  }

  /**
   * Proposal findUniqueOrThrow
   */
  export type ProposalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    /**
     * Filter, which Proposal to fetch.
     */
    where: ProposalWhereUniqueInput
  }

  /**
   * Proposal findFirst
   */
  export type ProposalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    /**
     * Filter, which Proposal to fetch.
     */
    where?: ProposalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proposals to fetch.
     */
    orderBy?: ProposalOrderByWithRelationInput | ProposalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Proposals.
     */
    cursor?: ProposalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proposals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proposals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Proposals.
     */
    distinct?: ProposalScalarFieldEnum | ProposalScalarFieldEnum[]
  }

  /**
   * Proposal findFirstOrThrow
   */
  export type ProposalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    /**
     * Filter, which Proposal to fetch.
     */
    where?: ProposalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proposals to fetch.
     */
    orderBy?: ProposalOrderByWithRelationInput | ProposalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Proposals.
     */
    cursor?: ProposalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proposals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proposals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Proposals.
     */
    distinct?: ProposalScalarFieldEnum | ProposalScalarFieldEnum[]
  }

  /**
   * Proposal findMany
   */
  export type ProposalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    /**
     * Filter, which Proposals to fetch.
     */
    where?: ProposalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proposals to fetch.
     */
    orderBy?: ProposalOrderByWithRelationInput | ProposalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Proposals.
     */
    cursor?: ProposalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proposals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proposals.
     */
    skip?: number
    distinct?: ProposalScalarFieldEnum | ProposalScalarFieldEnum[]
  }

  /**
   * Proposal create
   */
  export type ProposalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    /**
     * The data needed to create a Proposal.
     */
    data: XOR<ProposalCreateInput, ProposalUncheckedCreateInput>
  }

  /**
   * Proposal createMany
   */
  export type ProposalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Proposals.
     */
    data: ProposalCreateManyInput | ProposalCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Proposal createManyAndReturn
   */
  export type ProposalCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Proposals.
     */
    data: ProposalCreateManyInput | ProposalCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Proposal update
   */
  export type ProposalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    /**
     * The data needed to update a Proposal.
     */
    data: XOR<ProposalUpdateInput, ProposalUncheckedUpdateInput>
    /**
     * Choose, which Proposal to update.
     */
    where: ProposalWhereUniqueInput
  }

  /**
   * Proposal updateMany
   */
  export type ProposalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Proposals.
     */
    data: XOR<ProposalUpdateManyMutationInput, ProposalUncheckedUpdateManyInput>
    /**
     * Filter which Proposals to update
     */
    where?: ProposalWhereInput
  }

  /**
   * Proposal upsert
   */
  export type ProposalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    /**
     * The filter to search for the Proposal to update in case it exists.
     */
    where: ProposalWhereUniqueInput
    /**
     * In case the Proposal found by the `where` argument doesn't exist, create a new Proposal with this data.
     */
    create: XOR<ProposalCreateInput, ProposalUncheckedCreateInput>
    /**
     * In case the Proposal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProposalUpdateInput, ProposalUncheckedUpdateInput>
  }

  /**
   * Proposal delete
   */
  export type ProposalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    /**
     * Filter which Proposal to delete.
     */
    where: ProposalWhereUniqueInput
  }

  /**
   * Proposal deleteMany
   */
  export type ProposalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Proposals to delete
     */
    where?: ProposalWhereInput
  }

  /**
   * Proposal.items
   */
  export type Proposal$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProposalItem
     */
    select?: ProposalItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalItemInclude<ExtArgs> | null
    where?: ProposalItemWhereInput
    orderBy?: ProposalItemOrderByWithRelationInput | ProposalItemOrderByWithRelationInput[]
    cursor?: ProposalItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProposalItemScalarFieldEnum | ProposalItemScalarFieldEnum[]
  }

  /**
   * Proposal.documents
   */
  export type Proposal$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Proposal.contract
   */
  export type Proposal$contractArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    where?: ContractWhereInput
  }

  /**
   * Proposal without action
   */
  export type ProposalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
  }


  /**
   * Model ProposalItem
   */

  export type AggregateProposalItem = {
    _count: ProposalItemCountAggregateOutputType | null
    _avg: ProposalItemAvgAggregateOutputType | null
    _sum: ProposalItemSumAggregateOutputType | null
    _min: ProposalItemMinAggregateOutputType | null
    _max: ProposalItemMaxAggregateOutputType | null
  }

  export type ProposalItemAvgAggregateOutputType = {
    quantity: number | null
    unitPrice: Decimal | null
    totalPrice: Decimal | null
  }

  export type ProposalItemSumAggregateOutputType = {
    quantity: number | null
    unitPrice: Decimal | null
    totalPrice: Decimal | null
  }

  export type ProposalItemMinAggregateOutputType = {
    id: string | null
    proposalId: string | null
    description: string | null
    quantity: number | null
    unitPrice: Decimal | null
    totalPrice: Decimal | null
    brand: string | null
    model: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProposalItemMaxAggregateOutputType = {
    id: string | null
    proposalId: string | null
    description: string | null
    quantity: number | null
    unitPrice: Decimal | null
    totalPrice: Decimal | null
    brand: string | null
    model: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProposalItemCountAggregateOutputType = {
    id: number
    proposalId: number
    description: number
    quantity: number
    unitPrice: number
    totalPrice: number
    brand: number
    model: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProposalItemAvgAggregateInputType = {
    quantity?: true
    unitPrice?: true
    totalPrice?: true
  }

  export type ProposalItemSumAggregateInputType = {
    quantity?: true
    unitPrice?: true
    totalPrice?: true
  }

  export type ProposalItemMinAggregateInputType = {
    id?: true
    proposalId?: true
    description?: true
    quantity?: true
    unitPrice?: true
    totalPrice?: true
    brand?: true
    model?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProposalItemMaxAggregateInputType = {
    id?: true
    proposalId?: true
    description?: true
    quantity?: true
    unitPrice?: true
    totalPrice?: true
    brand?: true
    model?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProposalItemCountAggregateInputType = {
    id?: true
    proposalId?: true
    description?: true
    quantity?: true
    unitPrice?: true
    totalPrice?: true
    brand?: true
    model?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProposalItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProposalItem to aggregate.
     */
    where?: ProposalItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProposalItems to fetch.
     */
    orderBy?: ProposalItemOrderByWithRelationInput | ProposalItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProposalItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProposalItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProposalItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProposalItems
    **/
    _count?: true | ProposalItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProposalItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProposalItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProposalItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProposalItemMaxAggregateInputType
  }

  export type GetProposalItemAggregateType<T extends ProposalItemAggregateArgs> = {
        [P in keyof T & keyof AggregateProposalItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProposalItem[P]>
      : GetScalarType<T[P], AggregateProposalItem[P]>
  }




  export type ProposalItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProposalItemWhereInput
    orderBy?: ProposalItemOrderByWithAggregationInput | ProposalItemOrderByWithAggregationInput[]
    by: ProposalItemScalarFieldEnum[] | ProposalItemScalarFieldEnum
    having?: ProposalItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProposalItemCountAggregateInputType | true
    _avg?: ProposalItemAvgAggregateInputType
    _sum?: ProposalItemSumAggregateInputType
    _min?: ProposalItemMinAggregateInputType
    _max?: ProposalItemMaxAggregateInputType
  }

  export type ProposalItemGroupByOutputType = {
    id: string
    proposalId: string
    description: string
    quantity: number
    unitPrice: Decimal
    totalPrice: Decimal
    brand: string | null
    model: string | null
    createdAt: Date
    updatedAt: Date
    _count: ProposalItemCountAggregateOutputType | null
    _avg: ProposalItemAvgAggregateOutputType | null
    _sum: ProposalItemSumAggregateOutputType | null
    _min: ProposalItemMinAggregateOutputType | null
    _max: ProposalItemMaxAggregateOutputType | null
  }

  type GetProposalItemGroupByPayload<T extends ProposalItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProposalItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProposalItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProposalItemGroupByOutputType[P]>
            : GetScalarType<T[P], ProposalItemGroupByOutputType[P]>
        }
      >
    >


  export type ProposalItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    proposalId?: boolean
    description?: boolean
    quantity?: boolean
    unitPrice?: boolean
    totalPrice?: boolean
    brand?: boolean
    model?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    proposal?: boolean | ProposalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["proposalItem"]>

  export type ProposalItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    proposalId?: boolean
    description?: boolean
    quantity?: boolean
    unitPrice?: boolean
    totalPrice?: boolean
    brand?: boolean
    model?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    proposal?: boolean | ProposalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["proposalItem"]>

  export type ProposalItemSelectScalar = {
    id?: boolean
    proposalId?: boolean
    description?: boolean
    quantity?: boolean
    unitPrice?: boolean
    totalPrice?: boolean
    brand?: boolean
    model?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProposalItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    proposal?: boolean | ProposalDefaultArgs<ExtArgs>
  }
  export type ProposalItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    proposal?: boolean | ProposalDefaultArgs<ExtArgs>
  }

  export type $ProposalItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProposalItem"
    objects: {
      proposal: Prisma.$ProposalPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      proposalId: string
      description: string
      quantity: number
      unitPrice: Prisma.Decimal
      totalPrice: Prisma.Decimal
      brand: string | null
      model: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["proposalItem"]>
    composites: {}
  }

  type ProposalItemGetPayload<S extends boolean | null | undefined | ProposalItemDefaultArgs> = $Result.GetResult<Prisma.$ProposalItemPayload, S>

  type ProposalItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProposalItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProposalItemCountAggregateInputType | true
    }

  export interface ProposalItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProposalItem'], meta: { name: 'ProposalItem' } }
    /**
     * Find zero or one ProposalItem that matches the filter.
     * @param {ProposalItemFindUniqueArgs} args - Arguments to find a ProposalItem
     * @example
     * // Get one ProposalItem
     * const proposalItem = await prisma.proposalItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProposalItemFindUniqueArgs>(args: SelectSubset<T, ProposalItemFindUniqueArgs<ExtArgs>>): Prisma__ProposalItemClient<$Result.GetResult<Prisma.$ProposalItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ProposalItem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProposalItemFindUniqueOrThrowArgs} args - Arguments to find a ProposalItem
     * @example
     * // Get one ProposalItem
     * const proposalItem = await prisma.proposalItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProposalItemFindUniqueOrThrowArgs>(args: SelectSubset<T, ProposalItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProposalItemClient<$Result.GetResult<Prisma.$ProposalItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ProposalItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalItemFindFirstArgs} args - Arguments to find a ProposalItem
     * @example
     * // Get one ProposalItem
     * const proposalItem = await prisma.proposalItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProposalItemFindFirstArgs>(args?: SelectSubset<T, ProposalItemFindFirstArgs<ExtArgs>>): Prisma__ProposalItemClient<$Result.GetResult<Prisma.$ProposalItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ProposalItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalItemFindFirstOrThrowArgs} args - Arguments to find a ProposalItem
     * @example
     * // Get one ProposalItem
     * const proposalItem = await prisma.proposalItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProposalItemFindFirstOrThrowArgs>(args?: SelectSubset<T, ProposalItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProposalItemClient<$Result.GetResult<Prisma.$ProposalItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ProposalItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProposalItems
     * const proposalItems = await prisma.proposalItem.findMany()
     * 
     * // Get first 10 ProposalItems
     * const proposalItems = await prisma.proposalItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const proposalItemWithIdOnly = await prisma.proposalItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProposalItemFindManyArgs>(args?: SelectSubset<T, ProposalItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProposalItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ProposalItem.
     * @param {ProposalItemCreateArgs} args - Arguments to create a ProposalItem.
     * @example
     * // Create one ProposalItem
     * const ProposalItem = await prisma.proposalItem.create({
     *   data: {
     *     // ... data to create a ProposalItem
     *   }
     * })
     * 
     */
    create<T extends ProposalItemCreateArgs>(args: SelectSubset<T, ProposalItemCreateArgs<ExtArgs>>): Prisma__ProposalItemClient<$Result.GetResult<Prisma.$ProposalItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ProposalItems.
     * @param {ProposalItemCreateManyArgs} args - Arguments to create many ProposalItems.
     * @example
     * // Create many ProposalItems
     * const proposalItem = await prisma.proposalItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProposalItemCreateManyArgs>(args?: SelectSubset<T, ProposalItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProposalItems and returns the data saved in the database.
     * @param {ProposalItemCreateManyAndReturnArgs} args - Arguments to create many ProposalItems.
     * @example
     * // Create many ProposalItems
     * const proposalItem = await prisma.proposalItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProposalItems and only return the `id`
     * const proposalItemWithIdOnly = await prisma.proposalItem.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProposalItemCreateManyAndReturnArgs>(args?: SelectSubset<T, ProposalItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProposalItemPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ProposalItem.
     * @param {ProposalItemDeleteArgs} args - Arguments to delete one ProposalItem.
     * @example
     * // Delete one ProposalItem
     * const ProposalItem = await prisma.proposalItem.delete({
     *   where: {
     *     // ... filter to delete one ProposalItem
     *   }
     * })
     * 
     */
    delete<T extends ProposalItemDeleteArgs>(args: SelectSubset<T, ProposalItemDeleteArgs<ExtArgs>>): Prisma__ProposalItemClient<$Result.GetResult<Prisma.$ProposalItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ProposalItem.
     * @param {ProposalItemUpdateArgs} args - Arguments to update one ProposalItem.
     * @example
     * // Update one ProposalItem
     * const proposalItem = await prisma.proposalItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProposalItemUpdateArgs>(args: SelectSubset<T, ProposalItemUpdateArgs<ExtArgs>>): Prisma__ProposalItemClient<$Result.GetResult<Prisma.$ProposalItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ProposalItems.
     * @param {ProposalItemDeleteManyArgs} args - Arguments to filter ProposalItems to delete.
     * @example
     * // Delete a few ProposalItems
     * const { count } = await prisma.proposalItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProposalItemDeleteManyArgs>(args?: SelectSubset<T, ProposalItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProposalItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProposalItems
     * const proposalItem = await prisma.proposalItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProposalItemUpdateManyArgs>(args: SelectSubset<T, ProposalItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProposalItem.
     * @param {ProposalItemUpsertArgs} args - Arguments to update or create a ProposalItem.
     * @example
     * // Update or create a ProposalItem
     * const proposalItem = await prisma.proposalItem.upsert({
     *   create: {
     *     // ... data to create a ProposalItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProposalItem we want to update
     *   }
     * })
     */
    upsert<T extends ProposalItemUpsertArgs>(args: SelectSubset<T, ProposalItemUpsertArgs<ExtArgs>>): Prisma__ProposalItemClient<$Result.GetResult<Prisma.$ProposalItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ProposalItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalItemCountArgs} args - Arguments to filter ProposalItems to count.
     * @example
     * // Count the number of ProposalItems
     * const count = await prisma.proposalItem.count({
     *   where: {
     *     // ... the filter for the ProposalItems we want to count
     *   }
     * })
    **/
    count<T extends ProposalItemCountArgs>(
      args?: Subset<T, ProposalItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProposalItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProposalItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProposalItemAggregateArgs>(args: Subset<T, ProposalItemAggregateArgs>): Prisma.PrismaPromise<GetProposalItemAggregateType<T>>

    /**
     * Group by ProposalItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProposalItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProposalItemGroupByArgs['orderBy'] }
        : { orderBy?: ProposalItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProposalItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProposalItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProposalItem model
   */
  readonly fields: ProposalItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProposalItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProposalItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    proposal<T extends ProposalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProposalDefaultArgs<ExtArgs>>): Prisma__ProposalClient<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProposalItem model
   */ 
  interface ProposalItemFieldRefs {
    readonly id: FieldRef<"ProposalItem", 'String'>
    readonly proposalId: FieldRef<"ProposalItem", 'String'>
    readonly description: FieldRef<"ProposalItem", 'String'>
    readonly quantity: FieldRef<"ProposalItem", 'Int'>
    readonly unitPrice: FieldRef<"ProposalItem", 'Decimal'>
    readonly totalPrice: FieldRef<"ProposalItem", 'Decimal'>
    readonly brand: FieldRef<"ProposalItem", 'String'>
    readonly model: FieldRef<"ProposalItem", 'String'>
    readonly createdAt: FieldRef<"ProposalItem", 'DateTime'>
    readonly updatedAt: FieldRef<"ProposalItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProposalItem findUnique
   */
  export type ProposalItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProposalItem
     */
    select?: ProposalItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalItemInclude<ExtArgs> | null
    /**
     * Filter, which ProposalItem to fetch.
     */
    where: ProposalItemWhereUniqueInput
  }

  /**
   * ProposalItem findUniqueOrThrow
   */
  export type ProposalItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProposalItem
     */
    select?: ProposalItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalItemInclude<ExtArgs> | null
    /**
     * Filter, which ProposalItem to fetch.
     */
    where: ProposalItemWhereUniqueInput
  }

  /**
   * ProposalItem findFirst
   */
  export type ProposalItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProposalItem
     */
    select?: ProposalItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalItemInclude<ExtArgs> | null
    /**
     * Filter, which ProposalItem to fetch.
     */
    where?: ProposalItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProposalItems to fetch.
     */
    orderBy?: ProposalItemOrderByWithRelationInput | ProposalItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProposalItems.
     */
    cursor?: ProposalItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProposalItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProposalItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProposalItems.
     */
    distinct?: ProposalItemScalarFieldEnum | ProposalItemScalarFieldEnum[]
  }

  /**
   * ProposalItem findFirstOrThrow
   */
  export type ProposalItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProposalItem
     */
    select?: ProposalItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalItemInclude<ExtArgs> | null
    /**
     * Filter, which ProposalItem to fetch.
     */
    where?: ProposalItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProposalItems to fetch.
     */
    orderBy?: ProposalItemOrderByWithRelationInput | ProposalItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProposalItems.
     */
    cursor?: ProposalItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProposalItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProposalItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProposalItems.
     */
    distinct?: ProposalItemScalarFieldEnum | ProposalItemScalarFieldEnum[]
  }

  /**
   * ProposalItem findMany
   */
  export type ProposalItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProposalItem
     */
    select?: ProposalItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalItemInclude<ExtArgs> | null
    /**
     * Filter, which ProposalItems to fetch.
     */
    where?: ProposalItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProposalItems to fetch.
     */
    orderBy?: ProposalItemOrderByWithRelationInput | ProposalItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProposalItems.
     */
    cursor?: ProposalItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProposalItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProposalItems.
     */
    skip?: number
    distinct?: ProposalItemScalarFieldEnum | ProposalItemScalarFieldEnum[]
  }

  /**
   * ProposalItem create
   */
  export type ProposalItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProposalItem
     */
    select?: ProposalItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalItemInclude<ExtArgs> | null
    /**
     * The data needed to create a ProposalItem.
     */
    data: XOR<ProposalItemCreateInput, ProposalItemUncheckedCreateInput>
  }

  /**
   * ProposalItem createMany
   */
  export type ProposalItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProposalItems.
     */
    data: ProposalItemCreateManyInput | ProposalItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProposalItem createManyAndReturn
   */
  export type ProposalItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProposalItem
     */
    select?: ProposalItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ProposalItems.
     */
    data: ProposalItemCreateManyInput | ProposalItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProposalItem update
   */
  export type ProposalItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProposalItem
     */
    select?: ProposalItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalItemInclude<ExtArgs> | null
    /**
     * The data needed to update a ProposalItem.
     */
    data: XOR<ProposalItemUpdateInput, ProposalItemUncheckedUpdateInput>
    /**
     * Choose, which ProposalItem to update.
     */
    where: ProposalItemWhereUniqueInput
  }

  /**
   * ProposalItem updateMany
   */
  export type ProposalItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProposalItems.
     */
    data: XOR<ProposalItemUpdateManyMutationInput, ProposalItemUncheckedUpdateManyInput>
    /**
     * Filter which ProposalItems to update
     */
    where?: ProposalItemWhereInput
  }

  /**
   * ProposalItem upsert
   */
  export type ProposalItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProposalItem
     */
    select?: ProposalItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalItemInclude<ExtArgs> | null
    /**
     * The filter to search for the ProposalItem to update in case it exists.
     */
    where: ProposalItemWhereUniqueInput
    /**
     * In case the ProposalItem found by the `where` argument doesn't exist, create a new ProposalItem with this data.
     */
    create: XOR<ProposalItemCreateInput, ProposalItemUncheckedCreateInput>
    /**
     * In case the ProposalItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProposalItemUpdateInput, ProposalItemUncheckedUpdateInput>
  }

  /**
   * ProposalItem delete
   */
  export type ProposalItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProposalItem
     */
    select?: ProposalItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalItemInclude<ExtArgs> | null
    /**
     * Filter which ProposalItem to delete.
     */
    where: ProposalItemWhereUniqueInput
  }

  /**
   * ProposalItem deleteMany
   */
  export type ProposalItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProposalItems to delete
     */
    where?: ProposalItemWhereInput
  }

  /**
   * ProposalItem without action
   */
  export type ProposalItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProposalItem
     */
    select?: ProposalItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalItemInclude<ExtArgs> | null
  }


  /**
   * Model Contract
   */

  export type AggregateContract = {
    _count: ContractCountAggregateOutputType | null
    _avg: ContractAvgAggregateOutputType | null
    _sum: ContractSumAggregateOutputType | null
    _min: ContractMinAggregateOutputType | null
    _max: ContractMaxAggregateOutputType | null
  }

  export type ContractAvgAggregateOutputType = {
    totalValue: Decimal | null
  }

  export type ContractSumAggregateOutputType = {
    totalValue: Decimal | null
  }

  export type ContractMinAggregateOutputType = {
    id: string | null
    biddingId: string | null
    proposalId: string | null
    publicEntityId: string | null
    supplierId: string | null
    contractNumber: string | null
    title: string | null
    description: string | null
    totalValue: Decimal | null
    startDate: Date | null
    endDate: Date | null
    status: $Enums.ContractStatus | null
    signedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ContractMaxAggregateOutputType = {
    id: string | null
    biddingId: string | null
    proposalId: string | null
    publicEntityId: string | null
    supplierId: string | null
    contractNumber: string | null
    title: string | null
    description: string | null
    totalValue: Decimal | null
    startDate: Date | null
    endDate: Date | null
    status: $Enums.ContractStatus | null
    signedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ContractCountAggregateOutputType = {
    id: number
    biddingId: number
    proposalId: number
    publicEntityId: number
    supplierId: number
    contractNumber: number
    title: number
    description: number
    totalValue: number
    startDate: number
    endDate: number
    status: number
    signedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ContractAvgAggregateInputType = {
    totalValue?: true
  }

  export type ContractSumAggregateInputType = {
    totalValue?: true
  }

  export type ContractMinAggregateInputType = {
    id?: true
    biddingId?: true
    proposalId?: true
    publicEntityId?: true
    supplierId?: true
    contractNumber?: true
    title?: true
    description?: true
    totalValue?: true
    startDate?: true
    endDate?: true
    status?: true
    signedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ContractMaxAggregateInputType = {
    id?: true
    biddingId?: true
    proposalId?: true
    publicEntityId?: true
    supplierId?: true
    contractNumber?: true
    title?: true
    description?: true
    totalValue?: true
    startDate?: true
    endDate?: true
    status?: true
    signedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ContractCountAggregateInputType = {
    id?: true
    biddingId?: true
    proposalId?: true
    publicEntityId?: true
    supplierId?: true
    contractNumber?: true
    title?: true
    description?: true
    totalValue?: true
    startDate?: true
    endDate?: true
    status?: true
    signedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ContractAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contract to aggregate.
     */
    where?: ContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contracts to fetch.
     */
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contracts
    **/
    _count?: true | ContractCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContractAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContractSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContractMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContractMaxAggregateInputType
  }

  export type GetContractAggregateType<T extends ContractAggregateArgs> = {
        [P in keyof T & keyof AggregateContract]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContract[P]>
      : GetScalarType<T[P], AggregateContract[P]>
  }




  export type ContractGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractWhereInput
    orderBy?: ContractOrderByWithAggregationInput | ContractOrderByWithAggregationInput[]
    by: ContractScalarFieldEnum[] | ContractScalarFieldEnum
    having?: ContractScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContractCountAggregateInputType | true
    _avg?: ContractAvgAggregateInputType
    _sum?: ContractSumAggregateInputType
    _min?: ContractMinAggregateInputType
    _max?: ContractMaxAggregateInputType
  }

  export type ContractGroupByOutputType = {
    id: string
    biddingId: string
    proposalId: string
    publicEntityId: string
    supplierId: string
    contractNumber: string
    title: string
    description: string
    totalValue: Decimal
    startDate: Date
    endDate: Date
    status: $Enums.ContractStatus
    signedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: ContractCountAggregateOutputType | null
    _avg: ContractAvgAggregateOutputType | null
    _sum: ContractSumAggregateOutputType | null
    _min: ContractMinAggregateOutputType | null
    _max: ContractMaxAggregateOutputType | null
  }

  type GetContractGroupByPayload<T extends ContractGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContractGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContractGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContractGroupByOutputType[P]>
            : GetScalarType<T[P], ContractGroupByOutputType[P]>
        }
      >
    >


  export type ContractSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    biddingId?: boolean
    proposalId?: boolean
    publicEntityId?: boolean
    supplierId?: boolean
    contractNumber?: boolean
    title?: boolean
    description?: boolean
    totalValue?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    signedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    bidding?: boolean | BiddingDefaultArgs<ExtArgs>
    proposal?: boolean | ProposalDefaultArgs<ExtArgs>
    publicEntity?: boolean | PublicEntityDefaultArgs<ExtArgs>
    supplier?: boolean | SupplierDefaultArgs<ExtArgs>
    documents?: boolean | Contract$documentsArgs<ExtArgs>
    _count?: boolean | ContractCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contract"]>

  export type ContractSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    biddingId?: boolean
    proposalId?: boolean
    publicEntityId?: boolean
    supplierId?: boolean
    contractNumber?: boolean
    title?: boolean
    description?: boolean
    totalValue?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    signedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    bidding?: boolean | BiddingDefaultArgs<ExtArgs>
    proposal?: boolean | ProposalDefaultArgs<ExtArgs>
    publicEntity?: boolean | PublicEntityDefaultArgs<ExtArgs>
    supplier?: boolean | SupplierDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contract"]>

  export type ContractSelectScalar = {
    id?: boolean
    biddingId?: boolean
    proposalId?: boolean
    publicEntityId?: boolean
    supplierId?: boolean
    contractNumber?: boolean
    title?: boolean
    description?: boolean
    totalValue?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    signedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ContractInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bidding?: boolean | BiddingDefaultArgs<ExtArgs>
    proposal?: boolean | ProposalDefaultArgs<ExtArgs>
    publicEntity?: boolean | PublicEntityDefaultArgs<ExtArgs>
    supplier?: boolean | SupplierDefaultArgs<ExtArgs>
    documents?: boolean | Contract$documentsArgs<ExtArgs>
    _count?: boolean | ContractCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ContractIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bidding?: boolean | BiddingDefaultArgs<ExtArgs>
    proposal?: boolean | ProposalDefaultArgs<ExtArgs>
    publicEntity?: boolean | PublicEntityDefaultArgs<ExtArgs>
    supplier?: boolean | SupplierDefaultArgs<ExtArgs>
  }

  export type $ContractPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Contract"
    objects: {
      bidding: Prisma.$BiddingPayload<ExtArgs>
      proposal: Prisma.$ProposalPayload<ExtArgs>
      publicEntity: Prisma.$PublicEntityPayload<ExtArgs>
      supplier: Prisma.$SupplierPayload<ExtArgs>
      documents: Prisma.$DocumentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      biddingId: string
      proposalId: string
      publicEntityId: string
      supplierId: string
      contractNumber: string
      title: string
      description: string
      totalValue: Prisma.Decimal
      startDate: Date
      endDate: Date
      status: $Enums.ContractStatus
      signedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["contract"]>
    composites: {}
  }

  type ContractGetPayload<S extends boolean | null | undefined | ContractDefaultArgs> = $Result.GetResult<Prisma.$ContractPayload, S>

  type ContractCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ContractFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ContractCountAggregateInputType | true
    }

  export interface ContractDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contract'], meta: { name: 'Contract' } }
    /**
     * Find zero or one Contract that matches the filter.
     * @param {ContractFindUniqueArgs} args - Arguments to find a Contract
     * @example
     * // Get one Contract
     * const contract = await prisma.contract.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContractFindUniqueArgs>(args: SelectSubset<T, ContractFindUniqueArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Contract that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ContractFindUniqueOrThrowArgs} args - Arguments to find a Contract
     * @example
     * // Get one Contract
     * const contract = await prisma.contract.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContractFindUniqueOrThrowArgs>(args: SelectSubset<T, ContractFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Contract that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractFindFirstArgs} args - Arguments to find a Contract
     * @example
     * // Get one Contract
     * const contract = await prisma.contract.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContractFindFirstArgs>(args?: SelectSubset<T, ContractFindFirstArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Contract that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractFindFirstOrThrowArgs} args - Arguments to find a Contract
     * @example
     * // Get one Contract
     * const contract = await prisma.contract.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContractFindFirstOrThrowArgs>(args?: SelectSubset<T, ContractFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Contracts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contracts
     * const contracts = await prisma.contract.findMany()
     * 
     * // Get first 10 Contracts
     * const contracts = await prisma.contract.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contractWithIdOnly = await prisma.contract.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContractFindManyArgs>(args?: SelectSubset<T, ContractFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Contract.
     * @param {ContractCreateArgs} args - Arguments to create a Contract.
     * @example
     * // Create one Contract
     * const Contract = await prisma.contract.create({
     *   data: {
     *     // ... data to create a Contract
     *   }
     * })
     * 
     */
    create<T extends ContractCreateArgs>(args: SelectSubset<T, ContractCreateArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Contracts.
     * @param {ContractCreateManyArgs} args - Arguments to create many Contracts.
     * @example
     * // Create many Contracts
     * const contract = await prisma.contract.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContractCreateManyArgs>(args?: SelectSubset<T, ContractCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Contracts and returns the data saved in the database.
     * @param {ContractCreateManyAndReturnArgs} args - Arguments to create many Contracts.
     * @example
     * // Create many Contracts
     * const contract = await prisma.contract.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Contracts and only return the `id`
     * const contractWithIdOnly = await prisma.contract.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContractCreateManyAndReturnArgs>(args?: SelectSubset<T, ContractCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Contract.
     * @param {ContractDeleteArgs} args - Arguments to delete one Contract.
     * @example
     * // Delete one Contract
     * const Contract = await prisma.contract.delete({
     *   where: {
     *     // ... filter to delete one Contract
     *   }
     * })
     * 
     */
    delete<T extends ContractDeleteArgs>(args: SelectSubset<T, ContractDeleteArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Contract.
     * @param {ContractUpdateArgs} args - Arguments to update one Contract.
     * @example
     * // Update one Contract
     * const contract = await prisma.contract.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContractUpdateArgs>(args: SelectSubset<T, ContractUpdateArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Contracts.
     * @param {ContractDeleteManyArgs} args - Arguments to filter Contracts to delete.
     * @example
     * // Delete a few Contracts
     * const { count } = await prisma.contract.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContractDeleteManyArgs>(args?: SelectSubset<T, ContractDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contracts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contracts
     * const contract = await prisma.contract.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContractUpdateManyArgs>(args: SelectSubset<T, ContractUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Contract.
     * @param {ContractUpsertArgs} args - Arguments to update or create a Contract.
     * @example
     * // Update or create a Contract
     * const contract = await prisma.contract.upsert({
     *   create: {
     *     // ... data to create a Contract
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contract we want to update
     *   }
     * })
     */
    upsert<T extends ContractUpsertArgs>(args: SelectSubset<T, ContractUpsertArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Contracts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractCountArgs} args - Arguments to filter Contracts to count.
     * @example
     * // Count the number of Contracts
     * const count = await prisma.contract.count({
     *   where: {
     *     // ... the filter for the Contracts we want to count
     *   }
     * })
    **/
    count<T extends ContractCountArgs>(
      args?: Subset<T, ContractCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContractCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contract.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContractAggregateArgs>(args: Subset<T, ContractAggregateArgs>): Prisma.PrismaPromise<GetContractAggregateType<T>>

    /**
     * Group by Contract.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContractGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContractGroupByArgs['orderBy'] }
        : { orderBy?: ContractGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContractGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContractGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Contract model
   */
  readonly fields: ContractFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Contract.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContractClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bidding<T extends BiddingDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BiddingDefaultArgs<ExtArgs>>): Prisma__BiddingClient<$Result.GetResult<Prisma.$BiddingPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    proposal<T extends ProposalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProposalDefaultArgs<ExtArgs>>): Prisma__ProposalClient<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    publicEntity<T extends PublicEntityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PublicEntityDefaultArgs<ExtArgs>>): Prisma__PublicEntityClient<$Result.GetResult<Prisma.$PublicEntityPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    supplier<T extends SupplierDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SupplierDefaultArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    documents<T extends Contract$documentsArgs<ExtArgs> = {}>(args?: Subset<T, Contract$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Contract model
   */ 
  interface ContractFieldRefs {
    readonly id: FieldRef<"Contract", 'String'>
    readonly biddingId: FieldRef<"Contract", 'String'>
    readonly proposalId: FieldRef<"Contract", 'String'>
    readonly publicEntityId: FieldRef<"Contract", 'String'>
    readonly supplierId: FieldRef<"Contract", 'String'>
    readonly contractNumber: FieldRef<"Contract", 'String'>
    readonly title: FieldRef<"Contract", 'String'>
    readonly description: FieldRef<"Contract", 'String'>
    readonly totalValue: FieldRef<"Contract", 'Decimal'>
    readonly startDate: FieldRef<"Contract", 'DateTime'>
    readonly endDate: FieldRef<"Contract", 'DateTime'>
    readonly status: FieldRef<"Contract", 'ContractStatus'>
    readonly signedAt: FieldRef<"Contract", 'DateTime'>
    readonly createdAt: FieldRef<"Contract", 'DateTime'>
    readonly updatedAt: FieldRef<"Contract", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Contract findUnique
   */
  export type ContractFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter, which Contract to fetch.
     */
    where: ContractWhereUniqueInput
  }

  /**
   * Contract findUniqueOrThrow
   */
  export type ContractFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter, which Contract to fetch.
     */
    where: ContractWhereUniqueInput
  }

  /**
   * Contract findFirst
   */
  export type ContractFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter, which Contract to fetch.
     */
    where?: ContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contracts to fetch.
     */
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contracts.
     */
    cursor?: ContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contracts.
     */
    distinct?: ContractScalarFieldEnum | ContractScalarFieldEnum[]
  }

  /**
   * Contract findFirstOrThrow
   */
  export type ContractFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter, which Contract to fetch.
     */
    where?: ContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contracts to fetch.
     */
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contracts.
     */
    cursor?: ContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contracts.
     */
    distinct?: ContractScalarFieldEnum | ContractScalarFieldEnum[]
  }

  /**
   * Contract findMany
   */
  export type ContractFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter, which Contracts to fetch.
     */
    where?: ContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contracts to fetch.
     */
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contracts.
     */
    cursor?: ContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contracts.
     */
    skip?: number
    distinct?: ContractScalarFieldEnum | ContractScalarFieldEnum[]
  }

  /**
   * Contract create
   */
  export type ContractCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * The data needed to create a Contract.
     */
    data: XOR<ContractCreateInput, ContractUncheckedCreateInput>
  }

  /**
   * Contract createMany
   */
  export type ContractCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contracts.
     */
    data: ContractCreateManyInput | ContractCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Contract createManyAndReturn
   */
  export type ContractCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Contracts.
     */
    data: ContractCreateManyInput | ContractCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Contract update
   */
  export type ContractUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * The data needed to update a Contract.
     */
    data: XOR<ContractUpdateInput, ContractUncheckedUpdateInput>
    /**
     * Choose, which Contract to update.
     */
    where: ContractWhereUniqueInput
  }

  /**
   * Contract updateMany
   */
  export type ContractUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contracts.
     */
    data: XOR<ContractUpdateManyMutationInput, ContractUncheckedUpdateManyInput>
    /**
     * Filter which Contracts to update
     */
    where?: ContractWhereInput
  }

  /**
   * Contract upsert
   */
  export type ContractUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * The filter to search for the Contract to update in case it exists.
     */
    where: ContractWhereUniqueInput
    /**
     * In case the Contract found by the `where` argument doesn't exist, create a new Contract with this data.
     */
    create: XOR<ContractCreateInput, ContractUncheckedCreateInput>
    /**
     * In case the Contract was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContractUpdateInput, ContractUncheckedUpdateInput>
  }

  /**
   * Contract delete
   */
  export type ContractDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter which Contract to delete.
     */
    where: ContractWhereUniqueInput
  }

  /**
   * Contract deleteMany
   */
  export type ContractDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contracts to delete
     */
    where?: ContractWhereInput
  }

  /**
   * Contract.documents
   */
  export type Contract$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Contract without action
   */
  export type ContractDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
  }


  /**
   * Model Document
   */

  export type AggregateDocument = {
    _count: DocumentCountAggregateOutputType | null
    _avg: DocumentAvgAggregateOutputType | null
    _sum: DocumentSumAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  export type DocumentAvgAggregateOutputType = {
    size: number | null
  }

  export type DocumentSumAggregateOutputType = {
    size: number | null
  }

  export type DocumentMinAggregateOutputType = {
    id: string | null
    filename: string | null
    originalName: string | null
    mimeType: string | null
    size: number | null
    path: string | null
    type: $Enums.DocumentType | null
    description: string | null
    isPublic: boolean | null
    uploadedBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
    biddingId: string | null
    proposalId: string | null
    contractId: string | null
    supplierId: string | null
    publicEntityId: string | null
  }

  export type DocumentMaxAggregateOutputType = {
    id: string | null
    filename: string | null
    originalName: string | null
    mimeType: string | null
    size: number | null
    path: string | null
    type: $Enums.DocumentType | null
    description: string | null
    isPublic: boolean | null
    uploadedBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
    biddingId: string | null
    proposalId: string | null
    contractId: string | null
    supplierId: string | null
    publicEntityId: string | null
  }

  export type DocumentCountAggregateOutputType = {
    id: number
    filename: number
    originalName: number
    mimeType: number
    size: number
    path: number
    type: number
    description: number
    isPublic: number
    uploadedBy: number
    createdAt: number
    updatedAt: number
    biddingId: number
    proposalId: number
    contractId: number
    supplierId: number
    publicEntityId: number
    _all: number
  }


  export type DocumentAvgAggregateInputType = {
    size?: true
  }

  export type DocumentSumAggregateInputType = {
    size?: true
  }

  export type DocumentMinAggregateInputType = {
    id?: true
    filename?: true
    originalName?: true
    mimeType?: true
    size?: true
    path?: true
    type?: true
    description?: true
    isPublic?: true
    uploadedBy?: true
    createdAt?: true
    updatedAt?: true
    biddingId?: true
    proposalId?: true
    contractId?: true
    supplierId?: true
    publicEntityId?: true
  }

  export type DocumentMaxAggregateInputType = {
    id?: true
    filename?: true
    originalName?: true
    mimeType?: true
    size?: true
    path?: true
    type?: true
    description?: true
    isPublic?: true
    uploadedBy?: true
    createdAt?: true
    updatedAt?: true
    biddingId?: true
    proposalId?: true
    contractId?: true
    supplierId?: true
    publicEntityId?: true
  }

  export type DocumentCountAggregateInputType = {
    id?: true
    filename?: true
    originalName?: true
    mimeType?: true
    size?: true
    path?: true
    type?: true
    description?: true
    isPublic?: true
    uploadedBy?: true
    createdAt?: true
    updatedAt?: true
    biddingId?: true
    proposalId?: true
    contractId?: true
    supplierId?: true
    publicEntityId?: true
    _all?: true
  }

  export type DocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Document to aggregate.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Documents
    **/
    _count?: true | DocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DocumentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DocumentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentMaxAggregateInputType
  }

  export type GetDocumentAggregateType<T extends DocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocument[P]>
      : GetScalarType<T[P], AggregateDocument[P]>
  }




  export type DocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithAggregationInput | DocumentOrderByWithAggregationInput[]
    by: DocumentScalarFieldEnum[] | DocumentScalarFieldEnum
    having?: DocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentCountAggregateInputType | true
    _avg?: DocumentAvgAggregateInputType
    _sum?: DocumentSumAggregateInputType
    _min?: DocumentMinAggregateInputType
    _max?: DocumentMaxAggregateInputType
  }

  export type DocumentGroupByOutputType = {
    id: string
    filename: string
    originalName: string
    mimeType: string
    size: number
    path: string
    type: $Enums.DocumentType
    description: string | null
    isPublic: boolean
    uploadedBy: string
    createdAt: Date
    updatedAt: Date
    biddingId: string | null
    proposalId: string | null
    contractId: string | null
    supplierId: string | null
    publicEntityId: string | null
    _count: DocumentCountAggregateOutputType | null
    _avg: DocumentAvgAggregateOutputType | null
    _sum: DocumentSumAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  type GetDocumentGroupByPayload<T extends DocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentGroupByOutputType[P]>
        }
      >
    >


  export type DocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    filename?: boolean
    originalName?: boolean
    mimeType?: boolean
    size?: boolean
    path?: boolean
    type?: boolean
    description?: boolean
    isPublic?: boolean
    uploadedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    biddingId?: boolean
    proposalId?: boolean
    contractId?: boolean
    supplierId?: boolean
    publicEntityId?: boolean
    bidding?: boolean | Document$biddingArgs<ExtArgs>
    proposal?: boolean | Document$proposalArgs<ExtArgs>
    contract?: boolean | Document$contractArgs<ExtArgs>
    supplier?: boolean | Document$supplierArgs<ExtArgs>
    publicEntity?: boolean | Document$publicEntityArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    filename?: boolean
    originalName?: boolean
    mimeType?: boolean
    size?: boolean
    path?: boolean
    type?: boolean
    description?: boolean
    isPublic?: boolean
    uploadedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    biddingId?: boolean
    proposalId?: boolean
    contractId?: boolean
    supplierId?: boolean
    publicEntityId?: boolean
    bidding?: boolean | Document$biddingArgs<ExtArgs>
    proposal?: boolean | Document$proposalArgs<ExtArgs>
    contract?: boolean | Document$contractArgs<ExtArgs>
    supplier?: boolean | Document$supplierArgs<ExtArgs>
    publicEntity?: boolean | Document$publicEntityArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectScalar = {
    id?: boolean
    filename?: boolean
    originalName?: boolean
    mimeType?: boolean
    size?: boolean
    path?: boolean
    type?: boolean
    description?: boolean
    isPublic?: boolean
    uploadedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    biddingId?: boolean
    proposalId?: boolean
    contractId?: boolean
    supplierId?: boolean
    publicEntityId?: boolean
  }

  export type DocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bidding?: boolean | Document$biddingArgs<ExtArgs>
    proposal?: boolean | Document$proposalArgs<ExtArgs>
    contract?: boolean | Document$contractArgs<ExtArgs>
    supplier?: boolean | Document$supplierArgs<ExtArgs>
    publicEntity?: boolean | Document$publicEntityArgs<ExtArgs>
  }
  export type DocumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bidding?: boolean | Document$biddingArgs<ExtArgs>
    proposal?: boolean | Document$proposalArgs<ExtArgs>
    contract?: boolean | Document$contractArgs<ExtArgs>
    supplier?: boolean | Document$supplierArgs<ExtArgs>
    publicEntity?: boolean | Document$publicEntityArgs<ExtArgs>
  }

  export type $DocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Document"
    objects: {
      bidding: Prisma.$BiddingPayload<ExtArgs> | null
      proposal: Prisma.$ProposalPayload<ExtArgs> | null
      contract: Prisma.$ContractPayload<ExtArgs> | null
      supplier: Prisma.$SupplierPayload<ExtArgs> | null
      publicEntity: Prisma.$PublicEntityPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      filename: string
      originalName: string
      mimeType: string
      size: number
      path: string
      type: $Enums.DocumentType
      description: string | null
      isPublic: boolean
      uploadedBy: string
      createdAt: Date
      updatedAt: Date
      biddingId: string | null
      proposalId: string | null
      contractId: string | null
      supplierId: string | null
      publicEntityId: string | null
    }, ExtArgs["result"]["document"]>
    composites: {}
  }

  type DocumentGetPayload<S extends boolean | null | undefined | DocumentDefaultArgs> = $Result.GetResult<Prisma.$DocumentPayload, S>

  type DocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DocumentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DocumentCountAggregateInputType | true
    }

  export interface DocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Document'], meta: { name: 'Document' } }
    /**
     * Find zero or one Document that matches the filter.
     * @param {DocumentFindUniqueArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentFindUniqueArgs>(args: SelectSubset<T, DocumentFindUniqueArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Document that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DocumentFindUniqueOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Document that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentFindFirstArgs>(args?: SelectSubset<T, DocumentFindFirstArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Document that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Documents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Documents
     * const documents = await prisma.document.findMany()
     * 
     * // Get first 10 Documents
     * const documents = await prisma.document.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentWithIdOnly = await prisma.document.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentFindManyArgs>(args?: SelectSubset<T, DocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Document.
     * @param {DocumentCreateArgs} args - Arguments to create a Document.
     * @example
     * // Create one Document
     * const Document = await prisma.document.create({
     *   data: {
     *     // ... data to create a Document
     *   }
     * })
     * 
     */
    create<T extends DocumentCreateArgs>(args: SelectSubset<T, DocumentCreateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Documents.
     * @param {DocumentCreateManyArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentCreateManyArgs>(args?: SelectSubset<T, DocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Documents and returns the data saved in the database.
     * @param {DocumentCreateManyAndReturnArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Documents and only return the `id`
     * const documentWithIdOnly = await prisma.document.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Document.
     * @param {DocumentDeleteArgs} args - Arguments to delete one Document.
     * @example
     * // Delete one Document
     * const Document = await prisma.document.delete({
     *   where: {
     *     // ... filter to delete one Document
     *   }
     * })
     * 
     */
    delete<T extends DocumentDeleteArgs>(args: SelectSubset<T, DocumentDeleteArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Document.
     * @param {DocumentUpdateArgs} args - Arguments to update one Document.
     * @example
     * // Update one Document
     * const document = await prisma.document.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentUpdateArgs>(args: SelectSubset<T, DocumentUpdateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Documents.
     * @param {DocumentDeleteManyArgs} args - Arguments to filter Documents to delete.
     * @example
     * // Delete a few Documents
     * const { count } = await prisma.document.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentDeleteManyArgs>(args?: SelectSubset<T, DocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Documents
     * const document = await prisma.document.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentUpdateManyArgs>(args: SelectSubset<T, DocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Document.
     * @param {DocumentUpsertArgs} args - Arguments to update or create a Document.
     * @example
     * // Update or create a Document
     * const document = await prisma.document.upsert({
     *   create: {
     *     // ... data to create a Document
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Document we want to update
     *   }
     * })
     */
    upsert<T extends DocumentUpsertArgs>(args: SelectSubset<T, DocumentUpsertArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentCountArgs} args - Arguments to filter Documents to count.
     * @example
     * // Count the number of Documents
     * const count = await prisma.document.count({
     *   where: {
     *     // ... the filter for the Documents we want to count
     *   }
     * })
    **/
    count<T extends DocumentCountArgs>(
      args?: Subset<T, DocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentAggregateArgs>(args: Subset<T, DocumentAggregateArgs>): Prisma.PrismaPromise<GetDocumentAggregateType<T>>

    /**
     * Group by Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentGroupByArgs['orderBy'] }
        : { orderBy?: DocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Document model
   */
  readonly fields: DocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Document.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bidding<T extends Document$biddingArgs<ExtArgs> = {}>(args?: Subset<T, Document$biddingArgs<ExtArgs>>): Prisma__BiddingClient<$Result.GetResult<Prisma.$BiddingPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    proposal<T extends Document$proposalArgs<ExtArgs> = {}>(args?: Subset<T, Document$proposalArgs<ExtArgs>>): Prisma__ProposalClient<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    contract<T extends Document$contractArgs<ExtArgs> = {}>(args?: Subset<T, Document$contractArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    supplier<T extends Document$supplierArgs<ExtArgs> = {}>(args?: Subset<T, Document$supplierArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    publicEntity<T extends Document$publicEntityArgs<ExtArgs> = {}>(args?: Subset<T, Document$publicEntityArgs<ExtArgs>>): Prisma__PublicEntityClient<$Result.GetResult<Prisma.$PublicEntityPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Document model
   */ 
  interface DocumentFieldRefs {
    readonly id: FieldRef<"Document", 'String'>
    readonly filename: FieldRef<"Document", 'String'>
    readonly originalName: FieldRef<"Document", 'String'>
    readonly mimeType: FieldRef<"Document", 'String'>
    readonly size: FieldRef<"Document", 'Int'>
    readonly path: FieldRef<"Document", 'String'>
    readonly type: FieldRef<"Document", 'DocumentType'>
    readonly description: FieldRef<"Document", 'String'>
    readonly isPublic: FieldRef<"Document", 'Boolean'>
    readonly uploadedBy: FieldRef<"Document", 'String'>
    readonly createdAt: FieldRef<"Document", 'DateTime'>
    readonly updatedAt: FieldRef<"Document", 'DateTime'>
    readonly biddingId: FieldRef<"Document", 'String'>
    readonly proposalId: FieldRef<"Document", 'String'>
    readonly contractId: FieldRef<"Document", 'String'>
    readonly supplierId: FieldRef<"Document", 'String'>
    readonly publicEntityId: FieldRef<"Document", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Document findUnique
   */
  export type DocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findUniqueOrThrow
   */
  export type DocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findFirst
   */
  export type DocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findFirstOrThrow
   */
  export type DocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findMany
   */
  export type DocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Documents to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document create
   */
  export type DocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a Document.
     */
    data: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
  }

  /**
   * Document createMany
   */
  export type DocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Document createManyAndReturn
   */
  export type DocumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Document update
   */
  export type DocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a Document.
     */
    data: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
    /**
     * Choose, which Document to update.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document updateMany
   */
  export type DocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Documents.
     */
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyInput>
    /**
     * Filter which Documents to update
     */
    where?: DocumentWhereInput
  }

  /**
   * Document upsert
   */
  export type DocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the Document to update in case it exists.
     */
    where: DocumentWhereUniqueInput
    /**
     * In case the Document found by the `where` argument doesn't exist, create a new Document with this data.
     */
    create: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
    /**
     * In case the Document was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
  }

  /**
   * Document delete
   */
  export type DocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter which Document to delete.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document deleteMany
   */
  export type DocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Documents to delete
     */
    where?: DocumentWhereInput
  }

  /**
   * Document.bidding
   */
  export type Document$biddingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bidding
     */
    select?: BiddingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiddingInclude<ExtArgs> | null
    where?: BiddingWhereInput
  }

  /**
   * Document.proposal
   */
  export type Document$proposalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    where?: ProposalWhereInput
  }

  /**
   * Document.contract
   */
  export type Document$contractArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    where?: ContractWhereInput
  }

  /**
   * Document.supplier
   */
  export type Document$supplierArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierInclude<ExtArgs> | null
    where?: SupplierWhereInput
  }

  /**
   * Document.publicEntity
   */
  export type Document$publicEntityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublicEntity
     */
    select?: PublicEntitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicEntityInclude<ExtArgs> | null
    where?: PublicEntityWhereInput
  }

  /**
   * Document without action
   */
  export type DocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
  }


  /**
   * Model BiddingCategory
   */

  export type AggregateBiddingCategory = {
    _count: BiddingCategoryCountAggregateOutputType | null
    _min: BiddingCategoryMinAggregateOutputType | null
    _max: BiddingCategoryMaxAggregateOutputType | null
  }

  export type BiddingCategoryMinAggregateOutputType = {
    id: string | null
    biddingId: string | null
    categoryId: string | null
    createdAt: Date | null
  }

  export type BiddingCategoryMaxAggregateOutputType = {
    id: string | null
    biddingId: string | null
    categoryId: string | null
    createdAt: Date | null
  }

  export type BiddingCategoryCountAggregateOutputType = {
    id: number
    biddingId: number
    categoryId: number
    createdAt: number
    _all: number
  }


  export type BiddingCategoryMinAggregateInputType = {
    id?: true
    biddingId?: true
    categoryId?: true
    createdAt?: true
  }

  export type BiddingCategoryMaxAggregateInputType = {
    id?: true
    biddingId?: true
    categoryId?: true
    createdAt?: true
  }

  export type BiddingCategoryCountAggregateInputType = {
    id?: true
    biddingId?: true
    categoryId?: true
    createdAt?: true
    _all?: true
  }

  export type BiddingCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BiddingCategory to aggregate.
     */
    where?: BiddingCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BiddingCategories to fetch.
     */
    orderBy?: BiddingCategoryOrderByWithRelationInput | BiddingCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BiddingCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BiddingCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BiddingCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BiddingCategories
    **/
    _count?: true | BiddingCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BiddingCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BiddingCategoryMaxAggregateInputType
  }

  export type GetBiddingCategoryAggregateType<T extends BiddingCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateBiddingCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBiddingCategory[P]>
      : GetScalarType<T[P], AggregateBiddingCategory[P]>
  }




  export type BiddingCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BiddingCategoryWhereInput
    orderBy?: BiddingCategoryOrderByWithAggregationInput | BiddingCategoryOrderByWithAggregationInput[]
    by: BiddingCategoryScalarFieldEnum[] | BiddingCategoryScalarFieldEnum
    having?: BiddingCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BiddingCategoryCountAggregateInputType | true
    _min?: BiddingCategoryMinAggregateInputType
    _max?: BiddingCategoryMaxAggregateInputType
  }

  export type BiddingCategoryGroupByOutputType = {
    id: string
    biddingId: string
    categoryId: string
    createdAt: Date
    _count: BiddingCategoryCountAggregateOutputType | null
    _min: BiddingCategoryMinAggregateOutputType | null
    _max: BiddingCategoryMaxAggregateOutputType | null
  }

  type GetBiddingCategoryGroupByPayload<T extends BiddingCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BiddingCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BiddingCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BiddingCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], BiddingCategoryGroupByOutputType[P]>
        }
      >
    >


  export type BiddingCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    biddingId?: boolean
    categoryId?: boolean
    createdAt?: boolean
    bidding?: boolean | BiddingDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["biddingCategory"]>

  export type BiddingCategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    biddingId?: boolean
    categoryId?: boolean
    createdAt?: boolean
    bidding?: boolean | BiddingDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["biddingCategory"]>

  export type BiddingCategorySelectScalar = {
    id?: boolean
    biddingId?: boolean
    categoryId?: boolean
    createdAt?: boolean
  }

  export type BiddingCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bidding?: boolean | BiddingDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }
  export type BiddingCategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bidding?: boolean | BiddingDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }

  export type $BiddingCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BiddingCategory"
    objects: {
      bidding: Prisma.$BiddingPayload<ExtArgs>
      category: Prisma.$CategoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      biddingId: string
      categoryId: string
      createdAt: Date
    }, ExtArgs["result"]["biddingCategory"]>
    composites: {}
  }

  type BiddingCategoryGetPayload<S extends boolean | null | undefined | BiddingCategoryDefaultArgs> = $Result.GetResult<Prisma.$BiddingCategoryPayload, S>

  type BiddingCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BiddingCategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BiddingCategoryCountAggregateInputType | true
    }

  export interface BiddingCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BiddingCategory'], meta: { name: 'BiddingCategory' } }
    /**
     * Find zero or one BiddingCategory that matches the filter.
     * @param {BiddingCategoryFindUniqueArgs} args - Arguments to find a BiddingCategory
     * @example
     * // Get one BiddingCategory
     * const biddingCategory = await prisma.biddingCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BiddingCategoryFindUniqueArgs>(args: SelectSubset<T, BiddingCategoryFindUniqueArgs<ExtArgs>>): Prisma__BiddingCategoryClient<$Result.GetResult<Prisma.$BiddingCategoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BiddingCategory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BiddingCategoryFindUniqueOrThrowArgs} args - Arguments to find a BiddingCategory
     * @example
     * // Get one BiddingCategory
     * const biddingCategory = await prisma.biddingCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BiddingCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, BiddingCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BiddingCategoryClient<$Result.GetResult<Prisma.$BiddingCategoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BiddingCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BiddingCategoryFindFirstArgs} args - Arguments to find a BiddingCategory
     * @example
     * // Get one BiddingCategory
     * const biddingCategory = await prisma.biddingCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BiddingCategoryFindFirstArgs>(args?: SelectSubset<T, BiddingCategoryFindFirstArgs<ExtArgs>>): Prisma__BiddingCategoryClient<$Result.GetResult<Prisma.$BiddingCategoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BiddingCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BiddingCategoryFindFirstOrThrowArgs} args - Arguments to find a BiddingCategory
     * @example
     * // Get one BiddingCategory
     * const biddingCategory = await prisma.biddingCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BiddingCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, BiddingCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__BiddingCategoryClient<$Result.GetResult<Prisma.$BiddingCategoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BiddingCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BiddingCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BiddingCategories
     * const biddingCategories = await prisma.biddingCategory.findMany()
     * 
     * // Get first 10 BiddingCategories
     * const biddingCategories = await prisma.biddingCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const biddingCategoryWithIdOnly = await prisma.biddingCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BiddingCategoryFindManyArgs>(args?: SelectSubset<T, BiddingCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BiddingCategoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BiddingCategory.
     * @param {BiddingCategoryCreateArgs} args - Arguments to create a BiddingCategory.
     * @example
     * // Create one BiddingCategory
     * const BiddingCategory = await prisma.biddingCategory.create({
     *   data: {
     *     // ... data to create a BiddingCategory
     *   }
     * })
     * 
     */
    create<T extends BiddingCategoryCreateArgs>(args: SelectSubset<T, BiddingCategoryCreateArgs<ExtArgs>>): Prisma__BiddingCategoryClient<$Result.GetResult<Prisma.$BiddingCategoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BiddingCategories.
     * @param {BiddingCategoryCreateManyArgs} args - Arguments to create many BiddingCategories.
     * @example
     * // Create many BiddingCategories
     * const biddingCategory = await prisma.biddingCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BiddingCategoryCreateManyArgs>(args?: SelectSubset<T, BiddingCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BiddingCategories and returns the data saved in the database.
     * @param {BiddingCategoryCreateManyAndReturnArgs} args - Arguments to create many BiddingCategories.
     * @example
     * // Create many BiddingCategories
     * const biddingCategory = await prisma.biddingCategory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BiddingCategories and only return the `id`
     * const biddingCategoryWithIdOnly = await prisma.biddingCategory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BiddingCategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, BiddingCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BiddingCategoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a BiddingCategory.
     * @param {BiddingCategoryDeleteArgs} args - Arguments to delete one BiddingCategory.
     * @example
     * // Delete one BiddingCategory
     * const BiddingCategory = await prisma.biddingCategory.delete({
     *   where: {
     *     // ... filter to delete one BiddingCategory
     *   }
     * })
     * 
     */
    delete<T extends BiddingCategoryDeleteArgs>(args: SelectSubset<T, BiddingCategoryDeleteArgs<ExtArgs>>): Prisma__BiddingCategoryClient<$Result.GetResult<Prisma.$BiddingCategoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BiddingCategory.
     * @param {BiddingCategoryUpdateArgs} args - Arguments to update one BiddingCategory.
     * @example
     * // Update one BiddingCategory
     * const biddingCategory = await prisma.biddingCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BiddingCategoryUpdateArgs>(args: SelectSubset<T, BiddingCategoryUpdateArgs<ExtArgs>>): Prisma__BiddingCategoryClient<$Result.GetResult<Prisma.$BiddingCategoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BiddingCategories.
     * @param {BiddingCategoryDeleteManyArgs} args - Arguments to filter BiddingCategories to delete.
     * @example
     * // Delete a few BiddingCategories
     * const { count } = await prisma.biddingCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BiddingCategoryDeleteManyArgs>(args?: SelectSubset<T, BiddingCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BiddingCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BiddingCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BiddingCategories
     * const biddingCategory = await prisma.biddingCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BiddingCategoryUpdateManyArgs>(args: SelectSubset<T, BiddingCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BiddingCategory.
     * @param {BiddingCategoryUpsertArgs} args - Arguments to update or create a BiddingCategory.
     * @example
     * // Update or create a BiddingCategory
     * const biddingCategory = await prisma.biddingCategory.upsert({
     *   create: {
     *     // ... data to create a BiddingCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BiddingCategory we want to update
     *   }
     * })
     */
    upsert<T extends BiddingCategoryUpsertArgs>(args: SelectSubset<T, BiddingCategoryUpsertArgs<ExtArgs>>): Prisma__BiddingCategoryClient<$Result.GetResult<Prisma.$BiddingCategoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BiddingCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BiddingCategoryCountArgs} args - Arguments to filter BiddingCategories to count.
     * @example
     * // Count the number of BiddingCategories
     * const count = await prisma.biddingCategory.count({
     *   where: {
     *     // ... the filter for the BiddingCategories we want to count
     *   }
     * })
    **/
    count<T extends BiddingCategoryCountArgs>(
      args?: Subset<T, BiddingCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BiddingCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BiddingCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BiddingCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BiddingCategoryAggregateArgs>(args: Subset<T, BiddingCategoryAggregateArgs>): Prisma.PrismaPromise<GetBiddingCategoryAggregateType<T>>

    /**
     * Group by BiddingCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BiddingCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BiddingCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BiddingCategoryGroupByArgs['orderBy'] }
        : { orderBy?: BiddingCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BiddingCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBiddingCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BiddingCategory model
   */
  readonly fields: BiddingCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BiddingCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BiddingCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bidding<T extends BiddingDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BiddingDefaultArgs<ExtArgs>>): Prisma__BiddingClient<$Result.GetResult<Prisma.$BiddingPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BiddingCategory model
   */ 
  interface BiddingCategoryFieldRefs {
    readonly id: FieldRef<"BiddingCategory", 'String'>
    readonly biddingId: FieldRef<"BiddingCategory", 'String'>
    readonly categoryId: FieldRef<"BiddingCategory", 'String'>
    readonly createdAt: FieldRef<"BiddingCategory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BiddingCategory findUnique
   */
  export type BiddingCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BiddingCategory
     */
    select?: BiddingCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiddingCategoryInclude<ExtArgs> | null
    /**
     * Filter, which BiddingCategory to fetch.
     */
    where: BiddingCategoryWhereUniqueInput
  }

  /**
   * BiddingCategory findUniqueOrThrow
   */
  export type BiddingCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BiddingCategory
     */
    select?: BiddingCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiddingCategoryInclude<ExtArgs> | null
    /**
     * Filter, which BiddingCategory to fetch.
     */
    where: BiddingCategoryWhereUniqueInput
  }

  /**
   * BiddingCategory findFirst
   */
  export type BiddingCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BiddingCategory
     */
    select?: BiddingCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiddingCategoryInclude<ExtArgs> | null
    /**
     * Filter, which BiddingCategory to fetch.
     */
    where?: BiddingCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BiddingCategories to fetch.
     */
    orderBy?: BiddingCategoryOrderByWithRelationInput | BiddingCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BiddingCategories.
     */
    cursor?: BiddingCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BiddingCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BiddingCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BiddingCategories.
     */
    distinct?: BiddingCategoryScalarFieldEnum | BiddingCategoryScalarFieldEnum[]
  }

  /**
   * BiddingCategory findFirstOrThrow
   */
  export type BiddingCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BiddingCategory
     */
    select?: BiddingCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiddingCategoryInclude<ExtArgs> | null
    /**
     * Filter, which BiddingCategory to fetch.
     */
    where?: BiddingCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BiddingCategories to fetch.
     */
    orderBy?: BiddingCategoryOrderByWithRelationInput | BiddingCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BiddingCategories.
     */
    cursor?: BiddingCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BiddingCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BiddingCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BiddingCategories.
     */
    distinct?: BiddingCategoryScalarFieldEnum | BiddingCategoryScalarFieldEnum[]
  }

  /**
   * BiddingCategory findMany
   */
  export type BiddingCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BiddingCategory
     */
    select?: BiddingCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiddingCategoryInclude<ExtArgs> | null
    /**
     * Filter, which BiddingCategories to fetch.
     */
    where?: BiddingCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BiddingCategories to fetch.
     */
    orderBy?: BiddingCategoryOrderByWithRelationInput | BiddingCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BiddingCategories.
     */
    cursor?: BiddingCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BiddingCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BiddingCategories.
     */
    skip?: number
    distinct?: BiddingCategoryScalarFieldEnum | BiddingCategoryScalarFieldEnum[]
  }

  /**
   * BiddingCategory create
   */
  export type BiddingCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BiddingCategory
     */
    select?: BiddingCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiddingCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a BiddingCategory.
     */
    data: XOR<BiddingCategoryCreateInput, BiddingCategoryUncheckedCreateInput>
  }

  /**
   * BiddingCategory createMany
   */
  export type BiddingCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BiddingCategories.
     */
    data: BiddingCategoryCreateManyInput | BiddingCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BiddingCategory createManyAndReturn
   */
  export type BiddingCategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BiddingCategory
     */
    select?: BiddingCategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BiddingCategories.
     */
    data: BiddingCategoryCreateManyInput | BiddingCategoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiddingCategoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BiddingCategory update
   */
  export type BiddingCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BiddingCategory
     */
    select?: BiddingCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiddingCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a BiddingCategory.
     */
    data: XOR<BiddingCategoryUpdateInput, BiddingCategoryUncheckedUpdateInput>
    /**
     * Choose, which BiddingCategory to update.
     */
    where: BiddingCategoryWhereUniqueInput
  }

  /**
   * BiddingCategory updateMany
   */
  export type BiddingCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BiddingCategories.
     */
    data: XOR<BiddingCategoryUpdateManyMutationInput, BiddingCategoryUncheckedUpdateManyInput>
    /**
     * Filter which BiddingCategories to update
     */
    where?: BiddingCategoryWhereInput
  }

  /**
   * BiddingCategory upsert
   */
  export type BiddingCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BiddingCategory
     */
    select?: BiddingCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiddingCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the BiddingCategory to update in case it exists.
     */
    where: BiddingCategoryWhereUniqueInput
    /**
     * In case the BiddingCategory found by the `where` argument doesn't exist, create a new BiddingCategory with this data.
     */
    create: XOR<BiddingCategoryCreateInput, BiddingCategoryUncheckedCreateInput>
    /**
     * In case the BiddingCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BiddingCategoryUpdateInput, BiddingCategoryUncheckedUpdateInput>
  }

  /**
   * BiddingCategory delete
   */
  export type BiddingCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BiddingCategory
     */
    select?: BiddingCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiddingCategoryInclude<ExtArgs> | null
    /**
     * Filter which BiddingCategory to delete.
     */
    where: BiddingCategoryWhereUniqueInput
  }

  /**
   * BiddingCategory deleteMany
   */
  export type BiddingCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BiddingCategories to delete
     */
    where?: BiddingCategoryWhereInput
  }

  /**
   * BiddingCategory without action
   */
  export type BiddingCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BiddingCategory
     */
    select?: BiddingCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiddingCategoryInclude<ExtArgs> | null
  }


  /**
   * Model SupplierCategory
   */

  export type AggregateSupplierCategory = {
    _count: SupplierCategoryCountAggregateOutputType | null
    _min: SupplierCategoryMinAggregateOutputType | null
    _max: SupplierCategoryMaxAggregateOutputType | null
  }

  export type SupplierCategoryMinAggregateOutputType = {
    id: string | null
    supplierId: string | null
    categoryId: string | null
    createdAt: Date | null
  }

  export type SupplierCategoryMaxAggregateOutputType = {
    id: string | null
    supplierId: string | null
    categoryId: string | null
    createdAt: Date | null
  }

  export type SupplierCategoryCountAggregateOutputType = {
    id: number
    supplierId: number
    categoryId: number
    createdAt: number
    _all: number
  }


  export type SupplierCategoryMinAggregateInputType = {
    id?: true
    supplierId?: true
    categoryId?: true
    createdAt?: true
  }

  export type SupplierCategoryMaxAggregateInputType = {
    id?: true
    supplierId?: true
    categoryId?: true
    createdAt?: true
  }

  export type SupplierCategoryCountAggregateInputType = {
    id?: true
    supplierId?: true
    categoryId?: true
    createdAt?: true
    _all?: true
  }

  export type SupplierCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SupplierCategory to aggregate.
     */
    where?: SupplierCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SupplierCategories to fetch.
     */
    orderBy?: SupplierCategoryOrderByWithRelationInput | SupplierCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SupplierCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SupplierCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SupplierCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SupplierCategories
    **/
    _count?: true | SupplierCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SupplierCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SupplierCategoryMaxAggregateInputType
  }

  export type GetSupplierCategoryAggregateType<T extends SupplierCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateSupplierCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSupplierCategory[P]>
      : GetScalarType<T[P], AggregateSupplierCategory[P]>
  }




  export type SupplierCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SupplierCategoryWhereInput
    orderBy?: SupplierCategoryOrderByWithAggregationInput | SupplierCategoryOrderByWithAggregationInput[]
    by: SupplierCategoryScalarFieldEnum[] | SupplierCategoryScalarFieldEnum
    having?: SupplierCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SupplierCategoryCountAggregateInputType | true
    _min?: SupplierCategoryMinAggregateInputType
    _max?: SupplierCategoryMaxAggregateInputType
  }

  export type SupplierCategoryGroupByOutputType = {
    id: string
    supplierId: string
    categoryId: string
    createdAt: Date
    _count: SupplierCategoryCountAggregateOutputType | null
    _min: SupplierCategoryMinAggregateOutputType | null
    _max: SupplierCategoryMaxAggregateOutputType | null
  }

  type GetSupplierCategoryGroupByPayload<T extends SupplierCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SupplierCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SupplierCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SupplierCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], SupplierCategoryGroupByOutputType[P]>
        }
      >
    >


  export type SupplierCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    supplierId?: boolean
    categoryId?: boolean
    createdAt?: boolean
    supplier?: boolean | SupplierDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["supplierCategory"]>

  export type SupplierCategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    supplierId?: boolean
    categoryId?: boolean
    createdAt?: boolean
    supplier?: boolean | SupplierDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["supplierCategory"]>

  export type SupplierCategorySelectScalar = {
    id?: boolean
    supplierId?: boolean
    categoryId?: boolean
    createdAt?: boolean
  }

  export type SupplierCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    supplier?: boolean | SupplierDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }
  export type SupplierCategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    supplier?: boolean | SupplierDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }

  export type $SupplierCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SupplierCategory"
    objects: {
      supplier: Prisma.$SupplierPayload<ExtArgs>
      category: Prisma.$CategoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      supplierId: string
      categoryId: string
      createdAt: Date
    }, ExtArgs["result"]["supplierCategory"]>
    composites: {}
  }

  type SupplierCategoryGetPayload<S extends boolean | null | undefined | SupplierCategoryDefaultArgs> = $Result.GetResult<Prisma.$SupplierCategoryPayload, S>

  type SupplierCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SupplierCategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SupplierCategoryCountAggregateInputType | true
    }

  export interface SupplierCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SupplierCategory'], meta: { name: 'SupplierCategory' } }
    /**
     * Find zero or one SupplierCategory that matches the filter.
     * @param {SupplierCategoryFindUniqueArgs} args - Arguments to find a SupplierCategory
     * @example
     * // Get one SupplierCategory
     * const supplierCategory = await prisma.supplierCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SupplierCategoryFindUniqueArgs>(args: SelectSubset<T, SupplierCategoryFindUniqueArgs<ExtArgs>>): Prisma__SupplierCategoryClient<$Result.GetResult<Prisma.$SupplierCategoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SupplierCategory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SupplierCategoryFindUniqueOrThrowArgs} args - Arguments to find a SupplierCategory
     * @example
     * // Get one SupplierCategory
     * const supplierCategory = await prisma.supplierCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SupplierCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, SupplierCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SupplierCategoryClient<$Result.GetResult<Prisma.$SupplierCategoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SupplierCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierCategoryFindFirstArgs} args - Arguments to find a SupplierCategory
     * @example
     * // Get one SupplierCategory
     * const supplierCategory = await prisma.supplierCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SupplierCategoryFindFirstArgs>(args?: SelectSubset<T, SupplierCategoryFindFirstArgs<ExtArgs>>): Prisma__SupplierCategoryClient<$Result.GetResult<Prisma.$SupplierCategoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SupplierCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierCategoryFindFirstOrThrowArgs} args - Arguments to find a SupplierCategory
     * @example
     * // Get one SupplierCategory
     * const supplierCategory = await prisma.supplierCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SupplierCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, SupplierCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__SupplierCategoryClient<$Result.GetResult<Prisma.$SupplierCategoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SupplierCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SupplierCategories
     * const supplierCategories = await prisma.supplierCategory.findMany()
     * 
     * // Get first 10 SupplierCategories
     * const supplierCategories = await prisma.supplierCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const supplierCategoryWithIdOnly = await prisma.supplierCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SupplierCategoryFindManyArgs>(args?: SelectSubset<T, SupplierCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupplierCategoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SupplierCategory.
     * @param {SupplierCategoryCreateArgs} args - Arguments to create a SupplierCategory.
     * @example
     * // Create one SupplierCategory
     * const SupplierCategory = await prisma.supplierCategory.create({
     *   data: {
     *     // ... data to create a SupplierCategory
     *   }
     * })
     * 
     */
    create<T extends SupplierCategoryCreateArgs>(args: SelectSubset<T, SupplierCategoryCreateArgs<ExtArgs>>): Prisma__SupplierCategoryClient<$Result.GetResult<Prisma.$SupplierCategoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SupplierCategories.
     * @param {SupplierCategoryCreateManyArgs} args - Arguments to create many SupplierCategories.
     * @example
     * // Create many SupplierCategories
     * const supplierCategory = await prisma.supplierCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SupplierCategoryCreateManyArgs>(args?: SelectSubset<T, SupplierCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SupplierCategories and returns the data saved in the database.
     * @param {SupplierCategoryCreateManyAndReturnArgs} args - Arguments to create many SupplierCategories.
     * @example
     * // Create many SupplierCategories
     * const supplierCategory = await prisma.supplierCategory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SupplierCategories and only return the `id`
     * const supplierCategoryWithIdOnly = await prisma.supplierCategory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SupplierCategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, SupplierCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupplierCategoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SupplierCategory.
     * @param {SupplierCategoryDeleteArgs} args - Arguments to delete one SupplierCategory.
     * @example
     * // Delete one SupplierCategory
     * const SupplierCategory = await prisma.supplierCategory.delete({
     *   where: {
     *     // ... filter to delete one SupplierCategory
     *   }
     * })
     * 
     */
    delete<T extends SupplierCategoryDeleteArgs>(args: SelectSubset<T, SupplierCategoryDeleteArgs<ExtArgs>>): Prisma__SupplierCategoryClient<$Result.GetResult<Prisma.$SupplierCategoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SupplierCategory.
     * @param {SupplierCategoryUpdateArgs} args - Arguments to update one SupplierCategory.
     * @example
     * // Update one SupplierCategory
     * const supplierCategory = await prisma.supplierCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SupplierCategoryUpdateArgs>(args: SelectSubset<T, SupplierCategoryUpdateArgs<ExtArgs>>): Prisma__SupplierCategoryClient<$Result.GetResult<Prisma.$SupplierCategoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SupplierCategories.
     * @param {SupplierCategoryDeleteManyArgs} args - Arguments to filter SupplierCategories to delete.
     * @example
     * // Delete a few SupplierCategories
     * const { count } = await prisma.supplierCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SupplierCategoryDeleteManyArgs>(args?: SelectSubset<T, SupplierCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SupplierCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SupplierCategories
     * const supplierCategory = await prisma.supplierCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SupplierCategoryUpdateManyArgs>(args: SelectSubset<T, SupplierCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SupplierCategory.
     * @param {SupplierCategoryUpsertArgs} args - Arguments to update or create a SupplierCategory.
     * @example
     * // Update or create a SupplierCategory
     * const supplierCategory = await prisma.supplierCategory.upsert({
     *   create: {
     *     // ... data to create a SupplierCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SupplierCategory we want to update
     *   }
     * })
     */
    upsert<T extends SupplierCategoryUpsertArgs>(args: SelectSubset<T, SupplierCategoryUpsertArgs<ExtArgs>>): Prisma__SupplierCategoryClient<$Result.GetResult<Prisma.$SupplierCategoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SupplierCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierCategoryCountArgs} args - Arguments to filter SupplierCategories to count.
     * @example
     * // Count the number of SupplierCategories
     * const count = await prisma.supplierCategory.count({
     *   where: {
     *     // ... the filter for the SupplierCategories we want to count
     *   }
     * })
    **/
    count<T extends SupplierCategoryCountArgs>(
      args?: Subset<T, SupplierCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SupplierCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SupplierCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SupplierCategoryAggregateArgs>(args: Subset<T, SupplierCategoryAggregateArgs>): Prisma.PrismaPromise<GetSupplierCategoryAggregateType<T>>

    /**
     * Group by SupplierCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SupplierCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SupplierCategoryGroupByArgs['orderBy'] }
        : { orderBy?: SupplierCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SupplierCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSupplierCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SupplierCategory model
   */
  readonly fields: SupplierCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SupplierCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SupplierCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    supplier<T extends SupplierDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SupplierDefaultArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SupplierCategory model
   */ 
  interface SupplierCategoryFieldRefs {
    readonly id: FieldRef<"SupplierCategory", 'String'>
    readonly supplierId: FieldRef<"SupplierCategory", 'String'>
    readonly categoryId: FieldRef<"SupplierCategory", 'String'>
    readonly createdAt: FieldRef<"SupplierCategory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SupplierCategory findUnique
   */
  export type SupplierCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierCategory
     */
    select?: SupplierCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierCategoryInclude<ExtArgs> | null
    /**
     * Filter, which SupplierCategory to fetch.
     */
    where: SupplierCategoryWhereUniqueInput
  }

  /**
   * SupplierCategory findUniqueOrThrow
   */
  export type SupplierCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierCategory
     */
    select?: SupplierCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierCategoryInclude<ExtArgs> | null
    /**
     * Filter, which SupplierCategory to fetch.
     */
    where: SupplierCategoryWhereUniqueInput
  }

  /**
   * SupplierCategory findFirst
   */
  export type SupplierCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierCategory
     */
    select?: SupplierCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierCategoryInclude<ExtArgs> | null
    /**
     * Filter, which SupplierCategory to fetch.
     */
    where?: SupplierCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SupplierCategories to fetch.
     */
    orderBy?: SupplierCategoryOrderByWithRelationInput | SupplierCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SupplierCategories.
     */
    cursor?: SupplierCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SupplierCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SupplierCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SupplierCategories.
     */
    distinct?: SupplierCategoryScalarFieldEnum | SupplierCategoryScalarFieldEnum[]
  }

  /**
   * SupplierCategory findFirstOrThrow
   */
  export type SupplierCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierCategory
     */
    select?: SupplierCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierCategoryInclude<ExtArgs> | null
    /**
     * Filter, which SupplierCategory to fetch.
     */
    where?: SupplierCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SupplierCategories to fetch.
     */
    orderBy?: SupplierCategoryOrderByWithRelationInput | SupplierCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SupplierCategories.
     */
    cursor?: SupplierCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SupplierCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SupplierCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SupplierCategories.
     */
    distinct?: SupplierCategoryScalarFieldEnum | SupplierCategoryScalarFieldEnum[]
  }

  /**
   * SupplierCategory findMany
   */
  export type SupplierCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierCategory
     */
    select?: SupplierCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierCategoryInclude<ExtArgs> | null
    /**
     * Filter, which SupplierCategories to fetch.
     */
    where?: SupplierCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SupplierCategories to fetch.
     */
    orderBy?: SupplierCategoryOrderByWithRelationInput | SupplierCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SupplierCategories.
     */
    cursor?: SupplierCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SupplierCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SupplierCategories.
     */
    skip?: number
    distinct?: SupplierCategoryScalarFieldEnum | SupplierCategoryScalarFieldEnum[]
  }

  /**
   * SupplierCategory create
   */
  export type SupplierCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierCategory
     */
    select?: SupplierCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a SupplierCategory.
     */
    data: XOR<SupplierCategoryCreateInput, SupplierCategoryUncheckedCreateInput>
  }

  /**
   * SupplierCategory createMany
   */
  export type SupplierCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SupplierCategories.
     */
    data: SupplierCategoryCreateManyInput | SupplierCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SupplierCategory createManyAndReturn
   */
  export type SupplierCategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierCategory
     */
    select?: SupplierCategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SupplierCategories.
     */
    data: SupplierCategoryCreateManyInput | SupplierCategoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierCategoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SupplierCategory update
   */
  export type SupplierCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierCategory
     */
    select?: SupplierCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a SupplierCategory.
     */
    data: XOR<SupplierCategoryUpdateInput, SupplierCategoryUncheckedUpdateInput>
    /**
     * Choose, which SupplierCategory to update.
     */
    where: SupplierCategoryWhereUniqueInput
  }

  /**
   * SupplierCategory updateMany
   */
  export type SupplierCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SupplierCategories.
     */
    data: XOR<SupplierCategoryUpdateManyMutationInput, SupplierCategoryUncheckedUpdateManyInput>
    /**
     * Filter which SupplierCategories to update
     */
    where?: SupplierCategoryWhereInput
  }

  /**
   * SupplierCategory upsert
   */
  export type SupplierCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierCategory
     */
    select?: SupplierCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the SupplierCategory to update in case it exists.
     */
    where: SupplierCategoryWhereUniqueInput
    /**
     * In case the SupplierCategory found by the `where` argument doesn't exist, create a new SupplierCategory with this data.
     */
    create: XOR<SupplierCategoryCreateInput, SupplierCategoryUncheckedCreateInput>
    /**
     * In case the SupplierCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SupplierCategoryUpdateInput, SupplierCategoryUncheckedUpdateInput>
  }

  /**
   * SupplierCategory delete
   */
  export type SupplierCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierCategory
     */
    select?: SupplierCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierCategoryInclude<ExtArgs> | null
    /**
     * Filter which SupplierCategory to delete.
     */
    where: SupplierCategoryWhereUniqueInput
  }

  /**
   * SupplierCategory deleteMany
   */
  export type SupplierCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SupplierCategories to delete
     */
    where?: SupplierCategoryWhereInput
  }

  /**
   * SupplierCategory without action
   */
  export type SupplierCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierCategory
     */
    select?: SupplierCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierCategoryInclude<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: string | null
    userId: string | null
    action: string | null
    resource: string | null
    resourceId: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    action: string | null
    resource: string | null
    resourceId: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    userId: number
    action: number
    resource: number
    resourceId: number
    oldValues: number
    newValues: number
    ipAddress: number
    userAgent: number
    createdAt: number
    _all: number
  }


  export type AuditLogMinAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    resource?: true
    resourceId?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    resource?: true
    resourceId?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    resource?: true
    resourceId?: true
    oldValues?: true
    newValues?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: string
    userId: string
    action: string
    resource: string
    resourceId: string | null
    oldValues: JsonValue | null
    newValues: JsonValue | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    resource?: boolean
    resourceId?: boolean
    oldValues?: boolean
    newValues?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    resource?: boolean
    resourceId?: boolean
    oldValues?: boolean
    newValues?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    userId?: boolean
    action?: boolean
    resource?: boolean
    resourceId?: boolean
    oldValues?: boolean
    newValues?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
  }

  export type AuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AuditLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      action: string
      resource: string
      resourceId: string | null
      oldValues: Prisma.JsonValue | null
      newValues: Prisma.JsonValue | null
      ipAddress: string | null
      userAgent: string | null
      createdAt: Date
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */ 
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'String'>
    readonly userId: FieldRef<"AuditLog", 'String'>
    readonly action: FieldRef<"AuditLog", 'String'>
    readonly resource: FieldRef<"AuditLog", 'String'>
    readonly resourceId: FieldRef<"AuditLog", 'String'>
    readonly oldValues: FieldRef<"AuditLog", 'Json'>
    readonly newValues: FieldRef<"AuditLog", 'Json'>
    readonly ipAddress: FieldRef<"AuditLog", 'String'>
    readonly userAgent: FieldRef<"AuditLog", 'String'>
    readonly createdAt: FieldRef<"AuditLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
  }


  /**
   * Model UserSession
   */

  export type AggregateUserSession = {
    _count: UserSessionCountAggregateOutputType | null
    _min: UserSessionMinAggregateOutputType | null
    _max: UserSessionMaxAggregateOutputType | null
  }

  export type UserSessionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    token: string | null
    ipAddress: string | null
    userAgent: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserSessionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    token: string | null
    ipAddress: string | null
    userAgent: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserSessionCountAggregateOutputType = {
    id: number
    userId: number
    token: number
    ipAddress: number
    userAgent: number
    expiresAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserSessionMinAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    ipAddress?: true
    userAgent?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserSessionMaxAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    ipAddress?: true
    userAgent?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserSessionCountAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    ipAddress?: true
    userAgent?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSession to aggregate.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserSessions
    **/
    _count?: true | UserSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserSessionMaxAggregateInputType
  }

  export type GetUserSessionAggregateType<T extends UserSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateUserSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserSession[P]>
      : GetScalarType<T[P], AggregateUserSession[P]>
  }




  export type UserSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSessionWhereInput
    orderBy?: UserSessionOrderByWithAggregationInput | UserSessionOrderByWithAggregationInput[]
    by: UserSessionScalarFieldEnum[] | UserSessionScalarFieldEnum
    having?: UserSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserSessionCountAggregateInputType | true
    _min?: UserSessionMinAggregateInputType
    _max?: UserSessionMaxAggregateInputType
  }

  export type UserSessionGroupByOutputType = {
    id: string
    userId: string
    token: string
    ipAddress: string | null
    userAgent: string | null
    expiresAt: Date
    createdAt: Date
    updatedAt: Date
    _count: UserSessionCountAggregateOutputType | null
    _min: UserSessionMinAggregateOutputType | null
    _max: UserSessionMaxAggregateOutputType | null
  }

  type GetUserSessionGroupByPayload<T extends UserSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserSessionGroupByOutputType[P]>
            : GetScalarType<T[P], UserSessionGroupByOutputType[P]>
        }
      >
    >


  export type UserSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSession"]>

  export type UserSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSession"]>

  export type UserSessionSelectScalar = {
    id?: boolean
    userId?: boolean
    token?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserSession"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      token: string
      ipAddress: string | null
      userAgent: string | null
      expiresAt: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userSession"]>
    composites: {}
  }

  type UserSessionGetPayload<S extends boolean | null | undefined | UserSessionDefaultArgs> = $Result.GetResult<Prisma.$UserSessionPayload, S>

  type UserSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserSessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserSessionCountAggregateInputType | true
    }

  export interface UserSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserSession'], meta: { name: 'UserSession' } }
    /**
     * Find zero or one UserSession that matches the filter.
     * @param {UserSessionFindUniqueArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserSessionFindUniqueArgs>(args: SelectSubset<T, UserSessionFindUniqueArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserSession that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserSessionFindUniqueOrThrowArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, UserSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionFindFirstArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserSessionFindFirstArgs>(args?: SelectSubset<T, UserSessionFindFirstArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionFindFirstOrThrowArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, UserSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserSessions
     * const userSessions = await prisma.userSession.findMany()
     * 
     * // Get first 10 UserSessions
     * const userSessions = await prisma.userSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userSessionWithIdOnly = await prisma.userSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserSessionFindManyArgs>(args?: SelectSubset<T, UserSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserSession.
     * @param {UserSessionCreateArgs} args - Arguments to create a UserSession.
     * @example
     * // Create one UserSession
     * const UserSession = await prisma.userSession.create({
     *   data: {
     *     // ... data to create a UserSession
     *   }
     * })
     * 
     */
    create<T extends UserSessionCreateArgs>(args: SelectSubset<T, UserSessionCreateArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserSessions.
     * @param {UserSessionCreateManyArgs} args - Arguments to create many UserSessions.
     * @example
     * // Create many UserSessions
     * const userSession = await prisma.userSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserSessionCreateManyArgs>(args?: SelectSubset<T, UserSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserSessions and returns the data saved in the database.
     * @param {UserSessionCreateManyAndReturnArgs} args - Arguments to create many UserSessions.
     * @example
     * // Create many UserSessions
     * const userSession = await prisma.userSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserSessions and only return the `id`
     * const userSessionWithIdOnly = await prisma.userSession.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, UserSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserSession.
     * @param {UserSessionDeleteArgs} args - Arguments to delete one UserSession.
     * @example
     * // Delete one UserSession
     * const UserSession = await prisma.userSession.delete({
     *   where: {
     *     // ... filter to delete one UserSession
     *   }
     * })
     * 
     */
    delete<T extends UserSessionDeleteArgs>(args: SelectSubset<T, UserSessionDeleteArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserSession.
     * @param {UserSessionUpdateArgs} args - Arguments to update one UserSession.
     * @example
     * // Update one UserSession
     * const userSession = await prisma.userSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserSessionUpdateArgs>(args: SelectSubset<T, UserSessionUpdateArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserSessions.
     * @param {UserSessionDeleteManyArgs} args - Arguments to filter UserSessions to delete.
     * @example
     * // Delete a few UserSessions
     * const { count } = await prisma.userSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserSessionDeleteManyArgs>(args?: SelectSubset<T, UserSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserSessions
     * const userSession = await prisma.userSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserSessionUpdateManyArgs>(args: SelectSubset<T, UserSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserSession.
     * @param {UserSessionUpsertArgs} args - Arguments to update or create a UserSession.
     * @example
     * // Update or create a UserSession
     * const userSession = await prisma.userSession.upsert({
     *   create: {
     *     // ... data to create a UserSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserSession we want to update
     *   }
     * })
     */
    upsert<T extends UserSessionUpsertArgs>(args: SelectSubset<T, UserSessionUpsertArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionCountArgs} args - Arguments to filter UserSessions to count.
     * @example
     * // Count the number of UserSessions
     * const count = await prisma.userSession.count({
     *   where: {
     *     // ... the filter for the UserSessions we want to count
     *   }
     * })
    **/
    count<T extends UserSessionCountArgs>(
      args?: Subset<T, UserSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserSessionAggregateArgs>(args: Subset<T, UserSessionAggregateArgs>): Prisma.PrismaPromise<GetUserSessionAggregateType<T>>

    /**
     * Group by UserSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserSessionGroupByArgs['orderBy'] }
        : { orderBy?: UserSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserSession model
   */
  readonly fields: UserSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserSession model
   */ 
  interface UserSessionFieldRefs {
    readonly id: FieldRef<"UserSession", 'String'>
    readonly userId: FieldRef<"UserSession", 'String'>
    readonly token: FieldRef<"UserSession", 'String'>
    readonly ipAddress: FieldRef<"UserSession", 'String'>
    readonly userAgent: FieldRef<"UserSession", 'String'>
    readonly expiresAt: FieldRef<"UserSession", 'DateTime'>
    readonly createdAt: FieldRef<"UserSession", 'DateTime'>
    readonly updatedAt: FieldRef<"UserSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserSession findUnique
   */
  export type UserSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession findUniqueOrThrow
   */
  export type UserSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession findFirst
   */
  export type UserSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSessions.
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSessions.
     */
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * UserSession findFirstOrThrow
   */
  export type UserSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSessions.
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSessions.
     */
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * UserSession findMany
   */
  export type UserSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSessions to fetch.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserSessions.
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * UserSession create
   */
  export type UserSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a UserSession.
     */
    data: XOR<UserSessionCreateInput, UserSessionUncheckedCreateInput>
  }

  /**
   * UserSession createMany
   */
  export type UserSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserSessions.
     */
    data: UserSessionCreateManyInput | UserSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserSession createManyAndReturn
   */
  export type UserSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserSessions.
     */
    data: UserSessionCreateManyInput | UserSessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSession update
   */
  export type UserSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a UserSession.
     */
    data: XOR<UserSessionUpdateInput, UserSessionUncheckedUpdateInput>
    /**
     * Choose, which UserSession to update.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession updateMany
   */
  export type UserSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserSessions.
     */
    data: XOR<UserSessionUpdateManyMutationInput, UserSessionUncheckedUpdateManyInput>
    /**
     * Filter which UserSessions to update
     */
    where?: UserSessionWhereInput
  }

  /**
   * UserSession upsert
   */
  export type UserSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the UserSession to update in case it exists.
     */
    where: UserSessionWhereUniqueInput
    /**
     * In case the UserSession found by the `where` argument doesn't exist, create a new UserSession with this data.
     */
    create: XOR<UserSessionCreateInput, UserSessionUncheckedCreateInput>
    /**
     * In case the UserSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserSessionUpdateInput, UserSessionUncheckedUpdateInput>
  }

  /**
   * UserSession delete
   */
  export type UserSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter which UserSession to delete.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession deleteMany
   */
  export type UserSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSessions to delete
     */
    where?: UserSessionWhereInput
  }

  /**
   * UserSession without action
   */
  export type UserSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
  }


  /**
   * Model SystemConfig
   */

  export type AggregateSystemConfig = {
    _count: SystemConfigCountAggregateOutputType | null
    _min: SystemConfigMinAggregateOutputType | null
    _max: SystemConfigMaxAggregateOutputType | null
  }

  export type SystemConfigMinAggregateOutputType = {
    id: string | null
    key: string | null
    value: string | null
    type: string | null
    description: string | null
    isPublic: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SystemConfigMaxAggregateOutputType = {
    id: string | null
    key: string | null
    value: string | null
    type: string | null
    description: string | null
    isPublic: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SystemConfigCountAggregateOutputType = {
    id: number
    key: number
    value: number
    type: number
    description: number
    isPublic: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SystemConfigMinAggregateInputType = {
    id?: true
    key?: true
    value?: true
    type?: true
    description?: true
    isPublic?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SystemConfigMaxAggregateInputType = {
    id?: true
    key?: true
    value?: true
    type?: true
    description?: true
    isPublic?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SystemConfigCountAggregateInputType = {
    id?: true
    key?: true
    value?: true
    type?: true
    description?: true
    isPublic?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SystemConfigAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemConfig to aggregate.
     */
    where?: SystemConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemConfigs to fetch.
     */
    orderBy?: SystemConfigOrderByWithRelationInput | SystemConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SystemConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SystemConfigs
    **/
    _count?: true | SystemConfigCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SystemConfigMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SystemConfigMaxAggregateInputType
  }

  export type GetSystemConfigAggregateType<T extends SystemConfigAggregateArgs> = {
        [P in keyof T & keyof AggregateSystemConfig]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSystemConfig[P]>
      : GetScalarType<T[P], AggregateSystemConfig[P]>
  }




  export type SystemConfigGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SystemConfigWhereInput
    orderBy?: SystemConfigOrderByWithAggregationInput | SystemConfigOrderByWithAggregationInput[]
    by: SystemConfigScalarFieldEnum[] | SystemConfigScalarFieldEnum
    having?: SystemConfigScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SystemConfigCountAggregateInputType | true
    _min?: SystemConfigMinAggregateInputType
    _max?: SystemConfigMaxAggregateInputType
  }

  export type SystemConfigGroupByOutputType = {
    id: string
    key: string
    value: string
    type: string
    description: string | null
    isPublic: boolean
    createdAt: Date
    updatedAt: Date
    _count: SystemConfigCountAggregateOutputType | null
    _min: SystemConfigMinAggregateOutputType | null
    _max: SystemConfigMaxAggregateOutputType | null
  }

  type GetSystemConfigGroupByPayload<T extends SystemConfigGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SystemConfigGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SystemConfigGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SystemConfigGroupByOutputType[P]>
            : GetScalarType<T[P], SystemConfigGroupByOutputType[P]>
        }
      >
    >


  export type SystemConfigSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    type?: boolean
    description?: boolean
    isPublic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["systemConfig"]>

  export type SystemConfigSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    type?: boolean
    description?: boolean
    isPublic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["systemConfig"]>

  export type SystemConfigSelectScalar = {
    id?: boolean
    key?: boolean
    value?: boolean
    type?: boolean
    description?: boolean
    isPublic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $SystemConfigPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SystemConfig"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      key: string
      value: string
      type: string
      description: string | null
      isPublic: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["systemConfig"]>
    composites: {}
  }

  type SystemConfigGetPayload<S extends boolean | null | undefined | SystemConfigDefaultArgs> = $Result.GetResult<Prisma.$SystemConfigPayload, S>

  type SystemConfigCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SystemConfigFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SystemConfigCountAggregateInputType | true
    }

  export interface SystemConfigDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SystemConfig'], meta: { name: 'SystemConfig' } }
    /**
     * Find zero or one SystemConfig that matches the filter.
     * @param {SystemConfigFindUniqueArgs} args - Arguments to find a SystemConfig
     * @example
     * // Get one SystemConfig
     * const systemConfig = await prisma.systemConfig.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SystemConfigFindUniqueArgs>(args: SelectSubset<T, SystemConfigFindUniqueArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SystemConfig that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SystemConfigFindUniqueOrThrowArgs} args - Arguments to find a SystemConfig
     * @example
     * // Get one SystemConfig
     * const systemConfig = await prisma.systemConfig.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SystemConfigFindUniqueOrThrowArgs>(args: SelectSubset<T, SystemConfigFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SystemConfig that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigFindFirstArgs} args - Arguments to find a SystemConfig
     * @example
     * // Get one SystemConfig
     * const systemConfig = await prisma.systemConfig.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SystemConfigFindFirstArgs>(args?: SelectSubset<T, SystemConfigFindFirstArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SystemConfig that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigFindFirstOrThrowArgs} args - Arguments to find a SystemConfig
     * @example
     * // Get one SystemConfig
     * const systemConfig = await prisma.systemConfig.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SystemConfigFindFirstOrThrowArgs>(args?: SelectSubset<T, SystemConfigFindFirstOrThrowArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SystemConfigs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SystemConfigs
     * const systemConfigs = await prisma.systemConfig.findMany()
     * 
     * // Get first 10 SystemConfigs
     * const systemConfigs = await prisma.systemConfig.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const systemConfigWithIdOnly = await prisma.systemConfig.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SystemConfigFindManyArgs>(args?: SelectSubset<T, SystemConfigFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SystemConfig.
     * @param {SystemConfigCreateArgs} args - Arguments to create a SystemConfig.
     * @example
     * // Create one SystemConfig
     * const SystemConfig = await prisma.systemConfig.create({
     *   data: {
     *     // ... data to create a SystemConfig
     *   }
     * })
     * 
     */
    create<T extends SystemConfigCreateArgs>(args: SelectSubset<T, SystemConfigCreateArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SystemConfigs.
     * @param {SystemConfigCreateManyArgs} args - Arguments to create many SystemConfigs.
     * @example
     * // Create many SystemConfigs
     * const systemConfig = await prisma.systemConfig.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SystemConfigCreateManyArgs>(args?: SelectSubset<T, SystemConfigCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SystemConfigs and returns the data saved in the database.
     * @param {SystemConfigCreateManyAndReturnArgs} args - Arguments to create many SystemConfigs.
     * @example
     * // Create many SystemConfigs
     * const systemConfig = await prisma.systemConfig.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SystemConfigs and only return the `id`
     * const systemConfigWithIdOnly = await prisma.systemConfig.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SystemConfigCreateManyAndReturnArgs>(args?: SelectSubset<T, SystemConfigCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SystemConfig.
     * @param {SystemConfigDeleteArgs} args - Arguments to delete one SystemConfig.
     * @example
     * // Delete one SystemConfig
     * const SystemConfig = await prisma.systemConfig.delete({
     *   where: {
     *     // ... filter to delete one SystemConfig
     *   }
     * })
     * 
     */
    delete<T extends SystemConfigDeleteArgs>(args: SelectSubset<T, SystemConfigDeleteArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SystemConfig.
     * @param {SystemConfigUpdateArgs} args - Arguments to update one SystemConfig.
     * @example
     * // Update one SystemConfig
     * const systemConfig = await prisma.systemConfig.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SystemConfigUpdateArgs>(args: SelectSubset<T, SystemConfigUpdateArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SystemConfigs.
     * @param {SystemConfigDeleteManyArgs} args - Arguments to filter SystemConfigs to delete.
     * @example
     * // Delete a few SystemConfigs
     * const { count } = await prisma.systemConfig.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SystemConfigDeleteManyArgs>(args?: SelectSubset<T, SystemConfigDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SystemConfigs
     * const systemConfig = await prisma.systemConfig.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SystemConfigUpdateManyArgs>(args: SelectSubset<T, SystemConfigUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SystemConfig.
     * @param {SystemConfigUpsertArgs} args - Arguments to update or create a SystemConfig.
     * @example
     * // Update or create a SystemConfig
     * const systemConfig = await prisma.systemConfig.upsert({
     *   create: {
     *     // ... data to create a SystemConfig
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SystemConfig we want to update
     *   }
     * })
     */
    upsert<T extends SystemConfigUpsertArgs>(args: SelectSubset<T, SystemConfigUpsertArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SystemConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigCountArgs} args - Arguments to filter SystemConfigs to count.
     * @example
     * // Count the number of SystemConfigs
     * const count = await prisma.systemConfig.count({
     *   where: {
     *     // ... the filter for the SystemConfigs we want to count
     *   }
     * })
    **/
    count<T extends SystemConfigCountArgs>(
      args?: Subset<T, SystemConfigCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SystemConfigCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SystemConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SystemConfigAggregateArgs>(args: Subset<T, SystemConfigAggregateArgs>): Prisma.PrismaPromise<GetSystemConfigAggregateType<T>>

    /**
     * Group by SystemConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SystemConfigGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SystemConfigGroupByArgs['orderBy'] }
        : { orderBy?: SystemConfigGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SystemConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSystemConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SystemConfig model
   */
  readonly fields: SystemConfigFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SystemConfig.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SystemConfigClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SystemConfig model
   */ 
  interface SystemConfigFieldRefs {
    readonly id: FieldRef<"SystemConfig", 'String'>
    readonly key: FieldRef<"SystemConfig", 'String'>
    readonly value: FieldRef<"SystemConfig", 'String'>
    readonly type: FieldRef<"SystemConfig", 'String'>
    readonly description: FieldRef<"SystemConfig", 'String'>
    readonly isPublic: FieldRef<"SystemConfig", 'Boolean'>
    readonly createdAt: FieldRef<"SystemConfig", 'DateTime'>
    readonly updatedAt: FieldRef<"SystemConfig", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SystemConfig findUnique
   */
  export type SystemConfigFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Filter, which SystemConfig to fetch.
     */
    where: SystemConfigWhereUniqueInput
  }

  /**
   * SystemConfig findUniqueOrThrow
   */
  export type SystemConfigFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Filter, which SystemConfig to fetch.
     */
    where: SystemConfigWhereUniqueInput
  }

  /**
   * SystemConfig findFirst
   */
  export type SystemConfigFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Filter, which SystemConfig to fetch.
     */
    where?: SystemConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemConfigs to fetch.
     */
    orderBy?: SystemConfigOrderByWithRelationInput | SystemConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemConfigs.
     */
    cursor?: SystemConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemConfigs.
     */
    distinct?: SystemConfigScalarFieldEnum | SystemConfigScalarFieldEnum[]
  }

  /**
   * SystemConfig findFirstOrThrow
   */
  export type SystemConfigFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Filter, which SystemConfig to fetch.
     */
    where?: SystemConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemConfigs to fetch.
     */
    orderBy?: SystemConfigOrderByWithRelationInput | SystemConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemConfigs.
     */
    cursor?: SystemConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemConfigs.
     */
    distinct?: SystemConfigScalarFieldEnum | SystemConfigScalarFieldEnum[]
  }

  /**
   * SystemConfig findMany
   */
  export type SystemConfigFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Filter, which SystemConfigs to fetch.
     */
    where?: SystemConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemConfigs to fetch.
     */
    orderBy?: SystemConfigOrderByWithRelationInput | SystemConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SystemConfigs.
     */
    cursor?: SystemConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemConfigs.
     */
    skip?: number
    distinct?: SystemConfigScalarFieldEnum | SystemConfigScalarFieldEnum[]
  }

  /**
   * SystemConfig create
   */
  export type SystemConfigCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * The data needed to create a SystemConfig.
     */
    data: XOR<SystemConfigCreateInput, SystemConfigUncheckedCreateInput>
  }

  /**
   * SystemConfig createMany
   */
  export type SystemConfigCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SystemConfigs.
     */
    data: SystemConfigCreateManyInput | SystemConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SystemConfig createManyAndReturn
   */
  export type SystemConfigCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SystemConfigs.
     */
    data: SystemConfigCreateManyInput | SystemConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SystemConfig update
   */
  export type SystemConfigUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * The data needed to update a SystemConfig.
     */
    data: XOR<SystemConfigUpdateInput, SystemConfigUncheckedUpdateInput>
    /**
     * Choose, which SystemConfig to update.
     */
    where: SystemConfigWhereUniqueInput
  }

  /**
   * SystemConfig updateMany
   */
  export type SystemConfigUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SystemConfigs.
     */
    data: XOR<SystemConfigUpdateManyMutationInput, SystemConfigUncheckedUpdateManyInput>
    /**
     * Filter which SystemConfigs to update
     */
    where?: SystemConfigWhereInput
  }

  /**
   * SystemConfig upsert
   */
  export type SystemConfigUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * The filter to search for the SystemConfig to update in case it exists.
     */
    where: SystemConfigWhereUniqueInput
    /**
     * In case the SystemConfig found by the `where` argument doesn't exist, create a new SystemConfig with this data.
     */
    create: XOR<SystemConfigCreateInput, SystemConfigUncheckedCreateInput>
    /**
     * In case the SystemConfig was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SystemConfigUpdateInput, SystemConfigUncheckedUpdateInput>
  }

  /**
   * SystemConfig delete
   */
  export type SystemConfigDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Filter which SystemConfig to delete.
     */
    where: SystemConfigWhereUniqueInput
  }

  /**
   * SystemConfig deleteMany
   */
  export type SystemConfigDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemConfigs to delete
     */
    where?: SystemConfigWhereInput
  }

  /**
   * SystemConfig without action
   */
  export type SystemConfigDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    title: string | null
    message: string | null
    type: string | null
    isRead: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    title: string | null
    message: string | null
    type: string | null
    isRead: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    title: number
    message: number
    type: number
    isRead: number
    data: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    message?: true
    type?: true
    isRead?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    message?: true
    type?: true
    isRead?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    message?: true
    type?: true
    isRead?: true
    data?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    userId: string | null
    title: string
    message: string
    type: string
    isRead: boolean
    data: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    isRead?: boolean
    data?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    isRead?: boolean
    data?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    isRead?: boolean
    data?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string | null
      title: string
      message: string
      type: string
      isRead: boolean
      data: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly userId: FieldRef<"Notification", 'String'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'String'>
    readonly isRead: FieldRef<"Notification", 'Boolean'>
    readonly data: FieldRef<"Notification", 'Json'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
    readonly updatedAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
  }


  /**
   * Model UserPermission
   */

  export type AggregateUserPermission = {
    _count: UserPermissionCountAggregateOutputType | null
    _min: UserPermissionMinAggregateOutputType | null
    _max: UserPermissionMaxAggregateOutputType | null
  }

  export type UserPermissionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    permission: $Enums.Permission | null
    grantedBy: string | null
    grantedAt: Date | null
    expiresAt: Date | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserPermissionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    permission: $Enums.Permission | null
    grantedBy: string | null
    grantedAt: Date | null
    expiresAt: Date | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserPermissionCountAggregateOutputType = {
    id: number
    userId: number
    permission: number
    grantedBy: number
    grantedAt: number
    expiresAt: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserPermissionMinAggregateInputType = {
    id?: true
    userId?: true
    permission?: true
    grantedBy?: true
    grantedAt?: true
    expiresAt?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserPermissionMaxAggregateInputType = {
    id?: true
    userId?: true
    permission?: true
    grantedBy?: true
    grantedAt?: true
    expiresAt?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserPermissionCountAggregateInputType = {
    id?: true
    userId?: true
    permission?: true
    grantedBy?: true
    grantedAt?: true
    expiresAt?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserPermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPermission to aggregate.
     */
    where?: UserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPermissions to fetch.
     */
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserPermissions
    **/
    _count?: true | UserPermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserPermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserPermissionMaxAggregateInputType
  }

  export type GetUserPermissionAggregateType<T extends UserPermissionAggregateArgs> = {
        [P in keyof T & keyof AggregateUserPermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserPermission[P]>
      : GetScalarType<T[P], AggregateUserPermission[P]>
  }




  export type UserPermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPermissionWhereInput
    orderBy?: UserPermissionOrderByWithAggregationInput | UserPermissionOrderByWithAggregationInput[]
    by: UserPermissionScalarFieldEnum[] | UserPermissionScalarFieldEnum
    having?: UserPermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserPermissionCountAggregateInputType | true
    _min?: UserPermissionMinAggregateInputType
    _max?: UserPermissionMaxAggregateInputType
  }

  export type UserPermissionGroupByOutputType = {
    id: string
    userId: string
    permission: $Enums.Permission
    grantedBy: string | null
    grantedAt: Date
    expiresAt: Date | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserPermissionCountAggregateOutputType | null
    _min: UserPermissionMinAggregateOutputType | null
    _max: UserPermissionMaxAggregateOutputType | null
  }

  type GetUserPermissionGroupByPayload<T extends UserPermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserPermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserPermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserPermissionGroupByOutputType[P]>
            : GetScalarType<T[P], UserPermissionGroupByOutputType[P]>
        }
      >
    >


  export type UserPermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    permission?: boolean
    grantedBy?: boolean
    grantedAt?: boolean
    expiresAt?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPermission"]>

  export type UserPermissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    permission?: boolean
    grantedBy?: boolean
    grantedAt?: boolean
    expiresAt?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPermission"]>

  export type UserPermissionSelectScalar = {
    id?: boolean
    userId?: boolean
    permission?: boolean
    grantedBy?: boolean
    grantedAt?: boolean
    expiresAt?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserPermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserPermissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserPermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserPermission"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      permission: $Enums.Permission
      grantedBy: string | null
      grantedAt: Date
      expiresAt: Date | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userPermission"]>
    composites: {}
  }

  type UserPermissionGetPayload<S extends boolean | null | undefined | UserPermissionDefaultArgs> = $Result.GetResult<Prisma.$UserPermissionPayload, S>

  type UserPermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserPermissionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserPermissionCountAggregateInputType | true
    }

  export interface UserPermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserPermission'], meta: { name: 'UserPermission' } }
    /**
     * Find zero or one UserPermission that matches the filter.
     * @param {UserPermissionFindUniqueArgs} args - Arguments to find a UserPermission
     * @example
     * // Get one UserPermission
     * const userPermission = await prisma.userPermission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserPermissionFindUniqueArgs>(args: SelectSubset<T, UserPermissionFindUniqueArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserPermission that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserPermissionFindUniqueOrThrowArgs} args - Arguments to find a UserPermission
     * @example
     * // Get one UserPermission
     * const userPermission = await prisma.userPermission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserPermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, UserPermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserPermission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionFindFirstArgs} args - Arguments to find a UserPermission
     * @example
     * // Get one UserPermission
     * const userPermission = await prisma.userPermission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserPermissionFindFirstArgs>(args?: SelectSubset<T, UserPermissionFindFirstArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserPermission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionFindFirstOrThrowArgs} args - Arguments to find a UserPermission
     * @example
     * // Get one UserPermission
     * const userPermission = await prisma.userPermission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserPermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, UserPermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserPermissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserPermissions
     * const userPermissions = await prisma.userPermission.findMany()
     * 
     * // Get first 10 UserPermissions
     * const userPermissions = await prisma.userPermission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userPermissionWithIdOnly = await prisma.userPermission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserPermissionFindManyArgs>(args?: SelectSubset<T, UserPermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserPermission.
     * @param {UserPermissionCreateArgs} args - Arguments to create a UserPermission.
     * @example
     * // Create one UserPermission
     * const UserPermission = await prisma.userPermission.create({
     *   data: {
     *     // ... data to create a UserPermission
     *   }
     * })
     * 
     */
    create<T extends UserPermissionCreateArgs>(args: SelectSubset<T, UserPermissionCreateArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserPermissions.
     * @param {UserPermissionCreateManyArgs} args - Arguments to create many UserPermissions.
     * @example
     * // Create many UserPermissions
     * const userPermission = await prisma.userPermission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserPermissionCreateManyArgs>(args?: SelectSubset<T, UserPermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserPermissions and returns the data saved in the database.
     * @param {UserPermissionCreateManyAndReturnArgs} args - Arguments to create many UserPermissions.
     * @example
     * // Create many UserPermissions
     * const userPermission = await prisma.userPermission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserPermissions and only return the `id`
     * const userPermissionWithIdOnly = await prisma.userPermission.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserPermissionCreateManyAndReturnArgs>(args?: SelectSubset<T, UserPermissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserPermission.
     * @param {UserPermissionDeleteArgs} args - Arguments to delete one UserPermission.
     * @example
     * // Delete one UserPermission
     * const UserPermission = await prisma.userPermission.delete({
     *   where: {
     *     // ... filter to delete one UserPermission
     *   }
     * })
     * 
     */
    delete<T extends UserPermissionDeleteArgs>(args: SelectSubset<T, UserPermissionDeleteArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserPermission.
     * @param {UserPermissionUpdateArgs} args - Arguments to update one UserPermission.
     * @example
     * // Update one UserPermission
     * const userPermission = await prisma.userPermission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserPermissionUpdateArgs>(args: SelectSubset<T, UserPermissionUpdateArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserPermissions.
     * @param {UserPermissionDeleteManyArgs} args - Arguments to filter UserPermissions to delete.
     * @example
     * // Delete a few UserPermissions
     * const { count } = await prisma.userPermission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserPermissionDeleteManyArgs>(args?: SelectSubset<T, UserPermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserPermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserPermissions
     * const userPermission = await prisma.userPermission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserPermissionUpdateManyArgs>(args: SelectSubset<T, UserPermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserPermission.
     * @param {UserPermissionUpsertArgs} args - Arguments to update or create a UserPermission.
     * @example
     * // Update or create a UserPermission
     * const userPermission = await prisma.userPermission.upsert({
     *   create: {
     *     // ... data to create a UserPermission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserPermission we want to update
     *   }
     * })
     */
    upsert<T extends UserPermissionUpsertArgs>(args: SelectSubset<T, UserPermissionUpsertArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserPermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionCountArgs} args - Arguments to filter UserPermissions to count.
     * @example
     * // Count the number of UserPermissions
     * const count = await prisma.userPermission.count({
     *   where: {
     *     // ... the filter for the UserPermissions we want to count
     *   }
     * })
    **/
    count<T extends UserPermissionCountArgs>(
      args?: Subset<T, UserPermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserPermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserPermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserPermissionAggregateArgs>(args: Subset<T, UserPermissionAggregateArgs>): Prisma.PrismaPromise<GetUserPermissionAggregateType<T>>

    /**
     * Group by UserPermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserPermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserPermissionGroupByArgs['orderBy'] }
        : { orderBy?: UserPermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserPermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserPermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserPermission model
   */
  readonly fields: UserPermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserPermission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserPermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserPermission model
   */ 
  interface UserPermissionFieldRefs {
    readonly id: FieldRef<"UserPermission", 'String'>
    readonly userId: FieldRef<"UserPermission", 'String'>
    readonly permission: FieldRef<"UserPermission", 'Permission'>
    readonly grantedBy: FieldRef<"UserPermission", 'String'>
    readonly grantedAt: FieldRef<"UserPermission", 'DateTime'>
    readonly expiresAt: FieldRef<"UserPermission", 'DateTime'>
    readonly isActive: FieldRef<"UserPermission", 'Boolean'>
    readonly createdAt: FieldRef<"UserPermission", 'DateTime'>
    readonly updatedAt: FieldRef<"UserPermission", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserPermission findUnique
   */
  export type UserPermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermission to fetch.
     */
    where: UserPermissionWhereUniqueInput
  }

  /**
   * UserPermission findUniqueOrThrow
   */
  export type UserPermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermission to fetch.
     */
    where: UserPermissionWhereUniqueInput
  }

  /**
   * UserPermission findFirst
   */
  export type UserPermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermission to fetch.
     */
    where?: UserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPermissions to fetch.
     */
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPermissions.
     */
    cursor?: UserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPermissions.
     */
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * UserPermission findFirstOrThrow
   */
  export type UserPermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermission to fetch.
     */
    where?: UserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPermissions to fetch.
     */
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPermissions.
     */
    cursor?: UserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPermissions.
     */
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * UserPermission findMany
   */
  export type UserPermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermissions to fetch.
     */
    where?: UserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPermissions to fetch.
     */
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserPermissions.
     */
    cursor?: UserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPermissions.
     */
    skip?: number
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * UserPermission create
   */
  export type UserPermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a UserPermission.
     */
    data: XOR<UserPermissionCreateInput, UserPermissionUncheckedCreateInput>
  }

  /**
   * UserPermission createMany
   */
  export type UserPermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserPermissions.
     */
    data: UserPermissionCreateManyInput | UserPermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserPermission createManyAndReturn
   */
  export type UserPermissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserPermissions.
     */
    data: UserPermissionCreateManyInput | UserPermissionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserPermission update
   */
  export type UserPermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a UserPermission.
     */
    data: XOR<UserPermissionUpdateInput, UserPermissionUncheckedUpdateInput>
    /**
     * Choose, which UserPermission to update.
     */
    where: UserPermissionWhereUniqueInput
  }

  /**
   * UserPermission updateMany
   */
  export type UserPermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserPermissions.
     */
    data: XOR<UserPermissionUpdateManyMutationInput, UserPermissionUncheckedUpdateManyInput>
    /**
     * Filter which UserPermissions to update
     */
    where?: UserPermissionWhereInput
  }

  /**
   * UserPermission upsert
   */
  export type UserPermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the UserPermission to update in case it exists.
     */
    where: UserPermissionWhereUniqueInput
    /**
     * In case the UserPermission found by the `where` argument doesn't exist, create a new UserPermission with this data.
     */
    create: XOR<UserPermissionCreateInput, UserPermissionUncheckedCreateInput>
    /**
     * In case the UserPermission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserPermissionUpdateInput, UserPermissionUncheckedUpdateInput>
  }

  /**
   * UserPermission delete
   */
  export type UserPermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter which UserPermission to delete.
     */
    where: UserPermissionWhereUniqueInput
  }

  /**
   * UserPermission deleteMany
   */
  export type UserPermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPermissions to delete
     */
    where?: UserPermissionWhereInput
  }

  /**
   * UserPermission without action
   */
  export type UserPermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    role: 'role',
    status: 'status',
    firstName: 'firstName',
    lastName: 'lastName',
    phone: 'phone',
    avatar: 'avatar',
    lastLoginAt: 'lastLoginAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SupplierScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    companyName: 'companyName',
    tradeName: 'tradeName',
    cnpj: 'cnpj',
    stateRegistration: 'stateRegistration',
    municipalRegistration: 'municipalRegistration',
    address: 'address',
    city: 'city',
    state: 'state',
    zipCode: 'zipCode',
    website: 'website',
    description: 'description',
    isActive: 'isActive',
    verifiedAt: 'verifiedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SupplierScalarFieldEnum = (typeof SupplierScalarFieldEnum)[keyof typeof SupplierScalarFieldEnum]


  export const PublicEntityScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    name: 'name',
    cnpj: 'cnpj',
    entityType: 'entityType',
    address: 'address',
    city: 'city',
    state: 'state',
    zipCode: 'zipCode',
    phone: 'phone',
    website: 'website',
    isActive: 'isActive',
    verifiedAt: 'verifiedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PublicEntityScalarFieldEnum = (typeof PublicEntityScalarFieldEnum)[keyof typeof PublicEntityScalarFieldEnum]


  export const CitizenScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    cpf: 'cpf',
    dateOfBirth: 'dateOfBirth',
    profession: 'profession',
    address: 'address',
    city: 'city',
    state: 'state',
    zipCode: 'zipCode',
    interests: 'interests',
    isActive: 'isActive',
    verifiedAt: 'verifiedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CitizenScalarFieldEnum = (typeof CitizenScalarFieldEnum)[keyof typeof CitizenScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    code: 'code',
    parentId: 'parentId',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const BiddingScalarFieldEnum: {
    id: 'id',
    publicEntityId: 'publicEntityId',
    title: 'title',
    description: 'description',
    biddingNumber: 'biddingNumber',
    type: 'type',
    status: 'status',
    estimatedValue: 'estimatedValue',
    openingDate: 'openingDate',
    closingDate: 'closingDate',
    deliveryLocation: 'deliveryLocation',
    deliveryDeadline: 'deliveryDeadline',
    requirements: 'requirements',
    evaluationCriteria: 'evaluationCriteria',
    isPublic: 'isPublic',
    publishedAt: 'publishedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BiddingScalarFieldEnum = (typeof BiddingScalarFieldEnum)[keyof typeof BiddingScalarFieldEnum]


  export const ProposalScalarFieldEnum: {
    id: 'id',
    biddingId: 'biddingId',
    supplierId: 'supplierId',
    totalValue: 'totalValue',
    description: 'description',
    status: 'status',
    submittedAt: 'submittedAt',
    validUntil: 'validUntil',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProposalScalarFieldEnum = (typeof ProposalScalarFieldEnum)[keyof typeof ProposalScalarFieldEnum]


  export const ProposalItemScalarFieldEnum: {
    id: 'id',
    proposalId: 'proposalId',
    description: 'description',
    quantity: 'quantity',
    unitPrice: 'unitPrice',
    totalPrice: 'totalPrice',
    brand: 'brand',
    model: 'model',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProposalItemScalarFieldEnum = (typeof ProposalItemScalarFieldEnum)[keyof typeof ProposalItemScalarFieldEnum]


  export const ContractScalarFieldEnum: {
    id: 'id',
    biddingId: 'biddingId',
    proposalId: 'proposalId',
    publicEntityId: 'publicEntityId',
    supplierId: 'supplierId',
    contractNumber: 'contractNumber',
    title: 'title',
    description: 'description',
    totalValue: 'totalValue',
    startDate: 'startDate',
    endDate: 'endDate',
    status: 'status',
    signedAt: 'signedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ContractScalarFieldEnum = (typeof ContractScalarFieldEnum)[keyof typeof ContractScalarFieldEnum]


  export const DocumentScalarFieldEnum: {
    id: 'id',
    filename: 'filename',
    originalName: 'originalName',
    mimeType: 'mimeType',
    size: 'size',
    path: 'path',
    type: 'type',
    description: 'description',
    isPublic: 'isPublic',
    uploadedBy: 'uploadedBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    biddingId: 'biddingId',
    proposalId: 'proposalId',
    contractId: 'contractId',
    supplierId: 'supplierId',
    publicEntityId: 'publicEntityId'
  };

  export type DocumentScalarFieldEnum = (typeof DocumentScalarFieldEnum)[keyof typeof DocumentScalarFieldEnum]


  export const BiddingCategoryScalarFieldEnum: {
    id: 'id',
    biddingId: 'biddingId',
    categoryId: 'categoryId',
    createdAt: 'createdAt'
  };

  export type BiddingCategoryScalarFieldEnum = (typeof BiddingCategoryScalarFieldEnum)[keyof typeof BiddingCategoryScalarFieldEnum]


  export const SupplierCategoryScalarFieldEnum: {
    id: 'id',
    supplierId: 'supplierId',
    categoryId: 'categoryId',
    createdAt: 'createdAt'
  };

  export type SupplierCategoryScalarFieldEnum = (typeof SupplierCategoryScalarFieldEnum)[keyof typeof SupplierCategoryScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    action: 'action',
    resource: 'resource',
    resourceId: 'resourceId',
    oldValues: 'oldValues',
    newValues: 'newValues',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    createdAt: 'createdAt'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const UserSessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    token: 'token',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserSessionScalarFieldEnum = (typeof UserSessionScalarFieldEnum)[keyof typeof UserSessionScalarFieldEnum]


  export const SystemConfigScalarFieldEnum: {
    id: 'id',
    key: 'key',
    value: 'value',
    type: 'type',
    description: 'description',
    isPublic: 'isPublic',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SystemConfigScalarFieldEnum = (typeof SystemConfigScalarFieldEnum)[keyof typeof SystemConfigScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    title: 'title',
    message: 'message',
    type: 'type',
    isRead: 'isRead',
    data: 'data',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const UserPermissionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    permission: 'permission',
    grantedBy: 'grantedBy',
    grantedAt: 'grantedAt',
    expiresAt: 'expiresAt',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserPermissionScalarFieldEnum = (typeof UserPermissionScalarFieldEnum)[keyof typeof UserPermissionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'UserStatus'
   */
  export type EnumUserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserStatus'>
    


  /**
   * Reference to a field of type 'UserStatus[]'
   */
  export type ListEnumUserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserStatus[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'BiddingType'
   */
  export type EnumBiddingTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BiddingType'>
    


  /**
   * Reference to a field of type 'BiddingType[]'
   */
  export type ListEnumBiddingTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BiddingType[]'>
    


  /**
   * Reference to a field of type 'BiddingStatus'
   */
  export type EnumBiddingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BiddingStatus'>
    


  /**
   * Reference to a field of type 'BiddingStatus[]'
   */
  export type ListEnumBiddingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BiddingStatus[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'ProposalStatus'
   */
  export type EnumProposalStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProposalStatus'>
    


  /**
   * Reference to a field of type 'ProposalStatus[]'
   */
  export type ListEnumProposalStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProposalStatus[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'ContractStatus'
   */
  export type EnumContractStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContractStatus'>
    


  /**
   * Reference to a field of type 'ContractStatus[]'
   */
  export type ListEnumContractStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContractStatus[]'>
    


  /**
   * Reference to a field of type 'DocumentType'
   */
  export type EnumDocumentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DocumentType'>
    


  /**
   * Reference to a field of type 'DocumentType[]'
   */
  export type ListEnumDocumentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DocumentType[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Permission'
   */
  export type EnumPermissionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Permission'>
    


  /**
   * Reference to a field of type 'Permission[]'
   */
  export type ListEnumPermissionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Permission[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    status?: EnumUserStatusFilter<"User"> | $Enums.UserStatus
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    phone?: StringNullableFilter<"User"> | string | null
    avatar?: StringNullableFilter<"User"> | string | null
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    supplier?: XOR<SupplierNullableRelationFilter, SupplierWhereInput> | null
    publicEntity?: XOR<PublicEntityNullableRelationFilter, PublicEntityWhereInput> | null
    citizen?: XOR<CitizenNullableRelationFilter, CitizenWhereInput> | null
    auditLogs?: AuditLogListRelationFilter
    sessions?: UserSessionListRelationFilter
    permissions?: UserPermissionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    status?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    supplier?: SupplierOrderByWithRelationInput
    publicEntity?: PublicEntityOrderByWithRelationInput
    citizen?: CitizenOrderByWithRelationInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
    sessions?: UserSessionOrderByRelationAggregateInput
    permissions?: UserPermissionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    status?: EnumUserStatusFilter<"User"> | $Enums.UserStatus
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    phone?: StringNullableFilter<"User"> | string | null
    avatar?: StringNullableFilter<"User"> | string | null
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    supplier?: XOR<SupplierNullableRelationFilter, SupplierWhereInput> | null
    publicEntity?: XOR<PublicEntityNullableRelationFilter, PublicEntityWhereInput> | null
    citizen?: XOR<CitizenNullableRelationFilter, CitizenWhereInput> | null
    auditLogs?: AuditLogListRelationFilter
    sessions?: UserSessionListRelationFilter
    permissions?: UserPermissionListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    status?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    status?: EnumUserStatusWithAggregatesFilter<"User"> | $Enums.UserStatus
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    avatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastLoginAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type SupplierWhereInput = {
    AND?: SupplierWhereInput | SupplierWhereInput[]
    OR?: SupplierWhereInput[]
    NOT?: SupplierWhereInput | SupplierWhereInput[]
    id?: StringFilter<"Supplier"> | string
    userId?: StringFilter<"Supplier"> | string
    companyName?: StringFilter<"Supplier"> | string
    tradeName?: StringNullableFilter<"Supplier"> | string | null
    cnpj?: StringFilter<"Supplier"> | string
    stateRegistration?: StringNullableFilter<"Supplier"> | string | null
    municipalRegistration?: StringNullableFilter<"Supplier"> | string | null
    address?: StringFilter<"Supplier"> | string
    city?: StringFilter<"Supplier"> | string
    state?: StringFilter<"Supplier"> | string
    zipCode?: StringFilter<"Supplier"> | string
    website?: StringNullableFilter<"Supplier"> | string | null
    description?: StringNullableFilter<"Supplier"> | string | null
    isActive?: BoolFilter<"Supplier"> | boolean
    verifiedAt?: DateTimeNullableFilter<"Supplier"> | Date | string | null
    createdAt?: DateTimeFilter<"Supplier"> | Date | string
    updatedAt?: DateTimeFilter<"Supplier"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    proposals?: ProposalListRelationFilter
    contracts?: ContractListRelationFilter
    documents?: DocumentListRelationFilter
    categories?: SupplierCategoryListRelationFilter
  }

  export type SupplierOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    companyName?: SortOrder
    tradeName?: SortOrderInput | SortOrder
    cnpj?: SortOrder
    stateRegistration?: SortOrderInput | SortOrder
    municipalRegistration?: SortOrderInput | SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zipCode?: SortOrder
    website?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    verifiedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    proposals?: ProposalOrderByRelationAggregateInput
    contracts?: ContractOrderByRelationAggregateInput
    documents?: DocumentOrderByRelationAggregateInput
    categories?: SupplierCategoryOrderByRelationAggregateInput
  }

  export type SupplierWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    cnpj?: string
    AND?: SupplierWhereInput | SupplierWhereInput[]
    OR?: SupplierWhereInput[]
    NOT?: SupplierWhereInput | SupplierWhereInput[]
    companyName?: StringFilter<"Supplier"> | string
    tradeName?: StringNullableFilter<"Supplier"> | string | null
    stateRegistration?: StringNullableFilter<"Supplier"> | string | null
    municipalRegistration?: StringNullableFilter<"Supplier"> | string | null
    address?: StringFilter<"Supplier"> | string
    city?: StringFilter<"Supplier"> | string
    state?: StringFilter<"Supplier"> | string
    zipCode?: StringFilter<"Supplier"> | string
    website?: StringNullableFilter<"Supplier"> | string | null
    description?: StringNullableFilter<"Supplier"> | string | null
    isActive?: BoolFilter<"Supplier"> | boolean
    verifiedAt?: DateTimeNullableFilter<"Supplier"> | Date | string | null
    createdAt?: DateTimeFilter<"Supplier"> | Date | string
    updatedAt?: DateTimeFilter<"Supplier"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    proposals?: ProposalListRelationFilter
    contracts?: ContractListRelationFilter
    documents?: DocumentListRelationFilter
    categories?: SupplierCategoryListRelationFilter
  }, "id" | "userId" | "cnpj">

  export type SupplierOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    companyName?: SortOrder
    tradeName?: SortOrderInput | SortOrder
    cnpj?: SortOrder
    stateRegistration?: SortOrderInput | SortOrder
    municipalRegistration?: SortOrderInput | SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zipCode?: SortOrder
    website?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    verifiedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SupplierCountOrderByAggregateInput
    _max?: SupplierMaxOrderByAggregateInput
    _min?: SupplierMinOrderByAggregateInput
  }

  export type SupplierScalarWhereWithAggregatesInput = {
    AND?: SupplierScalarWhereWithAggregatesInput | SupplierScalarWhereWithAggregatesInput[]
    OR?: SupplierScalarWhereWithAggregatesInput[]
    NOT?: SupplierScalarWhereWithAggregatesInput | SupplierScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Supplier"> | string
    userId?: StringWithAggregatesFilter<"Supplier"> | string
    companyName?: StringWithAggregatesFilter<"Supplier"> | string
    tradeName?: StringNullableWithAggregatesFilter<"Supplier"> | string | null
    cnpj?: StringWithAggregatesFilter<"Supplier"> | string
    stateRegistration?: StringNullableWithAggregatesFilter<"Supplier"> | string | null
    municipalRegistration?: StringNullableWithAggregatesFilter<"Supplier"> | string | null
    address?: StringWithAggregatesFilter<"Supplier"> | string
    city?: StringWithAggregatesFilter<"Supplier"> | string
    state?: StringWithAggregatesFilter<"Supplier"> | string
    zipCode?: StringWithAggregatesFilter<"Supplier"> | string
    website?: StringNullableWithAggregatesFilter<"Supplier"> | string | null
    description?: StringNullableWithAggregatesFilter<"Supplier"> | string | null
    isActive?: BoolWithAggregatesFilter<"Supplier"> | boolean
    verifiedAt?: DateTimeNullableWithAggregatesFilter<"Supplier"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Supplier"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Supplier"> | Date | string
  }

  export type PublicEntityWhereInput = {
    AND?: PublicEntityWhereInput | PublicEntityWhereInput[]
    OR?: PublicEntityWhereInput[]
    NOT?: PublicEntityWhereInput | PublicEntityWhereInput[]
    id?: StringFilter<"PublicEntity"> | string
    userId?: StringFilter<"PublicEntity"> | string
    name?: StringFilter<"PublicEntity"> | string
    cnpj?: StringFilter<"PublicEntity"> | string
    entityType?: StringFilter<"PublicEntity"> | string
    address?: StringFilter<"PublicEntity"> | string
    city?: StringFilter<"PublicEntity"> | string
    state?: StringFilter<"PublicEntity"> | string
    zipCode?: StringFilter<"PublicEntity"> | string
    phone?: StringFilter<"PublicEntity"> | string
    website?: StringNullableFilter<"PublicEntity"> | string | null
    isActive?: BoolFilter<"PublicEntity"> | boolean
    verifiedAt?: DateTimeNullableFilter<"PublicEntity"> | Date | string | null
    createdAt?: DateTimeFilter<"PublicEntity"> | Date | string
    updatedAt?: DateTimeFilter<"PublicEntity"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    biddings?: BiddingListRelationFilter
    contracts?: ContractListRelationFilter
    documents?: DocumentListRelationFilter
  }

  export type PublicEntityOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    cnpj?: SortOrder
    entityType?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zipCode?: SortOrder
    phone?: SortOrder
    website?: SortOrderInput | SortOrder
    isActive?: SortOrder
    verifiedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    biddings?: BiddingOrderByRelationAggregateInput
    contracts?: ContractOrderByRelationAggregateInput
    documents?: DocumentOrderByRelationAggregateInput
  }

  export type PublicEntityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    cnpj?: string
    AND?: PublicEntityWhereInput | PublicEntityWhereInput[]
    OR?: PublicEntityWhereInput[]
    NOT?: PublicEntityWhereInput | PublicEntityWhereInput[]
    name?: StringFilter<"PublicEntity"> | string
    entityType?: StringFilter<"PublicEntity"> | string
    address?: StringFilter<"PublicEntity"> | string
    city?: StringFilter<"PublicEntity"> | string
    state?: StringFilter<"PublicEntity"> | string
    zipCode?: StringFilter<"PublicEntity"> | string
    phone?: StringFilter<"PublicEntity"> | string
    website?: StringNullableFilter<"PublicEntity"> | string | null
    isActive?: BoolFilter<"PublicEntity"> | boolean
    verifiedAt?: DateTimeNullableFilter<"PublicEntity"> | Date | string | null
    createdAt?: DateTimeFilter<"PublicEntity"> | Date | string
    updatedAt?: DateTimeFilter<"PublicEntity"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    biddings?: BiddingListRelationFilter
    contracts?: ContractListRelationFilter
    documents?: DocumentListRelationFilter
  }, "id" | "userId" | "cnpj">

  export type PublicEntityOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    cnpj?: SortOrder
    entityType?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zipCode?: SortOrder
    phone?: SortOrder
    website?: SortOrderInput | SortOrder
    isActive?: SortOrder
    verifiedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PublicEntityCountOrderByAggregateInput
    _max?: PublicEntityMaxOrderByAggregateInput
    _min?: PublicEntityMinOrderByAggregateInput
  }

  export type PublicEntityScalarWhereWithAggregatesInput = {
    AND?: PublicEntityScalarWhereWithAggregatesInput | PublicEntityScalarWhereWithAggregatesInput[]
    OR?: PublicEntityScalarWhereWithAggregatesInput[]
    NOT?: PublicEntityScalarWhereWithAggregatesInput | PublicEntityScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PublicEntity"> | string
    userId?: StringWithAggregatesFilter<"PublicEntity"> | string
    name?: StringWithAggregatesFilter<"PublicEntity"> | string
    cnpj?: StringWithAggregatesFilter<"PublicEntity"> | string
    entityType?: StringWithAggregatesFilter<"PublicEntity"> | string
    address?: StringWithAggregatesFilter<"PublicEntity"> | string
    city?: StringWithAggregatesFilter<"PublicEntity"> | string
    state?: StringWithAggregatesFilter<"PublicEntity"> | string
    zipCode?: StringWithAggregatesFilter<"PublicEntity"> | string
    phone?: StringWithAggregatesFilter<"PublicEntity"> | string
    website?: StringNullableWithAggregatesFilter<"PublicEntity"> | string | null
    isActive?: BoolWithAggregatesFilter<"PublicEntity"> | boolean
    verifiedAt?: DateTimeNullableWithAggregatesFilter<"PublicEntity"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PublicEntity"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PublicEntity"> | Date | string
  }

  export type CitizenWhereInput = {
    AND?: CitizenWhereInput | CitizenWhereInput[]
    OR?: CitizenWhereInput[]
    NOT?: CitizenWhereInput | CitizenWhereInput[]
    id?: StringFilter<"Citizen"> | string
    userId?: StringFilter<"Citizen"> | string
    cpf?: StringNullableFilter<"Citizen"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"Citizen"> | Date | string | null
    profession?: StringNullableFilter<"Citizen"> | string | null
    address?: StringNullableFilter<"Citizen"> | string | null
    city?: StringNullableFilter<"Citizen"> | string | null
    state?: StringNullableFilter<"Citizen"> | string | null
    zipCode?: StringNullableFilter<"Citizen"> | string | null
    interests?: StringNullableListFilter<"Citizen">
    isActive?: BoolFilter<"Citizen"> | boolean
    verifiedAt?: DateTimeNullableFilter<"Citizen"> | Date | string | null
    createdAt?: DateTimeFilter<"Citizen"> | Date | string
    updatedAt?: DateTimeFilter<"Citizen"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type CitizenOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    cpf?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    profession?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    zipCode?: SortOrderInput | SortOrder
    interests?: SortOrder
    isActive?: SortOrder
    verifiedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type CitizenWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    cpf?: string
    AND?: CitizenWhereInput | CitizenWhereInput[]
    OR?: CitizenWhereInput[]
    NOT?: CitizenWhereInput | CitizenWhereInput[]
    dateOfBirth?: DateTimeNullableFilter<"Citizen"> | Date | string | null
    profession?: StringNullableFilter<"Citizen"> | string | null
    address?: StringNullableFilter<"Citizen"> | string | null
    city?: StringNullableFilter<"Citizen"> | string | null
    state?: StringNullableFilter<"Citizen"> | string | null
    zipCode?: StringNullableFilter<"Citizen"> | string | null
    interests?: StringNullableListFilter<"Citizen">
    isActive?: BoolFilter<"Citizen"> | boolean
    verifiedAt?: DateTimeNullableFilter<"Citizen"> | Date | string | null
    createdAt?: DateTimeFilter<"Citizen"> | Date | string
    updatedAt?: DateTimeFilter<"Citizen"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId" | "cpf">

  export type CitizenOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    cpf?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    profession?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    zipCode?: SortOrderInput | SortOrder
    interests?: SortOrder
    isActive?: SortOrder
    verifiedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CitizenCountOrderByAggregateInput
    _max?: CitizenMaxOrderByAggregateInput
    _min?: CitizenMinOrderByAggregateInput
  }

  export type CitizenScalarWhereWithAggregatesInput = {
    AND?: CitizenScalarWhereWithAggregatesInput | CitizenScalarWhereWithAggregatesInput[]
    OR?: CitizenScalarWhereWithAggregatesInput[]
    NOT?: CitizenScalarWhereWithAggregatesInput | CitizenScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Citizen"> | string
    userId?: StringWithAggregatesFilter<"Citizen"> | string
    cpf?: StringNullableWithAggregatesFilter<"Citizen"> | string | null
    dateOfBirth?: DateTimeNullableWithAggregatesFilter<"Citizen"> | Date | string | null
    profession?: StringNullableWithAggregatesFilter<"Citizen"> | string | null
    address?: StringNullableWithAggregatesFilter<"Citizen"> | string | null
    city?: StringNullableWithAggregatesFilter<"Citizen"> | string | null
    state?: StringNullableWithAggregatesFilter<"Citizen"> | string | null
    zipCode?: StringNullableWithAggregatesFilter<"Citizen"> | string | null
    interests?: StringNullableListFilter<"Citizen">
    isActive?: BoolWithAggregatesFilter<"Citizen"> | boolean
    verifiedAt?: DateTimeNullableWithAggregatesFilter<"Citizen"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Citizen"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Citizen"> | Date | string
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: StringFilter<"Category"> | string
    name?: StringFilter<"Category"> | string
    description?: StringNullableFilter<"Category"> | string | null
    code?: StringFilter<"Category"> | string
    parentId?: StringNullableFilter<"Category"> | string | null
    isActive?: BoolFilter<"Category"> | boolean
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    parent?: XOR<CategoryNullableRelationFilter, CategoryWhereInput> | null
    children?: CategoryListRelationFilter
    biddings?: BiddingCategoryListRelationFilter
    suppliers?: SupplierCategoryListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    code?: SortOrder
    parentId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parent?: CategoryOrderByWithRelationInput
    children?: CategoryOrderByRelationAggregateInput
    biddings?: BiddingCategoryOrderByRelationAggregateInput
    suppliers?: SupplierCategoryOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    code?: string
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    description?: StringNullableFilter<"Category"> | string | null
    parentId?: StringNullableFilter<"Category"> | string | null
    isActive?: BoolFilter<"Category"> | boolean
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    parent?: XOR<CategoryNullableRelationFilter, CategoryWhereInput> | null
    children?: CategoryListRelationFilter
    biddings?: BiddingCategoryListRelationFilter
    suppliers?: SupplierCategoryListRelationFilter
  }, "id" | "name" | "code">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    code?: SortOrder
    parentId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Category"> | string
    name?: StringWithAggregatesFilter<"Category"> | string
    description?: StringNullableWithAggregatesFilter<"Category"> | string | null
    code?: StringWithAggregatesFilter<"Category"> | string
    parentId?: StringNullableWithAggregatesFilter<"Category"> | string | null
    isActive?: BoolWithAggregatesFilter<"Category"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
  }

  export type BiddingWhereInput = {
    AND?: BiddingWhereInput | BiddingWhereInput[]
    OR?: BiddingWhereInput[]
    NOT?: BiddingWhereInput | BiddingWhereInput[]
    id?: StringFilter<"Bidding"> | string
    publicEntityId?: StringFilter<"Bidding"> | string
    title?: StringFilter<"Bidding"> | string
    description?: StringFilter<"Bidding"> | string
    biddingNumber?: StringFilter<"Bidding"> | string
    type?: EnumBiddingTypeFilter<"Bidding"> | $Enums.BiddingType
    status?: EnumBiddingStatusFilter<"Bidding"> | $Enums.BiddingStatus
    estimatedValue?: DecimalFilter<"Bidding"> | Decimal | DecimalJsLike | number | string
    openingDate?: DateTimeFilter<"Bidding"> | Date | string
    closingDate?: DateTimeFilter<"Bidding"> | Date | string
    deliveryLocation?: StringFilter<"Bidding"> | string
    deliveryDeadline?: DateTimeFilter<"Bidding"> | Date | string
    requirements?: StringFilter<"Bidding"> | string
    evaluationCriteria?: StringFilter<"Bidding"> | string
    isPublic?: BoolFilter<"Bidding"> | boolean
    publishedAt?: DateTimeNullableFilter<"Bidding"> | Date | string | null
    createdAt?: DateTimeFilter<"Bidding"> | Date | string
    updatedAt?: DateTimeFilter<"Bidding"> | Date | string
    publicEntity?: XOR<PublicEntityRelationFilter, PublicEntityWhereInput>
    proposals?: ProposalListRelationFilter
    documents?: DocumentListRelationFilter
    categories?: BiddingCategoryListRelationFilter
    contract?: XOR<ContractNullableRelationFilter, ContractWhereInput> | null
  }

  export type BiddingOrderByWithRelationInput = {
    id?: SortOrder
    publicEntityId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    biddingNumber?: SortOrder
    type?: SortOrder
    status?: SortOrder
    estimatedValue?: SortOrder
    openingDate?: SortOrder
    closingDate?: SortOrder
    deliveryLocation?: SortOrder
    deliveryDeadline?: SortOrder
    requirements?: SortOrder
    evaluationCriteria?: SortOrder
    isPublic?: SortOrder
    publishedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    publicEntity?: PublicEntityOrderByWithRelationInput
    proposals?: ProposalOrderByRelationAggregateInput
    documents?: DocumentOrderByRelationAggregateInput
    categories?: BiddingCategoryOrderByRelationAggregateInput
    contract?: ContractOrderByWithRelationInput
  }

  export type BiddingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    biddingNumber?: string
    AND?: BiddingWhereInput | BiddingWhereInput[]
    OR?: BiddingWhereInput[]
    NOT?: BiddingWhereInput | BiddingWhereInput[]
    publicEntityId?: StringFilter<"Bidding"> | string
    title?: StringFilter<"Bidding"> | string
    description?: StringFilter<"Bidding"> | string
    type?: EnumBiddingTypeFilter<"Bidding"> | $Enums.BiddingType
    status?: EnumBiddingStatusFilter<"Bidding"> | $Enums.BiddingStatus
    estimatedValue?: DecimalFilter<"Bidding"> | Decimal | DecimalJsLike | number | string
    openingDate?: DateTimeFilter<"Bidding"> | Date | string
    closingDate?: DateTimeFilter<"Bidding"> | Date | string
    deliveryLocation?: StringFilter<"Bidding"> | string
    deliveryDeadline?: DateTimeFilter<"Bidding"> | Date | string
    requirements?: StringFilter<"Bidding"> | string
    evaluationCriteria?: StringFilter<"Bidding"> | string
    isPublic?: BoolFilter<"Bidding"> | boolean
    publishedAt?: DateTimeNullableFilter<"Bidding"> | Date | string | null
    createdAt?: DateTimeFilter<"Bidding"> | Date | string
    updatedAt?: DateTimeFilter<"Bidding"> | Date | string
    publicEntity?: XOR<PublicEntityRelationFilter, PublicEntityWhereInput>
    proposals?: ProposalListRelationFilter
    documents?: DocumentListRelationFilter
    categories?: BiddingCategoryListRelationFilter
    contract?: XOR<ContractNullableRelationFilter, ContractWhereInput> | null
  }, "id" | "biddingNumber">

  export type BiddingOrderByWithAggregationInput = {
    id?: SortOrder
    publicEntityId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    biddingNumber?: SortOrder
    type?: SortOrder
    status?: SortOrder
    estimatedValue?: SortOrder
    openingDate?: SortOrder
    closingDate?: SortOrder
    deliveryLocation?: SortOrder
    deliveryDeadline?: SortOrder
    requirements?: SortOrder
    evaluationCriteria?: SortOrder
    isPublic?: SortOrder
    publishedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BiddingCountOrderByAggregateInput
    _avg?: BiddingAvgOrderByAggregateInput
    _max?: BiddingMaxOrderByAggregateInput
    _min?: BiddingMinOrderByAggregateInput
    _sum?: BiddingSumOrderByAggregateInput
  }

  export type BiddingScalarWhereWithAggregatesInput = {
    AND?: BiddingScalarWhereWithAggregatesInput | BiddingScalarWhereWithAggregatesInput[]
    OR?: BiddingScalarWhereWithAggregatesInput[]
    NOT?: BiddingScalarWhereWithAggregatesInput | BiddingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Bidding"> | string
    publicEntityId?: StringWithAggregatesFilter<"Bidding"> | string
    title?: StringWithAggregatesFilter<"Bidding"> | string
    description?: StringWithAggregatesFilter<"Bidding"> | string
    biddingNumber?: StringWithAggregatesFilter<"Bidding"> | string
    type?: EnumBiddingTypeWithAggregatesFilter<"Bidding"> | $Enums.BiddingType
    status?: EnumBiddingStatusWithAggregatesFilter<"Bidding"> | $Enums.BiddingStatus
    estimatedValue?: DecimalWithAggregatesFilter<"Bidding"> | Decimal | DecimalJsLike | number | string
    openingDate?: DateTimeWithAggregatesFilter<"Bidding"> | Date | string
    closingDate?: DateTimeWithAggregatesFilter<"Bidding"> | Date | string
    deliveryLocation?: StringWithAggregatesFilter<"Bidding"> | string
    deliveryDeadline?: DateTimeWithAggregatesFilter<"Bidding"> | Date | string
    requirements?: StringWithAggregatesFilter<"Bidding"> | string
    evaluationCriteria?: StringWithAggregatesFilter<"Bidding"> | string
    isPublic?: BoolWithAggregatesFilter<"Bidding"> | boolean
    publishedAt?: DateTimeNullableWithAggregatesFilter<"Bidding"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Bidding"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Bidding"> | Date | string
  }

  export type ProposalWhereInput = {
    AND?: ProposalWhereInput | ProposalWhereInput[]
    OR?: ProposalWhereInput[]
    NOT?: ProposalWhereInput | ProposalWhereInput[]
    id?: StringFilter<"Proposal"> | string
    biddingId?: StringFilter<"Proposal"> | string
    supplierId?: StringFilter<"Proposal"> | string
    totalValue?: DecimalFilter<"Proposal"> | Decimal | DecimalJsLike | number | string
    description?: StringFilter<"Proposal"> | string
    status?: EnumProposalStatusFilter<"Proposal"> | $Enums.ProposalStatus
    submittedAt?: DateTimeNullableFilter<"Proposal"> | Date | string | null
    validUntil?: DateTimeFilter<"Proposal"> | Date | string
    notes?: StringNullableFilter<"Proposal"> | string | null
    createdAt?: DateTimeFilter<"Proposal"> | Date | string
    updatedAt?: DateTimeFilter<"Proposal"> | Date | string
    bidding?: XOR<BiddingRelationFilter, BiddingWhereInput>
    supplier?: XOR<SupplierRelationFilter, SupplierWhereInput>
    items?: ProposalItemListRelationFilter
    documents?: DocumentListRelationFilter
    contract?: XOR<ContractNullableRelationFilter, ContractWhereInput> | null
  }

  export type ProposalOrderByWithRelationInput = {
    id?: SortOrder
    biddingId?: SortOrder
    supplierId?: SortOrder
    totalValue?: SortOrder
    description?: SortOrder
    status?: SortOrder
    submittedAt?: SortOrderInput | SortOrder
    validUntil?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    bidding?: BiddingOrderByWithRelationInput
    supplier?: SupplierOrderByWithRelationInput
    items?: ProposalItemOrderByRelationAggregateInput
    documents?: DocumentOrderByRelationAggregateInput
    contract?: ContractOrderByWithRelationInput
  }

  export type ProposalWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    biddingId_supplierId?: ProposalBiddingIdSupplierIdCompoundUniqueInput
    AND?: ProposalWhereInput | ProposalWhereInput[]
    OR?: ProposalWhereInput[]
    NOT?: ProposalWhereInput | ProposalWhereInput[]
    biddingId?: StringFilter<"Proposal"> | string
    supplierId?: StringFilter<"Proposal"> | string
    totalValue?: DecimalFilter<"Proposal"> | Decimal | DecimalJsLike | number | string
    description?: StringFilter<"Proposal"> | string
    status?: EnumProposalStatusFilter<"Proposal"> | $Enums.ProposalStatus
    submittedAt?: DateTimeNullableFilter<"Proposal"> | Date | string | null
    validUntil?: DateTimeFilter<"Proposal"> | Date | string
    notes?: StringNullableFilter<"Proposal"> | string | null
    createdAt?: DateTimeFilter<"Proposal"> | Date | string
    updatedAt?: DateTimeFilter<"Proposal"> | Date | string
    bidding?: XOR<BiddingRelationFilter, BiddingWhereInput>
    supplier?: XOR<SupplierRelationFilter, SupplierWhereInput>
    items?: ProposalItemListRelationFilter
    documents?: DocumentListRelationFilter
    contract?: XOR<ContractNullableRelationFilter, ContractWhereInput> | null
  }, "id" | "biddingId_supplierId">

  export type ProposalOrderByWithAggregationInput = {
    id?: SortOrder
    biddingId?: SortOrder
    supplierId?: SortOrder
    totalValue?: SortOrder
    description?: SortOrder
    status?: SortOrder
    submittedAt?: SortOrderInput | SortOrder
    validUntil?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProposalCountOrderByAggregateInput
    _avg?: ProposalAvgOrderByAggregateInput
    _max?: ProposalMaxOrderByAggregateInput
    _min?: ProposalMinOrderByAggregateInput
    _sum?: ProposalSumOrderByAggregateInput
  }

  export type ProposalScalarWhereWithAggregatesInput = {
    AND?: ProposalScalarWhereWithAggregatesInput | ProposalScalarWhereWithAggregatesInput[]
    OR?: ProposalScalarWhereWithAggregatesInput[]
    NOT?: ProposalScalarWhereWithAggregatesInput | ProposalScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Proposal"> | string
    biddingId?: StringWithAggregatesFilter<"Proposal"> | string
    supplierId?: StringWithAggregatesFilter<"Proposal"> | string
    totalValue?: DecimalWithAggregatesFilter<"Proposal"> | Decimal | DecimalJsLike | number | string
    description?: StringWithAggregatesFilter<"Proposal"> | string
    status?: EnumProposalStatusWithAggregatesFilter<"Proposal"> | $Enums.ProposalStatus
    submittedAt?: DateTimeNullableWithAggregatesFilter<"Proposal"> | Date | string | null
    validUntil?: DateTimeWithAggregatesFilter<"Proposal"> | Date | string
    notes?: StringNullableWithAggregatesFilter<"Proposal"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Proposal"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Proposal"> | Date | string
  }

  export type ProposalItemWhereInput = {
    AND?: ProposalItemWhereInput | ProposalItemWhereInput[]
    OR?: ProposalItemWhereInput[]
    NOT?: ProposalItemWhereInput | ProposalItemWhereInput[]
    id?: StringFilter<"ProposalItem"> | string
    proposalId?: StringFilter<"ProposalItem"> | string
    description?: StringFilter<"ProposalItem"> | string
    quantity?: IntFilter<"ProposalItem"> | number
    unitPrice?: DecimalFilter<"ProposalItem"> | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFilter<"ProposalItem"> | Decimal | DecimalJsLike | number | string
    brand?: StringNullableFilter<"ProposalItem"> | string | null
    model?: StringNullableFilter<"ProposalItem"> | string | null
    createdAt?: DateTimeFilter<"ProposalItem"> | Date | string
    updatedAt?: DateTimeFilter<"ProposalItem"> | Date | string
    proposal?: XOR<ProposalRelationFilter, ProposalWhereInput>
  }

  export type ProposalItemOrderByWithRelationInput = {
    id?: SortOrder
    proposalId?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    brand?: SortOrderInput | SortOrder
    model?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    proposal?: ProposalOrderByWithRelationInput
  }

  export type ProposalItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProposalItemWhereInput | ProposalItemWhereInput[]
    OR?: ProposalItemWhereInput[]
    NOT?: ProposalItemWhereInput | ProposalItemWhereInput[]
    proposalId?: StringFilter<"ProposalItem"> | string
    description?: StringFilter<"ProposalItem"> | string
    quantity?: IntFilter<"ProposalItem"> | number
    unitPrice?: DecimalFilter<"ProposalItem"> | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFilter<"ProposalItem"> | Decimal | DecimalJsLike | number | string
    brand?: StringNullableFilter<"ProposalItem"> | string | null
    model?: StringNullableFilter<"ProposalItem"> | string | null
    createdAt?: DateTimeFilter<"ProposalItem"> | Date | string
    updatedAt?: DateTimeFilter<"ProposalItem"> | Date | string
    proposal?: XOR<ProposalRelationFilter, ProposalWhereInput>
  }, "id">

  export type ProposalItemOrderByWithAggregationInput = {
    id?: SortOrder
    proposalId?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    brand?: SortOrderInput | SortOrder
    model?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProposalItemCountOrderByAggregateInput
    _avg?: ProposalItemAvgOrderByAggregateInput
    _max?: ProposalItemMaxOrderByAggregateInput
    _min?: ProposalItemMinOrderByAggregateInput
    _sum?: ProposalItemSumOrderByAggregateInput
  }

  export type ProposalItemScalarWhereWithAggregatesInput = {
    AND?: ProposalItemScalarWhereWithAggregatesInput | ProposalItemScalarWhereWithAggregatesInput[]
    OR?: ProposalItemScalarWhereWithAggregatesInput[]
    NOT?: ProposalItemScalarWhereWithAggregatesInput | ProposalItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProposalItem"> | string
    proposalId?: StringWithAggregatesFilter<"ProposalItem"> | string
    description?: StringWithAggregatesFilter<"ProposalItem"> | string
    quantity?: IntWithAggregatesFilter<"ProposalItem"> | number
    unitPrice?: DecimalWithAggregatesFilter<"ProposalItem"> | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalWithAggregatesFilter<"ProposalItem"> | Decimal | DecimalJsLike | number | string
    brand?: StringNullableWithAggregatesFilter<"ProposalItem"> | string | null
    model?: StringNullableWithAggregatesFilter<"ProposalItem"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ProposalItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProposalItem"> | Date | string
  }

  export type ContractWhereInput = {
    AND?: ContractWhereInput | ContractWhereInput[]
    OR?: ContractWhereInput[]
    NOT?: ContractWhereInput | ContractWhereInput[]
    id?: StringFilter<"Contract"> | string
    biddingId?: StringFilter<"Contract"> | string
    proposalId?: StringFilter<"Contract"> | string
    publicEntityId?: StringFilter<"Contract"> | string
    supplierId?: StringFilter<"Contract"> | string
    contractNumber?: StringFilter<"Contract"> | string
    title?: StringFilter<"Contract"> | string
    description?: StringFilter<"Contract"> | string
    totalValue?: DecimalFilter<"Contract"> | Decimal | DecimalJsLike | number | string
    startDate?: DateTimeFilter<"Contract"> | Date | string
    endDate?: DateTimeFilter<"Contract"> | Date | string
    status?: EnumContractStatusFilter<"Contract"> | $Enums.ContractStatus
    signedAt?: DateTimeNullableFilter<"Contract"> | Date | string | null
    createdAt?: DateTimeFilter<"Contract"> | Date | string
    updatedAt?: DateTimeFilter<"Contract"> | Date | string
    bidding?: XOR<BiddingRelationFilter, BiddingWhereInput>
    proposal?: XOR<ProposalRelationFilter, ProposalWhereInput>
    publicEntity?: XOR<PublicEntityRelationFilter, PublicEntityWhereInput>
    supplier?: XOR<SupplierRelationFilter, SupplierWhereInput>
    documents?: DocumentListRelationFilter
  }

  export type ContractOrderByWithRelationInput = {
    id?: SortOrder
    biddingId?: SortOrder
    proposalId?: SortOrder
    publicEntityId?: SortOrder
    supplierId?: SortOrder
    contractNumber?: SortOrder
    title?: SortOrder
    description?: SortOrder
    totalValue?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    signedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    bidding?: BiddingOrderByWithRelationInput
    proposal?: ProposalOrderByWithRelationInput
    publicEntity?: PublicEntityOrderByWithRelationInput
    supplier?: SupplierOrderByWithRelationInput
    documents?: DocumentOrderByRelationAggregateInput
  }

  export type ContractWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    biddingId?: string
    proposalId?: string
    contractNumber?: string
    AND?: ContractWhereInput | ContractWhereInput[]
    OR?: ContractWhereInput[]
    NOT?: ContractWhereInput | ContractWhereInput[]
    publicEntityId?: StringFilter<"Contract"> | string
    supplierId?: StringFilter<"Contract"> | string
    title?: StringFilter<"Contract"> | string
    description?: StringFilter<"Contract"> | string
    totalValue?: DecimalFilter<"Contract"> | Decimal | DecimalJsLike | number | string
    startDate?: DateTimeFilter<"Contract"> | Date | string
    endDate?: DateTimeFilter<"Contract"> | Date | string
    status?: EnumContractStatusFilter<"Contract"> | $Enums.ContractStatus
    signedAt?: DateTimeNullableFilter<"Contract"> | Date | string | null
    createdAt?: DateTimeFilter<"Contract"> | Date | string
    updatedAt?: DateTimeFilter<"Contract"> | Date | string
    bidding?: XOR<BiddingRelationFilter, BiddingWhereInput>
    proposal?: XOR<ProposalRelationFilter, ProposalWhereInput>
    publicEntity?: XOR<PublicEntityRelationFilter, PublicEntityWhereInput>
    supplier?: XOR<SupplierRelationFilter, SupplierWhereInput>
    documents?: DocumentListRelationFilter
  }, "id" | "biddingId" | "proposalId" | "contractNumber">

  export type ContractOrderByWithAggregationInput = {
    id?: SortOrder
    biddingId?: SortOrder
    proposalId?: SortOrder
    publicEntityId?: SortOrder
    supplierId?: SortOrder
    contractNumber?: SortOrder
    title?: SortOrder
    description?: SortOrder
    totalValue?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    signedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ContractCountOrderByAggregateInput
    _avg?: ContractAvgOrderByAggregateInput
    _max?: ContractMaxOrderByAggregateInput
    _min?: ContractMinOrderByAggregateInput
    _sum?: ContractSumOrderByAggregateInput
  }

  export type ContractScalarWhereWithAggregatesInput = {
    AND?: ContractScalarWhereWithAggregatesInput | ContractScalarWhereWithAggregatesInput[]
    OR?: ContractScalarWhereWithAggregatesInput[]
    NOT?: ContractScalarWhereWithAggregatesInput | ContractScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Contract"> | string
    biddingId?: StringWithAggregatesFilter<"Contract"> | string
    proposalId?: StringWithAggregatesFilter<"Contract"> | string
    publicEntityId?: StringWithAggregatesFilter<"Contract"> | string
    supplierId?: StringWithAggregatesFilter<"Contract"> | string
    contractNumber?: StringWithAggregatesFilter<"Contract"> | string
    title?: StringWithAggregatesFilter<"Contract"> | string
    description?: StringWithAggregatesFilter<"Contract"> | string
    totalValue?: DecimalWithAggregatesFilter<"Contract"> | Decimal | DecimalJsLike | number | string
    startDate?: DateTimeWithAggregatesFilter<"Contract"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Contract"> | Date | string
    status?: EnumContractStatusWithAggregatesFilter<"Contract"> | $Enums.ContractStatus
    signedAt?: DateTimeNullableWithAggregatesFilter<"Contract"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Contract"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Contract"> | Date | string
  }

  export type DocumentWhereInput = {
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    id?: StringFilter<"Document"> | string
    filename?: StringFilter<"Document"> | string
    originalName?: StringFilter<"Document"> | string
    mimeType?: StringFilter<"Document"> | string
    size?: IntFilter<"Document"> | number
    path?: StringFilter<"Document"> | string
    type?: EnumDocumentTypeFilter<"Document"> | $Enums.DocumentType
    description?: StringNullableFilter<"Document"> | string | null
    isPublic?: BoolFilter<"Document"> | boolean
    uploadedBy?: StringFilter<"Document"> | string
    createdAt?: DateTimeFilter<"Document"> | Date | string
    updatedAt?: DateTimeFilter<"Document"> | Date | string
    biddingId?: StringNullableFilter<"Document"> | string | null
    proposalId?: StringNullableFilter<"Document"> | string | null
    contractId?: StringNullableFilter<"Document"> | string | null
    supplierId?: StringNullableFilter<"Document"> | string | null
    publicEntityId?: StringNullableFilter<"Document"> | string | null
    bidding?: XOR<BiddingNullableRelationFilter, BiddingWhereInput> | null
    proposal?: XOR<ProposalNullableRelationFilter, ProposalWhereInput> | null
    contract?: XOR<ContractNullableRelationFilter, ContractWhereInput> | null
    supplier?: XOR<SupplierNullableRelationFilter, SupplierWhereInput> | null
    publicEntity?: XOR<PublicEntityNullableRelationFilter, PublicEntityWhereInput> | null
  }

  export type DocumentOrderByWithRelationInput = {
    id?: SortOrder
    filename?: SortOrder
    originalName?: SortOrder
    mimeType?: SortOrder
    size?: SortOrder
    path?: SortOrder
    type?: SortOrder
    description?: SortOrderInput | SortOrder
    isPublic?: SortOrder
    uploadedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    biddingId?: SortOrderInput | SortOrder
    proposalId?: SortOrderInput | SortOrder
    contractId?: SortOrderInput | SortOrder
    supplierId?: SortOrderInput | SortOrder
    publicEntityId?: SortOrderInput | SortOrder
    bidding?: BiddingOrderByWithRelationInput
    proposal?: ProposalOrderByWithRelationInput
    contract?: ContractOrderByWithRelationInput
    supplier?: SupplierOrderByWithRelationInput
    publicEntity?: PublicEntityOrderByWithRelationInput
  }

  export type DocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    filename?: StringFilter<"Document"> | string
    originalName?: StringFilter<"Document"> | string
    mimeType?: StringFilter<"Document"> | string
    size?: IntFilter<"Document"> | number
    path?: StringFilter<"Document"> | string
    type?: EnumDocumentTypeFilter<"Document"> | $Enums.DocumentType
    description?: StringNullableFilter<"Document"> | string | null
    isPublic?: BoolFilter<"Document"> | boolean
    uploadedBy?: StringFilter<"Document"> | string
    createdAt?: DateTimeFilter<"Document"> | Date | string
    updatedAt?: DateTimeFilter<"Document"> | Date | string
    biddingId?: StringNullableFilter<"Document"> | string | null
    proposalId?: StringNullableFilter<"Document"> | string | null
    contractId?: StringNullableFilter<"Document"> | string | null
    supplierId?: StringNullableFilter<"Document"> | string | null
    publicEntityId?: StringNullableFilter<"Document"> | string | null
    bidding?: XOR<BiddingNullableRelationFilter, BiddingWhereInput> | null
    proposal?: XOR<ProposalNullableRelationFilter, ProposalWhereInput> | null
    contract?: XOR<ContractNullableRelationFilter, ContractWhereInput> | null
    supplier?: XOR<SupplierNullableRelationFilter, SupplierWhereInput> | null
    publicEntity?: XOR<PublicEntityNullableRelationFilter, PublicEntityWhereInput> | null
  }, "id">

  export type DocumentOrderByWithAggregationInput = {
    id?: SortOrder
    filename?: SortOrder
    originalName?: SortOrder
    mimeType?: SortOrder
    size?: SortOrder
    path?: SortOrder
    type?: SortOrder
    description?: SortOrderInput | SortOrder
    isPublic?: SortOrder
    uploadedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    biddingId?: SortOrderInput | SortOrder
    proposalId?: SortOrderInput | SortOrder
    contractId?: SortOrderInput | SortOrder
    supplierId?: SortOrderInput | SortOrder
    publicEntityId?: SortOrderInput | SortOrder
    _count?: DocumentCountOrderByAggregateInput
    _avg?: DocumentAvgOrderByAggregateInput
    _max?: DocumentMaxOrderByAggregateInput
    _min?: DocumentMinOrderByAggregateInput
    _sum?: DocumentSumOrderByAggregateInput
  }

  export type DocumentScalarWhereWithAggregatesInput = {
    AND?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    OR?: DocumentScalarWhereWithAggregatesInput[]
    NOT?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Document"> | string
    filename?: StringWithAggregatesFilter<"Document"> | string
    originalName?: StringWithAggregatesFilter<"Document"> | string
    mimeType?: StringWithAggregatesFilter<"Document"> | string
    size?: IntWithAggregatesFilter<"Document"> | number
    path?: StringWithAggregatesFilter<"Document"> | string
    type?: EnumDocumentTypeWithAggregatesFilter<"Document"> | $Enums.DocumentType
    description?: StringNullableWithAggregatesFilter<"Document"> | string | null
    isPublic?: BoolWithAggregatesFilter<"Document"> | boolean
    uploadedBy?: StringWithAggregatesFilter<"Document"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Document"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Document"> | Date | string
    biddingId?: StringNullableWithAggregatesFilter<"Document"> | string | null
    proposalId?: StringNullableWithAggregatesFilter<"Document"> | string | null
    contractId?: StringNullableWithAggregatesFilter<"Document"> | string | null
    supplierId?: StringNullableWithAggregatesFilter<"Document"> | string | null
    publicEntityId?: StringNullableWithAggregatesFilter<"Document"> | string | null
  }

  export type BiddingCategoryWhereInput = {
    AND?: BiddingCategoryWhereInput | BiddingCategoryWhereInput[]
    OR?: BiddingCategoryWhereInput[]
    NOT?: BiddingCategoryWhereInput | BiddingCategoryWhereInput[]
    id?: StringFilter<"BiddingCategory"> | string
    biddingId?: StringFilter<"BiddingCategory"> | string
    categoryId?: StringFilter<"BiddingCategory"> | string
    createdAt?: DateTimeFilter<"BiddingCategory"> | Date | string
    bidding?: XOR<BiddingRelationFilter, BiddingWhereInput>
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
  }

  export type BiddingCategoryOrderByWithRelationInput = {
    id?: SortOrder
    biddingId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    bidding?: BiddingOrderByWithRelationInput
    category?: CategoryOrderByWithRelationInput
  }

  export type BiddingCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    biddingId_categoryId?: BiddingCategoryBiddingIdCategoryIdCompoundUniqueInput
    AND?: BiddingCategoryWhereInput | BiddingCategoryWhereInput[]
    OR?: BiddingCategoryWhereInput[]
    NOT?: BiddingCategoryWhereInput | BiddingCategoryWhereInput[]
    biddingId?: StringFilter<"BiddingCategory"> | string
    categoryId?: StringFilter<"BiddingCategory"> | string
    createdAt?: DateTimeFilter<"BiddingCategory"> | Date | string
    bidding?: XOR<BiddingRelationFilter, BiddingWhereInput>
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
  }, "id" | "biddingId_categoryId">

  export type BiddingCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    biddingId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    _count?: BiddingCategoryCountOrderByAggregateInput
    _max?: BiddingCategoryMaxOrderByAggregateInput
    _min?: BiddingCategoryMinOrderByAggregateInput
  }

  export type BiddingCategoryScalarWhereWithAggregatesInput = {
    AND?: BiddingCategoryScalarWhereWithAggregatesInput | BiddingCategoryScalarWhereWithAggregatesInput[]
    OR?: BiddingCategoryScalarWhereWithAggregatesInput[]
    NOT?: BiddingCategoryScalarWhereWithAggregatesInput | BiddingCategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BiddingCategory"> | string
    biddingId?: StringWithAggregatesFilter<"BiddingCategory"> | string
    categoryId?: StringWithAggregatesFilter<"BiddingCategory"> | string
    createdAt?: DateTimeWithAggregatesFilter<"BiddingCategory"> | Date | string
  }

  export type SupplierCategoryWhereInput = {
    AND?: SupplierCategoryWhereInput | SupplierCategoryWhereInput[]
    OR?: SupplierCategoryWhereInput[]
    NOT?: SupplierCategoryWhereInput | SupplierCategoryWhereInput[]
    id?: StringFilter<"SupplierCategory"> | string
    supplierId?: StringFilter<"SupplierCategory"> | string
    categoryId?: StringFilter<"SupplierCategory"> | string
    createdAt?: DateTimeFilter<"SupplierCategory"> | Date | string
    supplier?: XOR<SupplierRelationFilter, SupplierWhereInput>
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
  }

  export type SupplierCategoryOrderByWithRelationInput = {
    id?: SortOrder
    supplierId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    supplier?: SupplierOrderByWithRelationInput
    category?: CategoryOrderByWithRelationInput
  }

  export type SupplierCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    supplierId_categoryId?: SupplierCategorySupplierIdCategoryIdCompoundUniqueInput
    AND?: SupplierCategoryWhereInput | SupplierCategoryWhereInput[]
    OR?: SupplierCategoryWhereInput[]
    NOT?: SupplierCategoryWhereInput | SupplierCategoryWhereInput[]
    supplierId?: StringFilter<"SupplierCategory"> | string
    categoryId?: StringFilter<"SupplierCategory"> | string
    createdAt?: DateTimeFilter<"SupplierCategory"> | Date | string
    supplier?: XOR<SupplierRelationFilter, SupplierWhereInput>
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
  }, "id" | "supplierId_categoryId">

  export type SupplierCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    supplierId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    _count?: SupplierCategoryCountOrderByAggregateInput
    _max?: SupplierCategoryMaxOrderByAggregateInput
    _min?: SupplierCategoryMinOrderByAggregateInput
  }

  export type SupplierCategoryScalarWhereWithAggregatesInput = {
    AND?: SupplierCategoryScalarWhereWithAggregatesInput | SupplierCategoryScalarWhereWithAggregatesInput[]
    OR?: SupplierCategoryScalarWhereWithAggregatesInput[]
    NOT?: SupplierCategoryScalarWhereWithAggregatesInput | SupplierCategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SupplierCategory"> | string
    supplierId?: StringWithAggregatesFilter<"SupplierCategory"> | string
    categoryId?: StringWithAggregatesFilter<"SupplierCategory"> | string
    createdAt?: DateTimeWithAggregatesFilter<"SupplierCategory"> | Date | string
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    userId?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    resource?: StringFilter<"AuditLog"> | string
    resourceId?: StringNullableFilter<"AuditLog"> | string | null
    oldValues?: JsonNullableFilter<"AuditLog">
    newValues?: JsonNullableFilter<"AuditLog">
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    resource?: SortOrder
    resourceId?: SortOrderInput | SortOrder
    oldValues?: SortOrderInput | SortOrder
    newValues?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    userId?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    resource?: StringFilter<"AuditLog"> | string
    resourceId?: StringNullableFilter<"AuditLog"> | string | null
    oldValues?: JsonNullableFilter<"AuditLog">
    newValues?: JsonNullableFilter<"AuditLog">
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    resource?: SortOrder
    resourceId?: SortOrderInput | SortOrder
    oldValues?: SortOrderInput | SortOrder
    newValues?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditLog"> | string
    userId?: StringWithAggregatesFilter<"AuditLog"> | string
    action?: StringWithAggregatesFilter<"AuditLog"> | string
    resource?: StringWithAggregatesFilter<"AuditLog"> | string
    resourceId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    oldValues?: JsonNullableWithAggregatesFilter<"AuditLog">
    newValues?: JsonNullableWithAggregatesFilter<"AuditLog">
    ipAddress?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
  }

  export type UserSessionWhereInput = {
    AND?: UserSessionWhereInput | UserSessionWhereInput[]
    OR?: UserSessionWhereInput[]
    NOT?: UserSessionWhereInput | UserSessionWhereInput[]
    id?: StringFilter<"UserSession"> | string
    userId?: StringFilter<"UserSession"> | string
    token?: StringFilter<"UserSession"> | string
    ipAddress?: StringNullableFilter<"UserSession"> | string | null
    userAgent?: StringNullableFilter<"UserSession"> | string | null
    expiresAt?: DateTimeFilter<"UserSession"> | Date | string
    createdAt?: DateTimeFilter<"UserSession"> | Date | string
    updatedAt?: DateTimeFilter<"UserSession"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserSessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: UserSessionWhereInput | UserSessionWhereInput[]
    OR?: UserSessionWhereInput[]
    NOT?: UserSessionWhereInput | UserSessionWhereInput[]
    userId?: StringFilter<"UserSession"> | string
    ipAddress?: StringNullableFilter<"UserSession"> | string | null
    userAgent?: StringNullableFilter<"UserSession"> | string | null
    expiresAt?: DateTimeFilter<"UserSession"> | Date | string
    createdAt?: DateTimeFilter<"UserSession"> | Date | string
    updatedAt?: DateTimeFilter<"UserSession"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "token">

  export type UserSessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserSessionCountOrderByAggregateInput
    _max?: UserSessionMaxOrderByAggregateInput
    _min?: UserSessionMinOrderByAggregateInput
  }

  export type UserSessionScalarWhereWithAggregatesInput = {
    AND?: UserSessionScalarWhereWithAggregatesInput | UserSessionScalarWhereWithAggregatesInput[]
    OR?: UserSessionScalarWhereWithAggregatesInput[]
    NOT?: UserSessionScalarWhereWithAggregatesInput | UserSessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserSession"> | string
    userId?: StringWithAggregatesFilter<"UserSession"> | string
    token?: StringWithAggregatesFilter<"UserSession"> | string
    ipAddress?: StringNullableWithAggregatesFilter<"UserSession"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"UserSession"> | string | null
    expiresAt?: DateTimeWithAggregatesFilter<"UserSession"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"UserSession"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserSession"> | Date | string
  }

  export type SystemConfigWhereInput = {
    AND?: SystemConfigWhereInput | SystemConfigWhereInput[]
    OR?: SystemConfigWhereInput[]
    NOT?: SystemConfigWhereInput | SystemConfigWhereInput[]
    id?: StringFilter<"SystemConfig"> | string
    key?: StringFilter<"SystemConfig"> | string
    value?: StringFilter<"SystemConfig"> | string
    type?: StringFilter<"SystemConfig"> | string
    description?: StringNullableFilter<"SystemConfig"> | string | null
    isPublic?: BoolFilter<"SystemConfig"> | boolean
    createdAt?: DateTimeFilter<"SystemConfig"> | Date | string
    updatedAt?: DateTimeFilter<"SystemConfig"> | Date | string
  }

  export type SystemConfigOrderByWithRelationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    type?: SortOrder
    description?: SortOrderInput | SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemConfigWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    key?: string
    AND?: SystemConfigWhereInput | SystemConfigWhereInput[]
    OR?: SystemConfigWhereInput[]
    NOT?: SystemConfigWhereInput | SystemConfigWhereInput[]
    value?: StringFilter<"SystemConfig"> | string
    type?: StringFilter<"SystemConfig"> | string
    description?: StringNullableFilter<"SystemConfig"> | string | null
    isPublic?: BoolFilter<"SystemConfig"> | boolean
    createdAt?: DateTimeFilter<"SystemConfig"> | Date | string
    updatedAt?: DateTimeFilter<"SystemConfig"> | Date | string
  }, "id" | "key">

  export type SystemConfigOrderByWithAggregationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    type?: SortOrder
    description?: SortOrderInput | SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SystemConfigCountOrderByAggregateInput
    _max?: SystemConfigMaxOrderByAggregateInput
    _min?: SystemConfigMinOrderByAggregateInput
  }

  export type SystemConfigScalarWhereWithAggregatesInput = {
    AND?: SystemConfigScalarWhereWithAggregatesInput | SystemConfigScalarWhereWithAggregatesInput[]
    OR?: SystemConfigScalarWhereWithAggregatesInput[]
    NOT?: SystemConfigScalarWhereWithAggregatesInput | SystemConfigScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SystemConfig"> | string
    key?: StringWithAggregatesFilter<"SystemConfig"> | string
    value?: StringWithAggregatesFilter<"SystemConfig"> | string
    type?: StringWithAggregatesFilter<"SystemConfig"> | string
    description?: StringNullableWithAggregatesFilter<"SystemConfig"> | string | null
    isPublic?: BoolWithAggregatesFilter<"SystemConfig"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"SystemConfig"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SystemConfig"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringNullableFilter<"Notification"> | string | null
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    data?: JsonNullableFilter<"Notification">
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    data?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: StringNullableFilter<"Notification"> | string | null
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    data?: JsonNullableFilter<"Notification">
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    data?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    userId?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    type?: StringWithAggregatesFilter<"Notification"> | string
    isRead?: BoolWithAggregatesFilter<"Notification"> | boolean
    data?: JsonNullableWithAggregatesFilter<"Notification">
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type UserPermissionWhereInput = {
    AND?: UserPermissionWhereInput | UserPermissionWhereInput[]
    OR?: UserPermissionWhereInput[]
    NOT?: UserPermissionWhereInput | UserPermissionWhereInput[]
    id?: StringFilter<"UserPermission"> | string
    userId?: StringFilter<"UserPermission"> | string
    permission?: EnumPermissionFilter<"UserPermission"> | $Enums.Permission
    grantedBy?: StringNullableFilter<"UserPermission"> | string | null
    grantedAt?: DateTimeFilter<"UserPermission"> | Date | string
    expiresAt?: DateTimeNullableFilter<"UserPermission"> | Date | string | null
    isActive?: BoolFilter<"UserPermission"> | boolean
    createdAt?: DateTimeFilter<"UserPermission"> | Date | string
    updatedAt?: DateTimeFilter<"UserPermission"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserPermissionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    permission?: SortOrder
    grantedBy?: SortOrderInput | SortOrder
    grantedAt?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserPermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_permission?: UserPermissionUserIdPermissionCompoundUniqueInput
    AND?: UserPermissionWhereInput | UserPermissionWhereInput[]
    OR?: UserPermissionWhereInput[]
    NOT?: UserPermissionWhereInput | UserPermissionWhereInput[]
    userId?: StringFilter<"UserPermission"> | string
    permission?: EnumPermissionFilter<"UserPermission"> | $Enums.Permission
    grantedBy?: StringNullableFilter<"UserPermission"> | string | null
    grantedAt?: DateTimeFilter<"UserPermission"> | Date | string
    expiresAt?: DateTimeNullableFilter<"UserPermission"> | Date | string | null
    isActive?: BoolFilter<"UserPermission"> | boolean
    createdAt?: DateTimeFilter<"UserPermission"> | Date | string
    updatedAt?: DateTimeFilter<"UserPermission"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId_permission">

  export type UserPermissionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    permission?: SortOrder
    grantedBy?: SortOrderInput | SortOrder
    grantedAt?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserPermissionCountOrderByAggregateInput
    _max?: UserPermissionMaxOrderByAggregateInput
    _min?: UserPermissionMinOrderByAggregateInput
  }

  export type UserPermissionScalarWhereWithAggregatesInput = {
    AND?: UserPermissionScalarWhereWithAggregatesInput | UserPermissionScalarWhereWithAggregatesInput[]
    OR?: UserPermissionScalarWhereWithAggregatesInput[]
    NOT?: UserPermissionScalarWhereWithAggregatesInput | UserPermissionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserPermission"> | string
    userId?: StringWithAggregatesFilter<"UserPermission"> | string
    permission?: EnumPermissionWithAggregatesFilter<"UserPermission"> | $Enums.Permission
    grantedBy?: StringNullableWithAggregatesFilter<"UserPermission"> | string | null
    grantedAt?: DateTimeWithAggregatesFilter<"UserPermission"> | Date | string
    expiresAt?: DateTimeNullableWithAggregatesFilter<"UserPermission"> | Date | string | null
    isActive?: BoolWithAggregatesFilter<"UserPermission"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"UserPermission"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserPermission"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    firstName: string
    lastName: string
    phone?: string | null
    avatar?: string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    supplier?: SupplierCreateNestedOneWithoutUserInput
    publicEntity?: PublicEntityCreateNestedOneWithoutUserInput
    citizen?: CitizenCreateNestedOneWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    firstName: string
    lastName: string
    phone?: string | null
    avatar?: string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    supplier?: SupplierUncheckedCreateNestedOneWithoutUserInput
    publicEntity?: PublicEntityUncheckedCreateNestedOneWithoutUserInput
    citizen?: CitizenUncheckedCreateNestedOneWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    supplier?: SupplierUpdateOneWithoutUserNestedInput
    publicEntity?: PublicEntityUpdateOneWithoutUserNestedInput
    citizen?: CitizenUpdateOneWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    supplier?: SupplierUncheckedUpdateOneWithoutUserNestedInput
    publicEntity?: PublicEntityUncheckedUpdateOneWithoutUserNestedInput
    citizen?: CitizenUncheckedUpdateOneWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    firstName: string
    lastName: string
    phone?: string | null
    avatar?: string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SupplierCreateInput = {
    id?: string
    companyName: string
    tradeName?: string | null
    cnpj: string
    stateRegistration?: string | null
    municipalRegistration?: string | null
    address: string
    city: string
    state: string
    zipCode: string
    website?: string | null
    description?: string | null
    isActive?: boolean
    verifiedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSupplierInput
    proposals?: ProposalCreateNestedManyWithoutSupplierInput
    contracts?: ContractCreateNestedManyWithoutSupplierInput
    documents?: DocumentCreateNestedManyWithoutSupplierInput
    categories?: SupplierCategoryCreateNestedManyWithoutSupplierInput
  }

  export type SupplierUncheckedCreateInput = {
    id?: string
    userId: string
    companyName: string
    tradeName?: string | null
    cnpj: string
    stateRegistration?: string | null
    municipalRegistration?: string | null
    address: string
    city: string
    state: string
    zipCode: string
    website?: string | null
    description?: string | null
    isActive?: boolean
    verifiedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    proposals?: ProposalUncheckedCreateNestedManyWithoutSupplierInput
    contracts?: ContractUncheckedCreateNestedManyWithoutSupplierInput
    documents?: DocumentUncheckedCreateNestedManyWithoutSupplierInput
    categories?: SupplierCategoryUncheckedCreateNestedManyWithoutSupplierInput
  }

  export type SupplierUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    tradeName?: NullableStringFieldUpdateOperationsInput | string | null
    cnpj?: StringFieldUpdateOperationsInput | string
    stateRegistration?: NullableStringFieldUpdateOperationsInput | string | null
    municipalRegistration?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSupplierNestedInput
    proposals?: ProposalUpdateManyWithoutSupplierNestedInput
    contracts?: ContractUpdateManyWithoutSupplierNestedInput
    documents?: DocumentUpdateManyWithoutSupplierNestedInput
    categories?: SupplierCategoryUpdateManyWithoutSupplierNestedInput
  }

  export type SupplierUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    tradeName?: NullableStringFieldUpdateOperationsInput | string | null
    cnpj?: StringFieldUpdateOperationsInput | string
    stateRegistration?: NullableStringFieldUpdateOperationsInput | string | null
    municipalRegistration?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proposals?: ProposalUncheckedUpdateManyWithoutSupplierNestedInput
    contracts?: ContractUncheckedUpdateManyWithoutSupplierNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutSupplierNestedInput
    categories?: SupplierCategoryUncheckedUpdateManyWithoutSupplierNestedInput
  }

  export type SupplierCreateManyInput = {
    id?: string
    userId: string
    companyName: string
    tradeName?: string | null
    cnpj: string
    stateRegistration?: string | null
    municipalRegistration?: string | null
    address: string
    city: string
    state: string
    zipCode: string
    website?: string | null
    description?: string | null
    isActive?: boolean
    verifiedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SupplierUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    tradeName?: NullableStringFieldUpdateOperationsInput | string | null
    cnpj?: StringFieldUpdateOperationsInput | string
    stateRegistration?: NullableStringFieldUpdateOperationsInput | string | null
    municipalRegistration?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SupplierUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    tradeName?: NullableStringFieldUpdateOperationsInput | string | null
    cnpj?: StringFieldUpdateOperationsInput | string
    stateRegistration?: NullableStringFieldUpdateOperationsInput | string | null
    municipalRegistration?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PublicEntityCreateInput = {
    id?: string
    name: string
    cnpj: string
    entityType: string
    address: string
    city: string
    state: string
    zipCode: string
    phone: string
    website?: string | null
    isActive?: boolean
    verifiedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPublicEntityInput
    biddings?: BiddingCreateNestedManyWithoutPublicEntityInput
    contracts?: ContractCreateNestedManyWithoutPublicEntityInput
    documents?: DocumentCreateNestedManyWithoutPublicEntityInput
  }

  export type PublicEntityUncheckedCreateInput = {
    id?: string
    userId: string
    name: string
    cnpj: string
    entityType: string
    address: string
    city: string
    state: string
    zipCode: string
    phone: string
    website?: string | null
    isActive?: boolean
    verifiedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    biddings?: BiddingUncheckedCreateNestedManyWithoutPublicEntityInput
    contracts?: ContractUncheckedCreateNestedManyWithoutPublicEntityInput
    documents?: DocumentUncheckedCreateNestedManyWithoutPublicEntityInput
  }

  export type PublicEntityUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPublicEntityNestedInput
    biddings?: BiddingUpdateManyWithoutPublicEntityNestedInput
    contracts?: ContractUpdateManyWithoutPublicEntityNestedInput
    documents?: DocumentUpdateManyWithoutPublicEntityNestedInput
  }

  export type PublicEntityUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    biddings?: BiddingUncheckedUpdateManyWithoutPublicEntityNestedInput
    contracts?: ContractUncheckedUpdateManyWithoutPublicEntityNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutPublicEntityNestedInput
  }

  export type PublicEntityCreateManyInput = {
    id?: string
    userId: string
    name: string
    cnpj: string
    entityType: string
    address: string
    city: string
    state: string
    zipCode: string
    phone: string
    website?: string | null
    isActive?: boolean
    verifiedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PublicEntityUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PublicEntityUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CitizenCreateInput = {
    id?: string
    cpf?: string | null
    dateOfBirth?: Date | string | null
    profession?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    zipCode?: string | null
    interests?: CitizenCreateinterestsInput | string[]
    isActive?: boolean
    verifiedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCitizenInput
  }

  export type CitizenUncheckedCreateInput = {
    id?: string
    userId: string
    cpf?: string | null
    dateOfBirth?: Date | string | null
    profession?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    zipCode?: string | null
    interests?: CitizenCreateinterestsInput | string[]
    isActive?: boolean
    verifiedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CitizenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: CitizenUpdateinterestsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCitizenNestedInput
  }

  export type CitizenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: CitizenUpdateinterestsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CitizenCreateManyInput = {
    id?: string
    userId: string
    cpf?: string | null
    dateOfBirth?: Date | string | null
    profession?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    zipCode?: string | null
    interests?: CitizenCreateinterestsInput | string[]
    isActive?: boolean
    verifiedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CitizenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: CitizenUpdateinterestsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CitizenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: CitizenUpdateinterestsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryCreateInput = {
    id?: string
    name: string
    description?: string | null
    code: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: CategoryCreateNestedOneWithoutChildrenInput
    children?: CategoryCreateNestedManyWithoutParentInput
    biddings?: BiddingCategoryCreateNestedManyWithoutCategoryInput
    suppliers?: SupplierCategoryCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    code: string
    parentId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: CategoryUncheckedCreateNestedManyWithoutParentInput
    biddings?: BiddingCategoryUncheckedCreateNestedManyWithoutCategoryInput
    suppliers?: SupplierCategoryUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: CategoryUpdateOneWithoutChildrenNestedInput
    children?: CategoryUpdateManyWithoutParentNestedInput
    biddings?: BiddingCategoryUpdateManyWithoutCategoryNestedInput
    suppliers?: SupplierCategoryUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    biddings?: BiddingCategoryUncheckedUpdateManyWithoutCategoryNestedInput
    suppliers?: SupplierCategoryUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    code: string
    parentId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BiddingCreateInput = {
    id?: string
    title: string
    description: string
    biddingNumber: string
    type: $Enums.BiddingType
    status?: $Enums.BiddingStatus
    estimatedValue: Decimal | DecimalJsLike | number | string
    openingDate: Date | string
    closingDate: Date | string
    deliveryLocation: string
    deliveryDeadline: Date | string
    requirements: string
    evaluationCriteria: string
    isPublic?: boolean
    publishedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    publicEntity: PublicEntityCreateNestedOneWithoutBiddingsInput
    proposals?: ProposalCreateNestedManyWithoutBiddingInput
    documents?: DocumentCreateNestedManyWithoutBiddingInput
    categories?: BiddingCategoryCreateNestedManyWithoutBiddingInput
    contract?: ContractCreateNestedOneWithoutBiddingInput
  }

  export type BiddingUncheckedCreateInput = {
    id?: string
    publicEntityId: string
    title: string
    description: string
    biddingNumber: string
    type: $Enums.BiddingType
    status?: $Enums.BiddingStatus
    estimatedValue: Decimal | DecimalJsLike | number | string
    openingDate: Date | string
    closingDate: Date | string
    deliveryLocation: string
    deliveryDeadline: Date | string
    requirements: string
    evaluationCriteria: string
    isPublic?: boolean
    publishedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    proposals?: ProposalUncheckedCreateNestedManyWithoutBiddingInput
    documents?: DocumentUncheckedCreateNestedManyWithoutBiddingInput
    categories?: BiddingCategoryUncheckedCreateNestedManyWithoutBiddingInput
    contract?: ContractUncheckedCreateNestedOneWithoutBiddingInput
  }

  export type BiddingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    biddingNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumBiddingTypeFieldUpdateOperationsInput | $Enums.BiddingType
    status?: EnumBiddingStatusFieldUpdateOperationsInput | $Enums.BiddingStatus
    estimatedValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    openingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    closingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryLocation?: StringFieldUpdateOperationsInput | string
    deliveryDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    requirements?: StringFieldUpdateOperationsInput | string
    evaluationCriteria?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publicEntity?: PublicEntityUpdateOneRequiredWithoutBiddingsNestedInput
    proposals?: ProposalUpdateManyWithoutBiddingNestedInput
    documents?: DocumentUpdateManyWithoutBiddingNestedInput
    categories?: BiddingCategoryUpdateManyWithoutBiddingNestedInput
    contract?: ContractUpdateOneWithoutBiddingNestedInput
  }

  export type BiddingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    publicEntityId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    biddingNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumBiddingTypeFieldUpdateOperationsInput | $Enums.BiddingType
    status?: EnumBiddingStatusFieldUpdateOperationsInput | $Enums.BiddingStatus
    estimatedValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    openingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    closingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryLocation?: StringFieldUpdateOperationsInput | string
    deliveryDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    requirements?: StringFieldUpdateOperationsInput | string
    evaluationCriteria?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proposals?: ProposalUncheckedUpdateManyWithoutBiddingNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutBiddingNestedInput
    categories?: BiddingCategoryUncheckedUpdateManyWithoutBiddingNestedInput
    contract?: ContractUncheckedUpdateOneWithoutBiddingNestedInput
  }

  export type BiddingCreateManyInput = {
    id?: string
    publicEntityId: string
    title: string
    description: string
    biddingNumber: string
    type: $Enums.BiddingType
    status?: $Enums.BiddingStatus
    estimatedValue: Decimal | DecimalJsLike | number | string
    openingDate: Date | string
    closingDate: Date | string
    deliveryLocation: string
    deliveryDeadline: Date | string
    requirements: string
    evaluationCriteria: string
    isPublic?: boolean
    publishedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BiddingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    biddingNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumBiddingTypeFieldUpdateOperationsInput | $Enums.BiddingType
    status?: EnumBiddingStatusFieldUpdateOperationsInput | $Enums.BiddingStatus
    estimatedValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    openingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    closingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryLocation?: StringFieldUpdateOperationsInput | string
    deliveryDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    requirements?: StringFieldUpdateOperationsInput | string
    evaluationCriteria?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BiddingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    publicEntityId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    biddingNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumBiddingTypeFieldUpdateOperationsInput | $Enums.BiddingType
    status?: EnumBiddingStatusFieldUpdateOperationsInput | $Enums.BiddingStatus
    estimatedValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    openingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    closingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryLocation?: StringFieldUpdateOperationsInput | string
    deliveryDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    requirements?: StringFieldUpdateOperationsInput | string
    evaluationCriteria?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProposalCreateInput = {
    id?: string
    totalValue: Decimal | DecimalJsLike | number | string
    description: string
    status?: $Enums.ProposalStatus
    submittedAt?: Date | string | null
    validUntil: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bidding: BiddingCreateNestedOneWithoutProposalsInput
    supplier: SupplierCreateNestedOneWithoutProposalsInput
    items?: ProposalItemCreateNestedManyWithoutProposalInput
    documents?: DocumentCreateNestedManyWithoutProposalInput
    contract?: ContractCreateNestedOneWithoutProposalInput
  }

  export type ProposalUncheckedCreateInput = {
    id?: string
    biddingId: string
    supplierId: string
    totalValue: Decimal | DecimalJsLike | number | string
    description: string
    status?: $Enums.ProposalStatus
    submittedAt?: Date | string | null
    validUntil: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ProposalItemUncheckedCreateNestedManyWithoutProposalInput
    documents?: DocumentUncheckedCreateNestedManyWithoutProposalInput
    contract?: ContractUncheckedCreateNestedOneWithoutProposalInput
  }

  export type ProposalUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumProposalStatusFieldUpdateOperationsInput | $Enums.ProposalStatus
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bidding?: BiddingUpdateOneRequiredWithoutProposalsNestedInput
    supplier?: SupplierUpdateOneRequiredWithoutProposalsNestedInput
    items?: ProposalItemUpdateManyWithoutProposalNestedInput
    documents?: DocumentUpdateManyWithoutProposalNestedInput
    contract?: ContractUpdateOneWithoutProposalNestedInput
  }

  export type ProposalUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    biddingId?: StringFieldUpdateOperationsInput | string
    supplierId?: StringFieldUpdateOperationsInput | string
    totalValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumProposalStatusFieldUpdateOperationsInput | $Enums.ProposalStatus
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ProposalItemUncheckedUpdateManyWithoutProposalNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutProposalNestedInput
    contract?: ContractUncheckedUpdateOneWithoutProposalNestedInput
  }

  export type ProposalCreateManyInput = {
    id?: string
    biddingId: string
    supplierId: string
    totalValue: Decimal | DecimalJsLike | number | string
    description: string
    status?: $Enums.ProposalStatus
    submittedAt?: Date | string | null
    validUntil: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProposalUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumProposalStatusFieldUpdateOperationsInput | $Enums.ProposalStatus
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProposalUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    biddingId?: StringFieldUpdateOperationsInput | string
    supplierId?: StringFieldUpdateOperationsInput | string
    totalValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumProposalStatusFieldUpdateOperationsInput | $Enums.ProposalStatus
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProposalItemCreateInput = {
    id?: string
    description: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    totalPrice: Decimal | DecimalJsLike | number | string
    brand?: string | null
    model?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    proposal: ProposalCreateNestedOneWithoutItemsInput
  }

  export type ProposalItemUncheckedCreateInput = {
    id?: string
    proposalId: string
    description: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    totalPrice: Decimal | DecimalJsLike | number | string
    brand?: string | null
    model?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProposalItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proposal?: ProposalUpdateOneRequiredWithoutItemsNestedInput
  }

  export type ProposalItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    proposalId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProposalItemCreateManyInput = {
    id?: string
    proposalId: string
    description: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    totalPrice: Decimal | DecimalJsLike | number | string
    brand?: string | null
    model?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProposalItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProposalItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    proposalId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractCreateInput = {
    id?: string
    contractNumber: string
    title: string
    description: string
    totalValue: Decimal | DecimalJsLike | number | string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.ContractStatus
    signedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bidding: BiddingCreateNestedOneWithoutContractInput
    proposal: ProposalCreateNestedOneWithoutContractInput
    publicEntity: PublicEntityCreateNestedOneWithoutContractsInput
    supplier: SupplierCreateNestedOneWithoutContractsInput
    documents?: DocumentCreateNestedManyWithoutContractInput
  }

  export type ContractUncheckedCreateInput = {
    id?: string
    biddingId: string
    proposalId: string
    publicEntityId: string
    supplierId: string
    contractNumber: string
    title: string
    description: string
    totalValue: Decimal | DecimalJsLike | number | string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.ContractStatus
    signedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: DocumentUncheckedCreateNestedManyWithoutContractInput
  }

  export type ContractUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    totalValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    signedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bidding?: BiddingUpdateOneRequiredWithoutContractNestedInput
    proposal?: ProposalUpdateOneRequiredWithoutContractNestedInput
    publicEntity?: PublicEntityUpdateOneRequiredWithoutContractsNestedInput
    supplier?: SupplierUpdateOneRequiredWithoutContractsNestedInput
    documents?: DocumentUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    biddingId?: StringFieldUpdateOperationsInput | string
    proposalId?: StringFieldUpdateOperationsInput | string
    publicEntityId?: StringFieldUpdateOperationsInput | string
    supplierId?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    totalValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    signedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: DocumentUncheckedUpdateManyWithoutContractNestedInput
  }

  export type ContractCreateManyInput = {
    id?: string
    biddingId: string
    proposalId: string
    publicEntityId: string
    supplierId: string
    contractNumber: string
    title: string
    description: string
    totalValue: Decimal | DecimalJsLike | number | string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.ContractStatus
    signedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContractUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    totalValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    signedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    biddingId?: StringFieldUpdateOperationsInput | string
    proposalId?: StringFieldUpdateOperationsInput | string
    publicEntityId?: StringFieldUpdateOperationsInput | string
    supplierId?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    totalValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    signedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentCreateInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    size: number
    path: string
    type: $Enums.DocumentType
    description?: string | null
    isPublic?: boolean
    uploadedBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    bidding?: BiddingCreateNestedOneWithoutDocumentsInput
    proposal?: ProposalCreateNestedOneWithoutDocumentsInput
    contract?: ContractCreateNestedOneWithoutDocumentsInput
    supplier?: SupplierCreateNestedOneWithoutDocumentsInput
    publicEntity?: PublicEntityCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    size: number
    path: string
    type: $Enums.DocumentType
    description?: string | null
    isPublic?: boolean
    uploadedBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    biddingId?: string | null
    proposalId?: string | null
    contractId?: string | null
    supplierId?: string | null
    publicEntityId?: string | null
  }

  export type DocumentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    uploadedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bidding?: BiddingUpdateOneWithoutDocumentsNestedInput
    proposal?: ProposalUpdateOneWithoutDocumentsNestedInput
    contract?: ContractUpdateOneWithoutDocumentsNestedInput
    supplier?: SupplierUpdateOneWithoutDocumentsNestedInput
    publicEntity?: PublicEntityUpdateOneWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    uploadedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    biddingId?: NullableStringFieldUpdateOperationsInput | string | null
    proposalId?: NullableStringFieldUpdateOperationsInput | string | null
    contractId?: NullableStringFieldUpdateOperationsInput | string | null
    supplierId?: NullableStringFieldUpdateOperationsInput | string | null
    publicEntityId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentCreateManyInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    size: number
    path: string
    type: $Enums.DocumentType
    description?: string | null
    isPublic?: boolean
    uploadedBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    biddingId?: string | null
    proposalId?: string | null
    contractId?: string | null
    supplierId?: string | null
    publicEntityId?: string | null
  }

  export type DocumentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    uploadedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    uploadedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    biddingId?: NullableStringFieldUpdateOperationsInput | string | null
    proposalId?: NullableStringFieldUpdateOperationsInput | string | null
    contractId?: NullableStringFieldUpdateOperationsInput | string | null
    supplierId?: NullableStringFieldUpdateOperationsInput | string | null
    publicEntityId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BiddingCategoryCreateInput = {
    id?: string
    createdAt?: Date | string
    bidding: BiddingCreateNestedOneWithoutCategoriesInput
    category: CategoryCreateNestedOneWithoutBiddingsInput
  }

  export type BiddingCategoryUncheckedCreateInput = {
    id?: string
    biddingId: string
    categoryId: string
    createdAt?: Date | string
  }

  export type BiddingCategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bidding?: BiddingUpdateOneRequiredWithoutCategoriesNestedInput
    category?: CategoryUpdateOneRequiredWithoutBiddingsNestedInput
  }

  export type BiddingCategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    biddingId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BiddingCategoryCreateManyInput = {
    id?: string
    biddingId: string
    categoryId: string
    createdAt?: Date | string
  }

  export type BiddingCategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BiddingCategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    biddingId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SupplierCategoryCreateInput = {
    id?: string
    createdAt?: Date | string
    supplier: SupplierCreateNestedOneWithoutCategoriesInput
    category: CategoryCreateNestedOneWithoutSuppliersInput
  }

  export type SupplierCategoryUncheckedCreateInput = {
    id?: string
    supplierId: string
    categoryId: string
    createdAt?: Date | string
  }

  export type SupplierCategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    supplier?: SupplierUpdateOneRequiredWithoutCategoriesNestedInput
    category?: CategoryUpdateOneRequiredWithoutSuppliersNestedInput
  }

  export type SupplierCategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    supplierId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SupplierCategoryCreateManyInput = {
    id?: string
    supplierId: string
    categoryId: string
    createdAt?: Date | string
  }

  export type SupplierCategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SupplierCategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    supplierId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateInput = {
    id?: string
    action: string
    resource: string
    resourceId?: string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateInput = {
    id?: string
    userId: string
    action: string
    resource: string
    resourceId?: string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateManyInput = {
    id?: string
    userId: string
    action: string
    resource: string
    resourceId?: string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionCreateInput = {
    id?: string
    token: string
    ipAddress?: string | null
    userAgent?: string | null
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type UserSessionUncheckedCreateInput = {
    id?: string
    userId: string
    token: string
    ipAddress?: string | null
    userAgent?: string | null
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type UserSessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionCreateManyInput = {
    id?: string
    userId: string
    token: string
    ipAddress?: string | null
    userAgent?: string | null
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemConfigCreateInput = {
    id?: string
    key: string
    value: string
    type?: string
    description?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemConfigUncheckedCreateInput = {
    id?: string
    key: string
    value: string
    type?: string
    description?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemConfigUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemConfigUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemConfigCreateManyInput = {
    id?: string
    key: string
    value: string
    type?: string
    description?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemConfigUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemConfigUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    id?: string
    userId?: string | null
    title: string
    message: string
    type?: string
    isRead?: boolean
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    userId?: string | null
    title: string
    message: string
    type?: string
    isRead?: boolean
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: string
    userId?: string | null
    title: string
    message: string
    type?: string
    isRead?: boolean
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPermissionCreateInput = {
    id?: string
    permission: $Enums.Permission
    grantedBy?: string | null
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPermissionsInput
  }

  export type UserPermissionUncheckedCreateInput = {
    id?: string
    userId: string
    permission: $Enums.Permission
    grantedBy?: string | null
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPermissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    permission?: EnumPermissionFieldUpdateOperationsInput | $Enums.Permission
    grantedBy?: NullableStringFieldUpdateOperationsInput | string | null
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPermissionsNestedInput
  }

  export type UserPermissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    permission?: EnumPermissionFieldUpdateOperationsInput | $Enums.Permission
    grantedBy?: NullableStringFieldUpdateOperationsInput | string | null
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPermissionCreateManyInput = {
    id?: string
    userId: string
    permission: $Enums.Permission
    grantedBy?: string | null
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPermissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    permission?: EnumPermissionFieldUpdateOperationsInput | $Enums.Permission
    grantedBy?: NullableStringFieldUpdateOperationsInput | string | null
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPermissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    permission?: EnumPermissionFieldUpdateOperationsInput | $Enums.Permission
    grantedBy?: NullableStringFieldUpdateOperationsInput | string | null
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type EnumUserStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusFilter<$PrismaModel> | $Enums.UserStatus
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SupplierNullableRelationFilter = {
    is?: SupplierWhereInput | null
    isNot?: SupplierWhereInput | null
  }

  export type PublicEntityNullableRelationFilter = {
    is?: PublicEntityWhereInput | null
    isNot?: PublicEntityWhereInput | null
  }

  export type CitizenNullableRelationFilter = {
    is?: CitizenWhereInput | null
    isNot?: CitizenWhereInput | null
  }

  export type AuditLogListRelationFilter = {
    every?: AuditLogWhereInput
    some?: AuditLogWhereInput
    none?: AuditLogWhereInput
  }

  export type UserSessionListRelationFilter = {
    every?: UserSessionWhereInput
    some?: UserSessionWhereInput
    none?: UserSessionWhereInput
  }

  export type UserPermissionListRelationFilter = {
    every?: UserPermissionWhereInput
    some?: UserPermissionWhereInput
    none?: UserPermissionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserSessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserPermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    status?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    avatar?: SortOrder
    lastLoginAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    status?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    avatar?: SortOrder
    lastLoginAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    status?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    avatar?: SortOrder
    lastLoginAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type EnumUserStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusWithAggregatesFilter<$PrismaModel> | $Enums.UserStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserStatusFilter<$PrismaModel>
    _max?: NestedEnumUserStatusFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ProposalListRelationFilter = {
    every?: ProposalWhereInput
    some?: ProposalWhereInput
    none?: ProposalWhereInput
  }

  export type ContractListRelationFilter = {
    every?: ContractWhereInput
    some?: ContractWhereInput
    none?: ContractWhereInput
  }

  export type DocumentListRelationFilter = {
    every?: DocumentWhereInput
    some?: DocumentWhereInput
    none?: DocumentWhereInput
  }

  export type SupplierCategoryListRelationFilter = {
    every?: SupplierCategoryWhereInput
    some?: SupplierCategoryWhereInput
    none?: SupplierCategoryWhereInput
  }

  export type ProposalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContractOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DocumentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SupplierCategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SupplierCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    companyName?: SortOrder
    tradeName?: SortOrder
    cnpj?: SortOrder
    stateRegistration?: SortOrder
    municipalRegistration?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zipCode?: SortOrder
    website?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    verifiedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SupplierMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    companyName?: SortOrder
    tradeName?: SortOrder
    cnpj?: SortOrder
    stateRegistration?: SortOrder
    municipalRegistration?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zipCode?: SortOrder
    website?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    verifiedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SupplierMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    companyName?: SortOrder
    tradeName?: SortOrder
    cnpj?: SortOrder
    stateRegistration?: SortOrder
    municipalRegistration?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zipCode?: SortOrder
    website?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    verifiedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type BiddingListRelationFilter = {
    every?: BiddingWhereInput
    some?: BiddingWhereInput
    none?: BiddingWhereInput
  }

  export type BiddingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PublicEntityCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    cnpj?: SortOrder
    entityType?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zipCode?: SortOrder
    phone?: SortOrder
    website?: SortOrder
    isActive?: SortOrder
    verifiedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PublicEntityMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    cnpj?: SortOrder
    entityType?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zipCode?: SortOrder
    phone?: SortOrder
    website?: SortOrder
    isActive?: SortOrder
    verifiedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PublicEntityMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    cnpj?: SortOrder
    entityType?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zipCode?: SortOrder
    phone?: SortOrder
    website?: SortOrder
    isActive?: SortOrder
    verifiedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type CitizenCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    cpf?: SortOrder
    dateOfBirth?: SortOrder
    profession?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zipCode?: SortOrder
    interests?: SortOrder
    isActive?: SortOrder
    verifiedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CitizenMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    cpf?: SortOrder
    dateOfBirth?: SortOrder
    profession?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zipCode?: SortOrder
    isActive?: SortOrder
    verifiedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CitizenMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    cpf?: SortOrder
    dateOfBirth?: SortOrder
    profession?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zipCode?: SortOrder
    isActive?: SortOrder
    verifiedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryNullableRelationFilter = {
    is?: CategoryWhereInput | null
    isNot?: CategoryWhereInput | null
  }

  export type CategoryListRelationFilter = {
    every?: CategoryWhereInput
    some?: CategoryWhereInput
    none?: CategoryWhereInput
  }

  export type BiddingCategoryListRelationFilter = {
    every?: BiddingCategoryWhereInput
    some?: BiddingCategoryWhereInput
    none?: BiddingCategoryWhereInput
  }

  export type CategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BiddingCategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    code?: SortOrder
    parentId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    code?: SortOrder
    parentId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    code?: SortOrder
    parentId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumBiddingTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.BiddingType | EnumBiddingTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BiddingType[] | ListEnumBiddingTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.BiddingType[] | ListEnumBiddingTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumBiddingTypeFilter<$PrismaModel> | $Enums.BiddingType
  }

  export type EnumBiddingStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BiddingStatus | EnumBiddingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BiddingStatus[] | ListEnumBiddingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BiddingStatus[] | ListEnumBiddingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBiddingStatusFilter<$PrismaModel> | $Enums.BiddingStatus
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type PublicEntityRelationFilter = {
    is?: PublicEntityWhereInput
    isNot?: PublicEntityWhereInput
  }

  export type ContractNullableRelationFilter = {
    is?: ContractWhereInput | null
    isNot?: ContractWhereInput | null
  }

  export type BiddingCountOrderByAggregateInput = {
    id?: SortOrder
    publicEntityId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    biddingNumber?: SortOrder
    type?: SortOrder
    status?: SortOrder
    estimatedValue?: SortOrder
    openingDate?: SortOrder
    closingDate?: SortOrder
    deliveryLocation?: SortOrder
    deliveryDeadline?: SortOrder
    requirements?: SortOrder
    evaluationCriteria?: SortOrder
    isPublic?: SortOrder
    publishedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BiddingAvgOrderByAggregateInput = {
    estimatedValue?: SortOrder
  }

  export type BiddingMaxOrderByAggregateInput = {
    id?: SortOrder
    publicEntityId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    biddingNumber?: SortOrder
    type?: SortOrder
    status?: SortOrder
    estimatedValue?: SortOrder
    openingDate?: SortOrder
    closingDate?: SortOrder
    deliveryLocation?: SortOrder
    deliveryDeadline?: SortOrder
    requirements?: SortOrder
    evaluationCriteria?: SortOrder
    isPublic?: SortOrder
    publishedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BiddingMinOrderByAggregateInput = {
    id?: SortOrder
    publicEntityId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    biddingNumber?: SortOrder
    type?: SortOrder
    status?: SortOrder
    estimatedValue?: SortOrder
    openingDate?: SortOrder
    closingDate?: SortOrder
    deliveryLocation?: SortOrder
    deliveryDeadline?: SortOrder
    requirements?: SortOrder
    evaluationCriteria?: SortOrder
    isPublic?: SortOrder
    publishedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BiddingSumOrderByAggregateInput = {
    estimatedValue?: SortOrder
  }

  export type EnumBiddingTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BiddingType | EnumBiddingTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BiddingType[] | ListEnumBiddingTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.BiddingType[] | ListEnumBiddingTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumBiddingTypeWithAggregatesFilter<$PrismaModel> | $Enums.BiddingType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBiddingTypeFilter<$PrismaModel>
    _max?: NestedEnumBiddingTypeFilter<$PrismaModel>
  }

  export type EnumBiddingStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BiddingStatus | EnumBiddingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BiddingStatus[] | ListEnumBiddingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BiddingStatus[] | ListEnumBiddingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBiddingStatusWithAggregatesFilter<$PrismaModel> | $Enums.BiddingStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBiddingStatusFilter<$PrismaModel>
    _max?: NestedEnumBiddingStatusFilter<$PrismaModel>
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type EnumProposalStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ProposalStatus | EnumProposalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProposalStatus[] | ListEnumProposalStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProposalStatus[] | ListEnumProposalStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProposalStatusFilter<$PrismaModel> | $Enums.ProposalStatus
  }

  export type BiddingRelationFilter = {
    is?: BiddingWhereInput
    isNot?: BiddingWhereInput
  }

  export type SupplierRelationFilter = {
    is?: SupplierWhereInput
    isNot?: SupplierWhereInput
  }

  export type ProposalItemListRelationFilter = {
    every?: ProposalItemWhereInput
    some?: ProposalItemWhereInput
    none?: ProposalItemWhereInput
  }

  export type ProposalItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProposalBiddingIdSupplierIdCompoundUniqueInput = {
    biddingId: string
    supplierId: string
  }

  export type ProposalCountOrderByAggregateInput = {
    id?: SortOrder
    biddingId?: SortOrder
    supplierId?: SortOrder
    totalValue?: SortOrder
    description?: SortOrder
    status?: SortOrder
    submittedAt?: SortOrder
    validUntil?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProposalAvgOrderByAggregateInput = {
    totalValue?: SortOrder
  }

  export type ProposalMaxOrderByAggregateInput = {
    id?: SortOrder
    biddingId?: SortOrder
    supplierId?: SortOrder
    totalValue?: SortOrder
    description?: SortOrder
    status?: SortOrder
    submittedAt?: SortOrder
    validUntil?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProposalMinOrderByAggregateInput = {
    id?: SortOrder
    biddingId?: SortOrder
    supplierId?: SortOrder
    totalValue?: SortOrder
    description?: SortOrder
    status?: SortOrder
    submittedAt?: SortOrder
    validUntil?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProposalSumOrderByAggregateInput = {
    totalValue?: SortOrder
  }

  export type EnumProposalStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProposalStatus | EnumProposalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProposalStatus[] | ListEnumProposalStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProposalStatus[] | ListEnumProposalStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProposalStatusWithAggregatesFilter<$PrismaModel> | $Enums.ProposalStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProposalStatusFilter<$PrismaModel>
    _max?: NestedEnumProposalStatusFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type ProposalRelationFilter = {
    is?: ProposalWhereInput
    isNot?: ProposalWhereInput
  }

  export type ProposalItemCountOrderByAggregateInput = {
    id?: SortOrder
    proposalId?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    brand?: SortOrder
    model?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProposalItemAvgOrderByAggregateInput = {
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
  }

  export type ProposalItemMaxOrderByAggregateInput = {
    id?: SortOrder
    proposalId?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    brand?: SortOrder
    model?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProposalItemMinOrderByAggregateInput = {
    id?: SortOrder
    proposalId?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    brand?: SortOrder
    model?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProposalItemSumOrderByAggregateInput = {
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumContractStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractStatus | EnumContractStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ContractStatus[] | ListEnumContractStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContractStatus[] | ListEnumContractStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumContractStatusFilter<$PrismaModel> | $Enums.ContractStatus
  }

  export type ContractCountOrderByAggregateInput = {
    id?: SortOrder
    biddingId?: SortOrder
    proposalId?: SortOrder
    publicEntityId?: SortOrder
    supplierId?: SortOrder
    contractNumber?: SortOrder
    title?: SortOrder
    description?: SortOrder
    totalValue?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    signedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContractAvgOrderByAggregateInput = {
    totalValue?: SortOrder
  }

  export type ContractMaxOrderByAggregateInput = {
    id?: SortOrder
    biddingId?: SortOrder
    proposalId?: SortOrder
    publicEntityId?: SortOrder
    supplierId?: SortOrder
    contractNumber?: SortOrder
    title?: SortOrder
    description?: SortOrder
    totalValue?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    signedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContractMinOrderByAggregateInput = {
    id?: SortOrder
    biddingId?: SortOrder
    proposalId?: SortOrder
    publicEntityId?: SortOrder
    supplierId?: SortOrder
    contractNumber?: SortOrder
    title?: SortOrder
    description?: SortOrder
    totalValue?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    signedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContractSumOrderByAggregateInput = {
    totalValue?: SortOrder
  }

  export type EnumContractStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractStatus | EnumContractStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ContractStatus[] | ListEnumContractStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContractStatus[] | ListEnumContractStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumContractStatusWithAggregatesFilter<$PrismaModel> | $Enums.ContractStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumContractStatusFilter<$PrismaModel>
    _max?: NestedEnumContractStatusFilter<$PrismaModel>
  }

  export type EnumDocumentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeFilter<$PrismaModel> | $Enums.DocumentType
  }

  export type BiddingNullableRelationFilter = {
    is?: BiddingWhereInput | null
    isNot?: BiddingWhereInput | null
  }

  export type ProposalNullableRelationFilter = {
    is?: ProposalWhereInput | null
    isNot?: ProposalWhereInput | null
  }

  export type DocumentCountOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    originalName?: SortOrder
    mimeType?: SortOrder
    size?: SortOrder
    path?: SortOrder
    type?: SortOrder
    description?: SortOrder
    isPublic?: SortOrder
    uploadedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    biddingId?: SortOrder
    proposalId?: SortOrder
    contractId?: SortOrder
    supplierId?: SortOrder
    publicEntityId?: SortOrder
  }

  export type DocumentAvgOrderByAggregateInput = {
    size?: SortOrder
  }

  export type DocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    originalName?: SortOrder
    mimeType?: SortOrder
    size?: SortOrder
    path?: SortOrder
    type?: SortOrder
    description?: SortOrder
    isPublic?: SortOrder
    uploadedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    biddingId?: SortOrder
    proposalId?: SortOrder
    contractId?: SortOrder
    supplierId?: SortOrder
    publicEntityId?: SortOrder
  }

  export type DocumentMinOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    originalName?: SortOrder
    mimeType?: SortOrder
    size?: SortOrder
    path?: SortOrder
    type?: SortOrder
    description?: SortOrder
    isPublic?: SortOrder
    uploadedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    biddingId?: SortOrder
    proposalId?: SortOrder
    contractId?: SortOrder
    supplierId?: SortOrder
    publicEntityId?: SortOrder
  }

  export type DocumentSumOrderByAggregateInput = {
    size?: SortOrder
  }

  export type EnumDocumentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeWithAggregatesFilter<$PrismaModel> | $Enums.DocumentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDocumentTypeFilter<$PrismaModel>
    _max?: NestedEnumDocumentTypeFilter<$PrismaModel>
  }

  export type CategoryRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type BiddingCategoryBiddingIdCategoryIdCompoundUniqueInput = {
    biddingId: string
    categoryId: string
  }

  export type BiddingCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    biddingId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
  }

  export type BiddingCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    biddingId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
  }

  export type BiddingCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    biddingId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
  }

  export type SupplierCategorySupplierIdCategoryIdCompoundUniqueInput = {
    supplierId: string
    categoryId: string
  }

  export type SupplierCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    supplierId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
  }

  export type SupplierCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    supplierId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
  }

  export type SupplierCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    supplierId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    resource?: SortOrder
    resourceId?: SortOrder
    oldValues?: SortOrder
    newValues?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    resource?: SortOrder
    resourceId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    resource?: SortOrder
    resourceId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type UserSessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemConfigCountOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    type?: SortOrder
    description?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemConfigMaxOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    type?: SortOrder
    description?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemConfigMinOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    type?: SortOrder
    description?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    data?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumPermissionFilter<$PrismaModel = never> = {
    equals?: $Enums.Permission | EnumPermissionFieldRefInput<$PrismaModel>
    in?: $Enums.Permission[] | ListEnumPermissionFieldRefInput<$PrismaModel>
    notIn?: $Enums.Permission[] | ListEnumPermissionFieldRefInput<$PrismaModel>
    not?: NestedEnumPermissionFilter<$PrismaModel> | $Enums.Permission
  }

  export type UserPermissionUserIdPermissionCompoundUniqueInput = {
    userId: string
    permission: $Enums.Permission
  }

  export type UserPermissionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    permission?: SortOrder
    grantedBy?: SortOrder
    grantedAt?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserPermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    permission?: SortOrder
    grantedBy?: SortOrder
    grantedAt?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserPermissionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    permission?: SortOrder
    grantedBy?: SortOrder
    grantedAt?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumPermissionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Permission | EnumPermissionFieldRefInput<$PrismaModel>
    in?: $Enums.Permission[] | ListEnumPermissionFieldRefInput<$PrismaModel>
    notIn?: $Enums.Permission[] | ListEnumPermissionFieldRefInput<$PrismaModel>
    not?: NestedEnumPermissionWithAggregatesFilter<$PrismaModel> | $Enums.Permission
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPermissionFilter<$PrismaModel>
    _max?: NestedEnumPermissionFilter<$PrismaModel>
  }

  export type SupplierCreateNestedOneWithoutUserInput = {
    create?: XOR<SupplierCreateWithoutUserInput, SupplierUncheckedCreateWithoutUserInput>
    connectOrCreate?: SupplierCreateOrConnectWithoutUserInput
    connect?: SupplierWhereUniqueInput
  }

  export type PublicEntityCreateNestedOneWithoutUserInput = {
    create?: XOR<PublicEntityCreateWithoutUserInput, PublicEntityUncheckedCreateWithoutUserInput>
    connectOrCreate?: PublicEntityCreateOrConnectWithoutUserInput
    connect?: PublicEntityWhereUniqueInput
  }

  export type CitizenCreateNestedOneWithoutUserInput = {
    create?: XOR<CitizenCreateWithoutUserInput, CitizenUncheckedCreateWithoutUserInput>
    connectOrCreate?: CitizenCreateOrConnectWithoutUserInput
    connect?: CitizenWhereUniqueInput
  }

  export type AuditLogCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type UserSessionCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput> | UserSessionCreateWithoutUserInput[] | UserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutUserInput | UserSessionCreateOrConnectWithoutUserInput[]
    createMany?: UserSessionCreateManyUserInputEnvelope
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
  }

  export type UserPermissionCreateNestedManyWithoutUserInput = {
    create?: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput> | UserPermissionCreateWithoutUserInput[] | UserPermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUserInput | UserPermissionCreateOrConnectWithoutUserInput[]
    createMany?: UserPermissionCreateManyUserInputEnvelope
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
  }

  export type SupplierUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<SupplierCreateWithoutUserInput, SupplierUncheckedCreateWithoutUserInput>
    connectOrCreate?: SupplierCreateOrConnectWithoutUserInput
    connect?: SupplierWhereUniqueInput
  }

  export type PublicEntityUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<PublicEntityCreateWithoutUserInput, PublicEntityUncheckedCreateWithoutUserInput>
    connectOrCreate?: PublicEntityCreateOrConnectWithoutUserInput
    connect?: PublicEntityWhereUniqueInput
  }

  export type CitizenUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<CitizenCreateWithoutUserInput, CitizenUncheckedCreateWithoutUserInput>
    connectOrCreate?: CitizenCreateOrConnectWithoutUserInput
    connect?: CitizenWhereUniqueInput
  }

  export type AuditLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type UserSessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput> | UserSessionCreateWithoutUserInput[] | UserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutUserInput | UserSessionCreateOrConnectWithoutUserInput[]
    createMany?: UserSessionCreateManyUserInputEnvelope
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
  }

  export type UserPermissionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput> | UserPermissionCreateWithoutUserInput[] | UserPermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUserInput | UserPermissionCreateOrConnectWithoutUserInput[]
    createMany?: UserPermissionCreateManyUserInputEnvelope
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type EnumUserStatusFieldUpdateOperationsInput = {
    set?: $Enums.UserStatus
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type SupplierUpdateOneWithoutUserNestedInput = {
    create?: XOR<SupplierCreateWithoutUserInput, SupplierUncheckedCreateWithoutUserInput>
    connectOrCreate?: SupplierCreateOrConnectWithoutUserInput
    upsert?: SupplierUpsertWithoutUserInput
    disconnect?: SupplierWhereInput | boolean
    delete?: SupplierWhereInput | boolean
    connect?: SupplierWhereUniqueInput
    update?: XOR<XOR<SupplierUpdateToOneWithWhereWithoutUserInput, SupplierUpdateWithoutUserInput>, SupplierUncheckedUpdateWithoutUserInput>
  }

  export type PublicEntityUpdateOneWithoutUserNestedInput = {
    create?: XOR<PublicEntityCreateWithoutUserInput, PublicEntityUncheckedCreateWithoutUserInput>
    connectOrCreate?: PublicEntityCreateOrConnectWithoutUserInput
    upsert?: PublicEntityUpsertWithoutUserInput
    disconnect?: PublicEntityWhereInput | boolean
    delete?: PublicEntityWhereInput | boolean
    connect?: PublicEntityWhereUniqueInput
    update?: XOR<XOR<PublicEntityUpdateToOneWithWhereWithoutUserInput, PublicEntityUpdateWithoutUserInput>, PublicEntityUncheckedUpdateWithoutUserInput>
  }

  export type CitizenUpdateOneWithoutUserNestedInput = {
    create?: XOR<CitizenCreateWithoutUserInput, CitizenUncheckedCreateWithoutUserInput>
    connectOrCreate?: CitizenCreateOrConnectWithoutUserInput
    upsert?: CitizenUpsertWithoutUserInput
    disconnect?: CitizenWhereInput | boolean
    delete?: CitizenWhereInput | boolean
    connect?: CitizenWhereUniqueInput
    update?: XOR<XOR<CitizenUpdateToOneWithWhereWithoutUserInput, CitizenUpdateWithoutUserInput>, CitizenUncheckedUpdateWithoutUserInput>
  }

  export type AuditLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type UserSessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput> | UserSessionCreateWithoutUserInput[] | UserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutUserInput | UserSessionCreateOrConnectWithoutUserInput[]
    upsert?: UserSessionUpsertWithWhereUniqueWithoutUserInput | UserSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSessionCreateManyUserInputEnvelope
    set?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    disconnect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    delete?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    update?: UserSessionUpdateWithWhereUniqueWithoutUserInput | UserSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSessionUpdateManyWithWhereWithoutUserInput | UserSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
  }

  export type UserPermissionUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput> | UserPermissionCreateWithoutUserInput[] | UserPermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUserInput | UserPermissionCreateOrConnectWithoutUserInput[]
    upsert?: UserPermissionUpsertWithWhereUniqueWithoutUserInput | UserPermissionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserPermissionCreateManyUserInputEnvelope
    set?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    disconnect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    delete?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    update?: UserPermissionUpdateWithWhereUniqueWithoutUserInput | UserPermissionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserPermissionUpdateManyWithWhereWithoutUserInput | UserPermissionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
  }

  export type SupplierUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<SupplierCreateWithoutUserInput, SupplierUncheckedCreateWithoutUserInput>
    connectOrCreate?: SupplierCreateOrConnectWithoutUserInput
    upsert?: SupplierUpsertWithoutUserInput
    disconnect?: SupplierWhereInput | boolean
    delete?: SupplierWhereInput | boolean
    connect?: SupplierWhereUniqueInput
    update?: XOR<XOR<SupplierUpdateToOneWithWhereWithoutUserInput, SupplierUpdateWithoutUserInput>, SupplierUncheckedUpdateWithoutUserInput>
  }

  export type PublicEntityUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<PublicEntityCreateWithoutUserInput, PublicEntityUncheckedCreateWithoutUserInput>
    connectOrCreate?: PublicEntityCreateOrConnectWithoutUserInput
    upsert?: PublicEntityUpsertWithoutUserInput
    disconnect?: PublicEntityWhereInput | boolean
    delete?: PublicEntityWhereInput | boolean
    connect?: PublicEntityWhereUniqueInput
    update?: XOR<XOR<PublicEntityUpdateToOneWithWhereWithoutUserInput, PublicEntityUpdateWithoutUserInput>, PublicEntityUncheckedUpdateWithoutUserInput>
  }

  export type CitizenUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<CitizenCreateWithoutUserInput, CitizenUncheckedCreateWithoutUserInput>
    connectOrCreate?: CitizenCreateOrConnectWithoutUserInput
    upsert?: CitizenUpsertWithoutUserInput
    disconnect?: CitizenWhereInput | boolean
    delete?: CitizenWhereInput | boolean
    connect?: CitizenWhereUniqueInput
    update?: XOR<XOR<CitizenUpdateToOneWithWhereWithoutUserInput, CitizenUpdateWithoutUserInput>, CitizenUncheckedUpdateWithoutUserInput>
  }

  export type AuditLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type UserSessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput> | UserSessionCreateWithoutUserInput[] | UserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutUserInput | UserSessionCreateOrConnectWithoutUserInput[]
    upsert?: UserSessionUpsertWithWhereUniqueWithoutUserInput | UserSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSessionCreateManyUserInputEnvelope
    set?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    disconnect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    delete?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    update?: UserSessionUpdateWithWhereUniqueWithoutUserInput | UserSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSessionUpdateManyWithWhereWithoutUserInput | UserSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
  }

  export type UserPermissionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput> | UserPermissionCreateWithoutUserInput[] | UserPermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUserInput | UserPermissionCreateOrConnectWithoutUserInput[]
    upsert?: UserPermissionUpsertWithWhereUniqueWithoutUserInput | UserPermissionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserPermissionCreateManyUserInputEnvelope
    set?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    disconnect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    delete?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    update?: UserPermissionUpdateWithWhereUniqueWithoutUserInput | UserPermissionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserPermissionUpdateManyWithWhereWithoutUserInput | UserPermissionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSupplierInput = {
    create?: XOR<UserCreateWithoutSupplierInput, UserUncheckedCreateWithoutSupplierInput>
    connectOrCreate?: UserCreateOrConnectWithoutSupplierInput
    connect?: UserWhereUniqueInput
  }

  export type ProposalCreateNestedManyWithoutSupplierInput = {
    create?: XOR<ProposalCreateWithoutSupplierInput, ProposalUncheckedCreateWithoutSupplierInput> | ProposalCreateWithoutSupplierInput[] | ProposalUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: ProposalCreateOrConnectWithoutSupplierInput | ProposalCreateOrConnectWithoutSupplierInput[]
    createMany?: ProposalCreateManySupplierInputEnvelope
    connect?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
  }

  export type ContractCreateNestedManyWithoutSupplierInput = {
    create?: XOR<ContractCreateWithoutSupplierInput, ContractUncheckedCreateWithoutSupplierInput> | ContractCreateWithoutSupplierInput[] | ContractUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutSupplierInput | ContractCreateOrConnectWithoutSupplierInput[]
    createMany?: ContractCreateManySupplierInputEnvelope
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
  }

  export type DocumentCreateNestedManyWithoutSupplierInput = {
    create?: XOR<DocumentCreateWithoutSupplierInput, DocumentUncheckedCreateWithoutSupplierInput> | DocumentCreateWithoutSupplierInput[] | DocumentUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutSupplierInput | DocumentCreateOrConnectWithoutSupplierInput[]
    createMany?: DocumentCreateManySupplierInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type SupplierCategoryCreateNestedManyWithoutSupplierInput = {
    create?: XOR<SupplierCategoryCreateWithoutSupplierInput, SupplierCategoryUncheckedCreateWithoutSupplierInput> | SupplierCategoryCreateWithoutSupplierInput[] | SupplierCategoryUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: SupplierCategoryCreateOrConnectWithoutSupplierInput | SupplierCategoryCreateOrConnectWithoutSupplierInput[]
    createMany?: SupplierCategoryCreateManySupplierInputEnvelope
    connect?: SupplierCategoryWhereUniqueInput | SupplierCategoryWhereUniqueInput[]
  }

  export type ProposalUncheckedCreateNestedManyWithoutSupplierInput = {
    create?: XOR<ProposalCreateWithoutSupplierInput, ProposalUncheckedCreateWithoutSupplierInput> | ProposalCreateWithoutSupplierInput[] | ProposalUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: ProposalCreateOrConnectWithoutSupplierInput | ProposalCreateOrConnectWithoutSupplierInput[]
    createMany?: ProposalCreateManySupplierInputEnvelope
    connect?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
  }

  export type ContractUncheckedCreateNestedManyWithoutSupplierInput = {
    create?: XOR<ContractCreateWithoutSupplierInput, ContractUncheckedCreateWithoutSupplierInput> | ContractCreateWithoutSupplierInput[] | ContractUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutSupplierInput | ContractCreateOrConnectWithoutSupplierInput[]
    createMany?: ContractCreateManySupplierInputEnvelope
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutSupplierInput = {
    create?: XOR<DocumentCreateWithoutSupplierInput, DocumentUncheckedCreateWithoutSupplierInput> | DocumentCreateWithoutSupplierInput[] | DocumentUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutSupplierInput | DocumentCreateOrConnectWithoutSupplierInput[]
    createMany?: DocumentCreateManySupplierInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type SupplierCategoryUncheckedCreateNestedManyWithoutSupplierInput = {
    create?: XOR<SupplierCategoryCreateWithoutSupplierInput, SupplierCategoryUncheckedCreateWithoutSupplierInput> | SupplierCategoryCreateWithoutSupplierInput[] | SupplierCategoryUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: SupplierCategoryCreateOrConnectWithoutSupplierInput | SupplierCategoryCreateOrConnectWithoutSupplierInput[]
    createMany?: SupplierCategoryCreateManySupplierInputEnvelope
    connect?: SupplierCategoryWhereUniqueInput | SupplierCategoryWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutSupplierNestedInput = {
    create?: XOR<UserCreateWithoutSupplierInput, UserUncheckedCreateWithoutSupplierInput>
    connectOrCreate?: UserCreateOrConnectWithoutSupplierInput
    upsert?: UserUpsertWithoutSupplierInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSupplierInput, UserUpdateWithoutSupplierInput>, UserUncheckedUpdateWithoutSupplierInput>
  }

  export type ProposalUpdateManyWithoutSupplierNestedInput = {
    create?: XOR<ProposalCreateWithoutSupplierInput, ProposalUncheckedCreateWithoutSupplierInput> | ProposalCreateWithoutSupplierInput[] | ProposalUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: ProposalCreateOrConnectWithoutSupplierInput | ProposalCreateOrConnectWithoutSupplierInput[]
    upsert?: ProposalUpsertWithWhereUniqueWithoutSupplierInput | ProposalUpsertWithWhereUniqueWithoutSupplierInput[]
    createMany?: ProposalCreateManySupplierInputEnvelope
    set?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
    disconnect?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
    delete?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
    connect?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
    update?: ProposalUpdateWithWhereUniqueWithoutSupplierInput | ProposalUpdateWithWhereUniqueWithoutSupplierInput[]
    updateMany?: ProposalUpdateManyWithWhereWithoutSupplierInput | ProposalUpdateManyWithWhereWithoutSupplierInput[]
    deleteMany?: ProposalScalarWhereInput | ProposalScalarWhereInput[]
  }

  export type ContractUpdateManyWithoutSupplierNestedInput = {
    create?: XOR<ContractCreateWithoutSupplierInput, ContractUncheckedCreateWithoutSupplierInput> | ContractCreateWithoutSupplierInput[] | ContractUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutSupplierInput | ContractCreateOrConnectWithoutSupplierInput[]
    upsert?: ContractUpsertWithWhereUniqueWithoutSupplierInput | ContractUpsertWithWhereUniqueWithoutSupplierInput[]
    createMany?: ContractCreateManySupplierInputEnvelope
    set?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    disconnect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    delete?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    update?: ContractUpdateWithWhereUniqueWithoutSupplierInput | ContractUpdateWithWhereUniqueWithoutSupplierInput[]
    updateMany?: ContractUpdateManyWithWhereWithoutSupplierInput | ContractUpdateManyWithWhereWithoutSupplierInput[]
    deleteMany?: ContractScalarWhereInput | ContractScalarWhereInput[]
  }

  export type DocumentUpdateManyWithoutSupplierNestedInput = {
    create?: XOR<DocumentCreateWithoutSupplierInput, DocumentUncheckedCreateWithoutSupplierInput> | DocumentCreateWithoutSupplierInput[] | DocumentUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutSupplierInput | DocumentCreateOrConnectWithoutSupplierInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutSupplierInput | DocumentUpsertWithWhereUniqueWithoutSupplierInput[]
    createMany?: DocumentCreateManySupplierInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutSupplierInput | DocumentUpdateWithWhereUniqueWithoutSupplierInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutSupplierInput | DocumentUpdateManyWithWhereWithoutSupplierInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type SupplierCategoryUpdateManyWithoutSupplierNestedInput = {
    create?: XOR<SupplierCategoryCreateWithoutSupplierInput, SupplierCategoryUncheckedCreateWithoutSupplierInput> | SupplierCategoryCreateWithoutSupplierInput[] | SupplierCategoryUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: SupplierCategoryCreateOrConnectWithoutSupplierInput | SupplierCategoryCreateOrConnectWithoutSupplierInput[]
    upsert?: SupplierCategoryUpsertWithWhereUniqueWithoutSupplierInput | SupplierCategoryUpsertWithWhereUniqueWithoutSupplierInput[]
    createMany?: SupplierCategoryCreateManySupplierInputEnvelope
    set?: SupplierCategoryWhereUniqueInput | SupplierCategoryWhereUniqueInput[]
    disconnect?: SupplierCategoryWhereUniqueInput | SupplierCategoryWhereUniqueInput[]
    delete?: SupplierCategoryWhereUniqueInput | SupplierCategoryWhereUniqueInput[]
    connect?: SupplierCategoryWhereUniqueInput | SupplierCategoryWhereUniqueInput[]
    update?: SupplierCategoryUpdateWithWhereUniqueWithoutSupplierInput | SupplierCategoryUpdateWithWhereUniqueWithoutSupplierInput[]
    updateMany?: SupplierCategoryUpdateManyWithWhereWithoutSupplierInput | SupplierCategoryUpdateManyWithWhereWithoutSupplierInput[]
    deleteMany?: SupplierCategoryScalarWhereInput | SupplierCategoryScalarWhereInput[]
  }

  export type ProposalUncheckedUpdateManyWithoutSupplierNestedInput = {
    create?: XOR<ProposalCreateWithoutSupplierInput, ProposalUncheckedCreateWithoutSupplierInput> | ProposalCreateWithoutSupplierInput[] | ProposalUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: ProposalCreateOrConnectWithoutSupplierInput | ProposalCreateOrConnectWithoutSupplierInput[]
    upsert?: ProposalUpsertWithWhereUniqueWithoutSupplierInput | ProposalUpsertWithWhereUniqueWithoutSupplierInput[]
    createMany?: ProposalCreateManySupplierInputEnvelope
    set?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
    disconnect?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
    delete?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
    connect?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
    update?: ProposalUpdateWithWhereUniqueWithoutSupplierInput | ProposalUpdateWithWhereUniqueWithoutSupplierInput[]
    updateMany?: ProposalUpdateManyWithWhereWithoutSupplierInput | ProposalUpdateManyWithWhereWithoutSupplierInput[]
    deleteMany?: ProposalScalarWhereInput | ProposalScalarWhereInput[]
  }

  export type ContractUncheckedUpdateManyWithoutSupplierNestedInput = {
    create?: XOR<ContractCreateWithoutSupplierInput, ContractUncheckedCreateWithoutSupplierInput> | ContractCreateWithoutSupplierInput[] | ContractUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutSupplierInput | ContractCreateOrConnectWithoutSupplierInput[]
    upsert?: ContractUpsertWithWhereUniqueWithoutSupplierInput | ContractUpsertWithWhereUniqueWithoutSupplierInput[]
    createMany?: ContractCreateManySupplierInputEnvelope
    set?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    disconnect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    delete?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    update?: ContractUpdateWithWhereUniqueWithoutSupplierInput | ContractUpdateWithWhereUniqueWithoutSupplierInput[]
    updateMany?: ContractUpdateManyWithWhereWithoutSupplierInput | ContractUpdateManyWithWhereWithoutSupplierInput[]
    deleteMany?: ContractScalarWhereInput | ContractScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutSupplierNestedInput = {
    create?: XOR<DocumentCreateWithoutSupplierInput, DocumentUncheckedCreateWithoutSupplierInput> | DocumentCreateWithoutSupplierInput[] | DocumentUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutSupplierInput | DocumentCreateOrConnectWithoutSupplierInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutSupplierInput | DocumentUpsertWithWhereUniqueWithoutSupplierInput[]
    createMany?: DocumentCreateManySupplierInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutSupplierInput | DocumentUpdateWithWhereUniqueWithoutSupplierInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutSupplierInput | DocumentUpdateManyWithWhereWithoutSupplierInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type SupplierCategoryUncheckedUpdateManyWithoutSupplierNestedInput = {
    create?: XOR<SupplierCategoryCreateWithoutSupplierInput, SupplierCategoryUncheckedCreateWithoutSupplierInput> | SupplierCategoryCreateWithoutSupplierInput[] | SupplierCategoryUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: SupplierCategoryCreateOrConnectWithoutSupplierInput | SupplierCategoryCreateOrConnectWithoutSupplierInput[]
    upsert?: SupplierCategoryUpsertWithWhereUniqueWithoutSupplierInput | SupplierCategoryUpsertWithWhereUniqueWithoutSupplierInput[]
    createMany?: SupplierCategoryCreateManySupplierInputEnvelope
    set?: SupplierCategoryWhereUniqueInput | SupplierCategoryWhereUniqueInput[]
    disconnect?: SupplierCategoryWhereUniqueInput | SupplierCategoryWhereUniqueInput[]
    delete?: SupplierCategoryWhereUniqueInput | SupplierCategoryWhereUniqueInput[]
    connect?: SupplierCategoryWhereUniqueInput | SupplierCategoryWhereUniqueInput[]
    update?: SupplierCategoryUpdateWithWhereUniqueWithoutSupplierInput | SupplierCategoryUpdateWithWhereUniqueWithoutSupplierInput[]
    updateMany?: SupplierCategoryUpdateManyWithWhereWithoutSupplierInput | SupplierCategoryUpdateManyWithWhereWithoutSupplierInput[]
    deleteMany?: SupplierCategoryScalarWhereInput | SupplierCategoryScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPublicEntityInput = {
    create?: XOR<UserCreateWithoutPublicEntityInput, UserUncheckedCreateWithoutPublicEntityInput>
    connectOrCreate?: UserCreateOrConnectWithoutPublicEntityInput
    connect?: UserWhereUniqueInput
  }

  export type BiddingCreateNestedManyWithoutPublicEntityInput = {
    create?: XOR<BiddingCreateWithoutPublicEntityInput, BiddingUncheckedCreateWithoutPublicEntityInput> | BiddingCreateWithoutPublicEntityInput[] | BiddingUncheckedCreateWithoutPublicEntityInput[]
    connectOrCreate?: BiddingCreateOrConnectWithoutPublicEntityInput | BiddingCreateOrConnectWithoutPublicEntityInput[]
    createMany?: BiddingCreateManyPublicEntityInputEnvelope
    connect?: BiddingWhereUniqueInput | BiddingWhereUniqueInput[]
  }

  export type ContractCreateNestedManyWithoutPublicEntityInput = {
    create?: XOR<ContractCreateWithoutPublicEntityInput, ContractUncheckedCreateWithoutPublicEntityInput> | ContractCreateWithoutPublicEntityInput[] | ContractUncheckedCreateWithoutPublicEntityInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutPublicEntityInput | ContractCreateOrConnectWithoutPublicEntityInput[]
    createMany?: ContractCreateManyPublicEntityInputEnvelope
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
  }

  export type DocumentCreateNestedManyWithoutPublicEntityInput = {
    create?: XOR<DocumentCreateWithoutPublicEntityInput, DocumentUncheckedCreateWithoutPublicEntityInput> | DocumentCreateWithoutPublicEntityInput[] | DocumentUncheckedCreateWithoutPublicEntityInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutPublicEntityInput | DocumentCreateOrConnectWithoutPublicEntityInput[]
    createMany?: DocumentCreateManyPublicEntityInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type BiddingUncheckedCreateNestedManyWithoutPublicEntityInput = {
    create?: XOR<BiddingCreateWithoutPublicEntityInput, BiddingUncheckedCreateWithoutPublicEntityInput> | BiddingCreateWithoutPublicEntityInput[] | BiddingUncheckedCreateWithoutPublicEntityInput[]
    connectOrCreate?: BiddingCreateOrConnectWithoutPublicEntityInput | BiddingCreateOrConnectWithoutPublicEntityInput[]
    createMany?: BiddingCreateManyPublicEntityInputEnvelope
    connect?: BiddingWhereUniqueInput | BiddingWhereUniqueInput[]
  }

  export type ContractUncheckedCreateNestedManyWithoutPublicEntityInput = {
    create?: XOR<ContractCreateWithoutPublicEntityInput, ContractUncheckedCreateWithoutPublicEntityInput> | ContractCreateWithoutPublicEntityInput[] | ContractUncheckedCreateWithoutPublicEntityInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutPublicEntityInput | ContractCreateOrConnectWithoutPublicEntityInput[]
    createMany?: ContractCreateManyPublicEntityInputEnvelope
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutPublicEntityInput = {
    create?: XOR<DocumentCreateWithoutPublicEntityInput, DocumentUncheckedCreateWithoutPublicEntityInput> | DocumentCreateWithoutPublicEntityInput[] | DocumentUncheckedCreateWithoutPublicEntityInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutPublicEntityInput | DocumentCreateOrConnectWithoutPublicEntityInput[]
    createMany?: DocumentCreateManyPublicEntityInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutPublicEntityNestedInput = {
    create?: XOR<UserCreateWithoutPublicEntityInput, UserUncheckedCreateWithoutPublicEntityInput>
    connectOrCreate?: UserCreateOrConnectWithoutPublicEntityInput
    upsert?: UserUpsertWithoutPublicEntityInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPublicEntityInput, UserUpdateWithoutPublicEntityInput>, UserUncheckedUpdateWithoutPublicEntityInput>
  }

  export type BiddingUpdateManyWithoutPublicEntityNestedInput = {
    create?: XOR<BiddingCreateWithoutPublicEntityInput, BiddingUncheckedCreateWithoutPublicEntityInput> | BiddingCreateWithoutPublicEntityInput[] | BiddingUncheckedCreateWithoutPublicEntityInput[]
    connectOrCreate?: BiddingCreateOrConnectWithoutPublicEntityInput | BiddingCreateOrConnectWithoutPublicEntityInput[]
    upsert?: BiddingUpsertWithWhereUniqueWithoutPublicEntityInput | BiddingUpsertWithWhereUniqueWithoutPublicEntityInput[]
    createMany?: BiddingCreateManyPublicEntityInputEnvelope
    set?: BiddingWhereUniqueInput | BiddingWhereUniqueInput[]
    disconnect?: BiddingWhereUniqueInput | BiddingWhereUniqueInput[]
    delete?: BiddingWhereUniqueInput | BiddingWhereUniqueInput[]
    connect?: BiddingWhereUniqueInput | BiddingWhereUniqueInput[]
    update?: BiddingUpdateWithWhereUniqueWithoutPublicEntityInput | BiddingUpdateWithWhereUniqueWithoutPublicEntityInput[]
    updateMany?: BiddingUpdateManyWithWhereWithoutPublicEntityInput | BiddingUpdateManyWithWhereWithoutPublicEntityInput[]
    deleteMany?: BiddingScalarWhereInput | BiddingScalarWhereInput[]
  }

  export type ContractUpdateManyWithoutPublicEntityNestedInput = {
    create?: XOR<ContractCreateWithoutPublicEntityInput, ContractUncheckedCreateWithoutPublicEntityInput> | ContractCreateWithoutPublicEntityInput[] | ContractUncheckedCreateWithoutPublicEntityInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutPublicEntityInput | ContractCreateOrConnectWithoutPublicEntityInput[]
    upsert?: ContractUpsertWithWhereUniqueWithoutPublicEntityInput | ContractUpsertWithWhereUniqueWithoutPublicEntityInput[]
    createMany?: ContractCreateManyPublicEntityInputEnvelope
    set?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    disconnect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    delete?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    update?: ContractUpdateWithWhereUniqueWithoutPublicEntityInput | ContractUpdateWithWhereUniqueWithoutPublicEntityInput[]
    updateMany?: ContractUpdateManyWithWhereWithoutPublicEntityInput | ContractUpdateManyWithWhereWithoutPublicEntityInput[]
    deleteMany?: ContractScalarWhereInput | ContractScalarWhereInput[]
  }

  export type DocumentUpdateManyWithoutPublicEntityNestedInput = {
    create?: XOR<DocumentCreateWithoutPublicEntityInput, DocumentUncheckedCreateWithoutPublicEntityInput> | DocumentCreateWithoutPublicEntityInput[] | DocumentUncheckedCreateWithoutPublicEntityInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutPublicEntityInput | DocumentCreateOrConnectWithoutPublicEntityInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutPublicEntityInput | DocumentUpsertWithWhereUniqueWithoutPublicEntityInput[]
    createMany?: DocumentCreateManyPublicEntityInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutPublicEntityInput | DocumentUpdateWithWhereUniqueWithoutPublicEntityInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutPublicEntityInput | DocumentUpdateManyWithWhereWithoutPublicEntityInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type BiddingUncheckedUpdateManyWithoutPublicEntityNestedInput = {
    create?: XOR<BiddingCreateWithoutPublicEntityInput, BiddingUncheckedCreateWithoutPublicEntityInput> | BiddingCreateWithoutPublicEntityInput[] | BiddingUncheckedCreateWithoutPublicEntityInput[]
    connectOrCreate?: BiddingCreateOrConnectWithoutPublicEntityInput | BiddingCreateOrConnectWithoutPublicEntityInput[]
    upsert?: BiddingUpsertWithWhereUniqueWithoutPublicEntityInput | BiddingUpsertWithWhereUniqueWithoutPublicEntityInput[]
    createMany?: BiddingCreateManyPublicEntityInputEnvelope
    set?: BiddingWhereUniqueInput | BiddingWhereUniqueInput[]
    disconnect?: BiddingWhereUniqueInput | BiddingWhereUniqueInput[]
    delete?: BiddingWhereUniqueInput | BiddingWhereUniqueInput[]
    connect?: BiddingWhereUniqueInput | BiddingWhereUniqueInput[]
    update?: BiddingUpdateWithWhereUniqueWithoutPublicEntityInput | BiddingUpdateWithWhereUniqueWithoutPublicEntityInput[]
    updateMany?: BiddingUpdateManyWithWhereWithoutPublicEntityInput | BiddingUpdateManyWithWhereWithoutPublicEntityInput[]
    deleteMany?: BiddingScalarWhereInput | BiddingScalarWhereInput[]
  }

  export type ContractUncheckedUpdateManyWithoutPublicEntityNestedInput = {
    create?: XOR<ContractCreateWithoutPublicEntityInput, ContractUncheckedCreateWithoutPublicEntityInput> | ContractCreateWithoutPublicEntityInput[] | ContractUncheckedCreateWithoutPublicEntityInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutPublicEntityInput | ContractCreateOrConnectWithoutPublicEntityInput[]
    upsert?: ContractUpsertWithWhereUniqueWithoutPublicEntityInput | ContractUpsertWithWhereUniqueWithoutPublicEntityInput[]
    createMany?: ContractCreateManyPublicEntityInputEnvelope
    set?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    disconnect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    delete?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    update?: ContractUpdateWithWhereUniqueWithoutPublicEntityInput | ContractUpdateWithWhereUniqueWithoutPublicEntityInput[]
    updateMany?: ContractUpdateManyWithWhereWithoutPublicEntityInput | ContractUpdateManyWithWhereWithoutPublicEntityInput[]
    deleteMany?: ContractScalarWhereInput | ContractScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutPublicEntityNestedInput = {
    create?: XOR<DocumentCreateWithoutPublicEntityInput, DocumentUncheckedCreateWithoutPublicEntityInput> | DocumentCreateWithoutPublicEntityInput[] | DocumentUncheckedCreateWithoutPublicEntityInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutPublicEntityInput | DocumentCreateOrConnectWithoutPublicEntityInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutPublicEntityInput | DocumentUpsertWithWhereUniqueWithoutPublicEntityInput[]
    createMany?: DocumentCreateManyPublicEntityInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutPublicEntityInput | DocumentUpdateWithWhereUniqueWithoutPublicEntityInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutPublicEntityInput | DocumentUpdateManyWithWhereWithoutPublicEntityInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type CitizenCreateinterestsInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutCitizenInput = {
    create?: XOR<UserCreateWithoutCitizenInput, UserUncheckedCreateWithoutCitizenInput>
    connectOrCreate?: UserCreateOrConnectWithoutCitizenInput
    connect?: UserWhereUniqueInput
  }

  export type CitizenUpdateinterestsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneRequiredWithoutCitizenNestedInput = {
    create?: XOR<UserCreateWithoutCitizenInput, UserUncheckedCreateWithoutCitizenInput>
    connectOrCreate?: UserCreateOrConnectWithoutCitizenInput
    upsert?: UserUpsertWithoutCitizenInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCitizenInput, UserUpdateWithoutCitizenInput>, UserUncheckedUpdateWithoutCitizenInput>
  }

  export type CategoryCreateNestedOneWithoutChildrenInput = {
    create?: XOR<CategoryCreateWithoutChildrenInput, CategoryUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutChildrenInput
    connect?: CategoryWhereUniqueInput
  }

  export type CategoryCreateNestedManyWithoutParentInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type BiddingCategoryCreateNestedManyWithoutCategoryInput = {
    create?: XOR<BiddingCategoryCreateWithoutCategoryInput, BiddingCategoryUncheckedCreateWithoutCategoryInput> | BiddingCategoryCreateWithoutCategoryInput[] | BiddingCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: BiddingCategoryCreateOrConnectWithoutCategoryInput | BiddingCategoryCreateOrConnectWithoutCategoryInput[]
    createMany?: BiddingCategoryCreateManyCategoryInputEnvelope
    connect?: BiddingCategoryWhereUniqueInput | BiddingCategoryWhereUniqueInput[]
  }

  export type SupplierCategoryCreateNestedManyWithoutCategoryInput = {
    create?: XOR<SupplierCategoryCreateWithoutCategoryInput, SupplierCategoryUncheckedCreateWithoutCategoryInput> | SupplierCategoryCreateWithoutCategoryInput[] | SupplierCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: SupplierCategoryCreateOrConnectWithoutCategoryInput | SupplierCategoryCreateOrConnectWithoutCategoryInput[]
    createMany?: SupplierCategoryCreateManyCategoryInputEnvelope
    connect?: SupplierCategoryWhereUniqueInput | SupplierCategoryWhereUniqueInput[]
  }

  export type CategoryUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type BiddingCategoryUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<BiddingCategoryCreateWithoutCategoryInput, BiddingCategoryUncheckedCreateWithoutCategoryInput> | BiddingCategoryCreateWithoutCategoryInput[] | BiddingCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: BiddingCategoryCreateOrConnectWithoutCategoryInput | BiddingCategoryCreateOrConnectWithoutCategoryInput[]
    createMany?: BiddingCategoryCreateManyCategoryInputEnvelope
    connect?: BiddingCategoryWhereUniqueInput | BiddingCategoryWhereUniqueInput[]
  }

  export type SupplierCategoryUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<SupplierCategoryCreateWithoutCategoryInput, SupplierCategoryUncheckedCreateWithoutCategoryInput> | SupplierCategoryCreateWithoutCategoryInput[] | SupplierCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: SupplierCategoryCreateOrConnectWithoutCategoryInput | SupplierCategoryCreateOrConnectWithoutCategoryInput[]
    createMany?: SupplierCategoryCreateManyCategoryInputEnvelope
    connect?: SupplierCategoryWhereUniqueInput | SupplierCategoryWhereUniqueInput[]
  }

  export type CategoryUpdateOneWithoutChildrenNestedInput = {
    create?: XOR<CategoryCreateWithoutChildrenInput, CategoryUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutChildrenInput
    upsert?: CategoryUpsertWithoutChildrenInput
    disconnect?: CategoryWhereInput | boolean
    delete?: CategoryWhereInput | boolean
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutChildrenInput, CategoryUpdateWithoutChildrenInput>, CategoryUncheckedUpdateWithoutChildrenInput>
  }

  export type CategoryUpdateManyWithoutParentNestedInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutParentInput | CategoryUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutParentInput | CategoryUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutParentInput | CategoryUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type BiddingCategoryUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<BiddingCategoryCreateWithoutCategoryInput, BiddingCategoryUncheckedCreateWithoutCategoryInput> | BiddingCategoryCreateWithoutCategoryInput[] | BiddingCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: BiddingCategoryCreateOrConnectWithoutCategoryInput | BiddingCategoryCreateOrConnectWithoutCategoryInput[]
    upsert?: BiddingCategoryUpsertWithWhereUniqueWithoutCategoryInput | BiddingCategoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: BiddingCategoryCreateManyCategoryInputEnvelope
    set?: BiddingCategoryWhereUniqueInput | BiddingCategoryWhereUniqueInput[]
    disconnect?: BiddingCategoryWhereUniqueInput | BiddingCategoryWhereUniqueInput[]
    delete?: BiddingCategoryWhereUniqueInput | BiddingCategoryWhereUniqueInput[]
    connect?: BiddingCategoryWhereUniqueInput | BiddingCategoryWhereUniqueInput[]
    update?: BiddingCategoryUpdateWithWhereUniqueWithoutCategoryInput | BiddingCategoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: BiddingCategoryUpdateManyWithWhereWithoutCategoryInput | BiddingCategoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: BiddingCategoryScalarWhereInput | BiddingCategoryScalarWhereInput[]
  }

  export type SupplierCategoryUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<SupplierCategoryCreateWithoutCategoryInput, SupplierCategoryUncheckedCreateWithoutCategoryInput> | SupplierCategoryCreateWithoutCategoryInput[] | SupplierCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: SupplierCategoryCreateOrConnectWithoutCategoryInput | SupplierCategoryCreateOrConnectWithoutCategoryInput[]
    upsert?: SupplierCategoryUpsertWithWhereUniqueWithoutCategoryInput | SupplierCategoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: SupplierCategoryCreateManyCategoryInputEnvelope
    set?: SupplierCategoryWhereUniqueInput | SupplierCategoryWhereUniqueInput[]
    disconnect?: SupplierCategoryWhereUniqueInput | SupplierCategoryWhereUniqueInput[]
    delete?: SupplierCategoryWhereUniqueInput | SupplierCategoryWhereUniqueInput[]
    connect?: SupplierCategoryWhereUniqueInput | SupplierCategoryWhereUniqueInput[]
    update?: SupplierCategoryUpdateWithWhereUniqueWithoutCategoryInput | SupplierCategoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: SupplierCategoryUpdateManyWithWhereWithoutCategoryInput | SupplierCategoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: SupplierCategoryScalarWhereInput | SupplierCategoryScalarWhereInput[]
  }

  export type CategoryUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutParentInput | CategoryUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutParentInput | CategoryUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutParentInput | CategoryUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type BiddingCategoryUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<BiddingCategoryCreateWithoutCategoryInput, BiddingCategoryUncheckedCreateWithoutCategoryInput> | BiddingCategoryCreateWithoutCategoryInput[] | BiddingCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: BiddingCategoryCreateOrConnectWithoutCategoryInput | BiddingCategoryCreateOrConnectWithoutCategoryInput[]
    upsert?: BiddingCategoryUpsertWithWhereUniqueWithoutCategoryInput | BiddingCategoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: BiddingCategoryCreateManyCategoryInputEnvelope
    set?: BiddingCategoryWhereUniqueInput | BiddingCategoryWhereUniqueInput[]
    disconnect?: BiddingCategoryWhereUniqueInput | BiddingCategoryWhereUniqueInput[]
    delete?: BiddingCategoryWhereUniqueInput | BiddingCategoryWhereUniqueInput[]
    connect?: BiddingCategoryWhereUniqueInput | BiddingCategoryWhereUniqueInput[]
    update?: BiddingCategoryUpdateWithWhereUniqueWithoutCategoryInput | BiddingCategoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: BiddingCategoryUpdateManyWithWhereWithoutCategoryInput | BiddingCategoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: BiddingCategoryScalarWhereInput | BiddingCategoryScalarWhereInput[]
  }

  export type SupplierCategoryUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<SupplierCategoryCreateWithoutCategoryInput, SupplierCategoryUncheckedCreateWithoutCategoryInput> | SupplierCategoryCreateWithoutCategoryInput[] | SupplierCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: SupplierCategoryCreateOrConnectWithoutCategoryInput | SupplierCategoryCreateOrConnectWithoutCategoryInput[]
    upsert?: SupplierCategoryUpsertWithWhereUniqueWithoutCategoryInput | SupplierCategoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: SupplierCategoryCreateManyCategoryInputEnvelope
    set?: SupplierCategoryWhereUniqueInput | SupplierCategoryWhereUniqueInput[]
    disconnect?: SupplierCategoryWhereUniqueInput | SupplierCategoryWhereUniqueInput[]
    delete?: SupplierCategoryWhereUniqueInput | SupplierCategoryWhereUniqueInput[]
    connect?: SupplierCategoryWhereUniqueInput | SupplierCategoryWhereUniqueInput[]
    update?: SupplierCategoryUpdateWithWhereUniqueWithoutCategoryInput | SupplierCategoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: SupplierCategoryUpdateManyWithWhereWithoutCategoryInput | SupplierCategoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: SupplierCategoryScalarWhereInput | SupplierCategoryScalarWhereInput[]
  }

  export type PublicEntityCreateNestedOneWithoutBiddingsInput = {
    create?: XOR<PublicEntityCreateWithoutBiddingsInput, PublicEntityUncheckedCreateWithoutBiddingsInput>
    connectOrCreate?: PublicEntityCreateOrConnectWithoutBiddingsInput
    connect?: PublicEntityWhereUniqueInput
  }

  export type ProposalCreateNestedManyWithoutBiddingInput = {
    create?: XOR<ProposalCreateWithoutBiddingInput, ProposalUncheckedCreateWithoutBiddingInput> | ProposalCreateWithoutBiddingInput[] | ProposalUncheckedCreateWithoutBiddingInput[]
    connectOrCreate?: ProposalCreateOrConnectWithoutBiddingInput | ProposalCreateOrConnectWithoutBiddingInput[]
    createMany?: ProposalCreateManyBiddingInputEnvelope
    connect?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
  }

  export type DocumentCreateNestedManyWithoutBiddingInput = {
    create?: XOR<DocumentCreateWithoutBiddingInput, DocumentUncheckedCreateWithoutBiddingInput> | DocumentCreateWithoutBiddingInput[] | DocumentUncheckedCreateWithoutBiddingInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutBiddingInput | DocumentCreateOrConnectWithoutBiddingInput[]
    createMany?: DocumentCreateManyBiddingInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type BiddingCategoryCreateNestedManyWithoutBiddingInput = {
    create?: XOR<BiddingCategoryCreateWithoutBiddingInput, BiddingCategoryUncheckedCreateWithoutBiddingInput> | BiddingCategoryCreateWithoutBiddingInput[] | BiddingCategoryUncheckedCreateWithoutBiddingInput[]
    connectOrCreate?: BiddingCategoryCreateOrConnectWithoutBiddingInput | BiddingCategoryCreateOrConnectWithoutBiddingInput[]
    createMany?: BiddingCategoryCreateManyBiddingInputEnvelope
    connect?: BiddingCategoryWhereUniqueInput | BiddingCategoryWhereUniqueInput[]
  }

  export type ContractCreateNestedOneWithoutBiddingInput = {
    create?: XOR<ContractCreateWithoutBiddingInput, ContractUncheckedCreateWithoutBiddingInput>
    connectOrCreate?: ContractCreateOrConnectWithoutBiddingInput
    connect?: ContractWhereUniqueInput
  }

  export type ProposalUncheckedCreateNestedManyWithoutBiddingInput = {
    create?: XOR<ProposalCreateWithoutBiddingInput, ProposalUncheckedCreateWithoutBiddingInput> | ProposalCreateWithoutBiddingInput[] | ProposalUncheckedCreateWithoutBiddingInput[]
    connectOrCreate?: ProposalCreateOrConnectWithoutBiddingInput | ProposalCreateOrConnectWithoutBiddingInput[]
    createMany?: ProposalCreateManyBiddingInputEnvelope
    connect?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutBiddingInput = {
    create?: XOR<DocumentCreateWithoutBiddingInput, DocumentUncheckedCreateWithoutBiddingInput> | DocumentCreateWithoutBiddingInput[] | DocumentUncheckedCreateWithoutBiddingInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutBiddingInput | DocumentCreateOrConnectWithoutBiddingInput[]
    createMany?: DocumentCreateManyBiddingInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type BiddingCategoryUncheckedCreateNestedManyWithoutBiddingInput = {
    create?: XOR<BiddingCategoryCreateWithoutBiddingInput, BiddingCategoryUncheckedCreateWithoutBiddingInput> | BiddingCategoryCreateWithoutBiddingInput[] | BiddingCategoryUncheckedCreateWithoutBiddingInput[]
    connectOrCreate?: BiddingCategoryCreateOrConnectWithoutBiddingInput | BiddingCategoryCreateOrConnectWithoutBiddingInput[]
    createMany?: BiddingCategoryCreateManyBiddingInputEnvelope
    connect?: BiddingCategoryWhereUniqueInput | BiddingCategoryWhereUniqueInput[]
  }

  export type ContractUncheckedCreateNestedOneWithoutBiddingInput = {
    create?: XOR<ContractCreateWithoutBiddingInput, ContractUncheckedCreateWithoutBiddingInput>
    connectOrCreate?: ContractCreateOrConnectWithoutBiddingInput
    connect?: ContractWhereUniqueInput
  }

  export type EnumBiddingTypeFieldUpdateOperationsInput = {
    set?: $Enums.BiddingType
  }

  export type EnumBiddingStatusFieldUpdateOperationsInput = {
    set?: $Enums.BiddingStatus
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type PublicEntityUpdateOneRequiredWithoutBiddingsNestedInput = {
    create?: XOR<PublicEntityCreateWithoutBiddingsInput, PublicEntityUncheckedCreateWithoutBiddingsInput>
    connectOrCreate?: PublicEntityCreateOrConnectWithoutBiddingsInput
    upsert?: PublicEntityUpsertWithoutBiddingsInput
    connect?: PublicEntityWhereUniqueInput
    update?: XOR<XOR<PublicEntityUpdateToOneWithWhereWithoutBiddingsInput, PublicEntityUpdateWithoutBiddingsInput>, PublicEntityUncheckedUpdateWithoutBiddingsInput>
  }

  export type ProposalUpdateManyWithoutBiddingNestedInput = {
    create?: XOR<ProposalCreateWithoutBiddingInput, ProposalUncheckedCreateWithoutBiddingInput> | ProposalCreateWithoutBiddingInput[] | ProposalUncheckedCreateWithoutBiddingInput[]
    connectOrCreate?: ProposalCreateOrConnectWithoutBiddingInput | ProposalCreateOrConnectWithoutBiddingInput[]
    upsert?: ProposalUpsertWithWhereUniqueWithoutBiddingInput | ProposalUpsertWithWhereUniqueWithoutBiddingInput[]
    createMany?: ProposalCreateManyBiddingInputEnvelope
    set?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
    disconnect?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
    delete?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
    connect?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
    update?: ProposalUpdateWithWhereUniqueWithoutBiddingInput | ProposalUpdateWithWhereUniqueWithoutBiddingInput[]
    updateMany?: ProposalUpdateManyWithWhereWithoutBiddingInput | ProposalUpdateManyWithWhereWithoutBiddingInput[]
    deleteMany?: ProposalScalarWhereInput | ProposalScalarWhereInput[]
  }

  export type DocumentUpdateManyWithoutBiddingNestedInput = {
    create?: XOR<DocumentCreateWithoutBiddingInput, DocumentUncheckedCreateWithoutBiddingInput> | DocumentCreateWithoutBiddingInput[] | DocumentUncheckedCreateWithoutBiddingInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutBiddingInput | DocumentCreateOrConnectWithoutBiddingInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutBiddingInput | DocumentUpsertWithWhereUniqueWithoutBiddingInput[]
    createMany?: DocumentCreateManyBiddingInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutBiddingInput | DocumentUpdateWithWhereUniqueWithoutBiddingInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutBiddingInput | DocumentUpdateManyWithWhereWithoutBiddingInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type BiddingCategoryUpdateManyWithoutBiddingNestedInput = {
    create?: XOR<BiddingCategoryCreateWithoutBiddingInput, BiddingCategoryUncheckedCreateWithoutBiddingInput> | BiddingCategoryCreateWithoutBiddingInput[] | BiddingCategoryUncheckedCreateWithoutBiddingInput[]
    connectOrCreate?: BiddingCategoryCreateOrConnectWithoutBiddingInput | BiddingCategoryCreateOrConnectWithoutBiddingInput[]
    upsert?: BiddingCategoryUpsertWithWhereUniqueWithoutBiddingInput | BiddingCategoryUpsertWithWhereUniqueWithoutBiddingInput[]
    createMany?: BiddingCategoryCreateManyBiddingInputEnvelope
    set?: BiddingCategoryWhereUniqueInput | BiddingCategoryWhereUniqueInput[]
    disconnect?: BiddingCategoryWhereUniqueInput | BiddingCategoryWhereUniqueInput[]
    delete?: BiddingCategoryWhereUniqueInput | BiddingCategoryWhereUniqueInput[]
    connect?: BiddingCategoryWhereUniqueInput | BiddingCategoryWhereUniqueInput[]
    update?: BiddingCategoryUpdateWithWhereUniqueWithoutBiddingInput | BiddingCategoryUpdateWithWhereUniqueWithoutBiddingInput[]
    updateMany?: BiddingCategoryUpdateManyWithWhereWithoutBiddingInput | BiddingCategoryUpdateManyWithWhereWithoutBiddingInput[]
    deleteMany?: BiddingCategoryScalarWhereInput | BiddingCategoryScalarWhereInput[]
  }

  export type ContractUpdateOneWithoutBiddingNestedInput = {
    create?: XOR<ContractCreateWithoutBiddingInput, ContractUncheckedCreateWithoutBiddingInput>
    connectOrCreate?: ContractCreateOrConnectWithoutBiddingInput
    upsert?: ContractUpsertWithoutBiddingInput
    disconnect?: ContractWhereInput | boolean
    delete?: ContractWhereInput | boolean
    connect?: ContractWhereUniqueInput
    update?: XOR<XOR<ContractUpdateToOneWithWhereWithoutBiddingInput, ContractUpdateWithoutBiddingInput>, ContractUncheckedUpdateWithoutBiddingInput>
  }

  export type ProposalUncheckedUpdateManyWithoutBiddingNestedInput = {
    create?: XOR<ProposalCreateWithoutBiddingInput, ProposalUncheckedCreateWithoutBiddingInput> | ProposalCreateWithoutBiddingInput[] | ProposalUncheckedCreateWithoutBiddingInput[]
    connectOrCreate?: ProposalCreateOrConnectWithoutBiddingInput | ProposalCreateOrConnectWithoutBiddingInput[]
    upsert?: ProposalUpsertWithWhereUniqueWithoutBiddingInput | ProposalUpsertWithWhereUniqueWithoutBiddingInput[]
    createMany?: ProposalCreateManyBiddingInputEnvelope
    set?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
    disconnect?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
    delete?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
    connect?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
    update?: ProposalUpdateWithWhereUniqueWithoutBiddingInput | ProposalUpdateWithWhereUniqueWithoutBiddingInput[]
    updateMany?: ProposalUpdateManyWithWhereWithoutBiddingInput | ProposalUpdateManyWithWhereWithoutBiddingInput[]
    deleteMany?: ProposalScalarWhereInput | ProposalScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutBiddingNestedInput = {
    create?: XOR<DocumentCreateWithoutBiddingInput, DocumentUncheckedCreateWithoutBiddingInput> | DocumentCreateWithoutBiddingInput[] | DocumentUncheckedCreateWithoutBiddingInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutBiddingInput | DocumentCreateOrConnectWithoutBiddingInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutBiddingInput | DocumentUpsertWithWhereUniqueWithoutBiddingInput[]
    createMany?: DocumentCreateManyBiddingInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutBiddingInput | DocumentUpdateWithWhereUniqueWithoutBiddingInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutBiddingInput | DocumentUpdateManyWithWhereWithoutBiddingInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type BiddingCategoryUncheckedUpdateManyWithoutBiddingNestedInput = {
    create?: XOR<BiddingCategoryCreateWithoutBiddingInput, BiddingCategoryUncheckedCreateWithoutBiddingInput> | BiddingCategoryCreateWithoutBiddingInput[] | BiddingCategoryUncheckedCreateWithoutBiddingInput[]
    connectOrCreate?: BiddingCategoryCreateOrConnectWithoutBiddingInput | BiddingCategoryCreateOrConnectWithoutBiddingInput[]
    upsert?: BiddingCategoryUpsertWithWhereUniqueWithoutBiddingInput | BiddingCategoryUpsertWithWhereUniqueWithoutBiddingInput[]
    createMany?: BiddingCategoryCreateManyBiddingInputEnvelope
    set?: BiddingCategoryWhereUniqueInput | BiddingCategoryWhereUniqueInput[]
    disconnect?: BiddingCategoryWhereUniqueInput | BiddingCategoryWhereUniqueInput[]
    delete?: BiddingCategoryWhereUniqueInput | BiddingCategoryWhereUniqueInput[]
    connect?: BiddingCategoryWhereUniqueInput | BiddingCategoryWhereUniqueInput[]
    update?: BiddingCategoryUpdateWithWhereUniqueWithoutBiddingInput | BiddingCategoryUpdateWithWhereUniqueWithoutBiddingInput[]
    updateMany?: BiddingCategoryUpdateManyWithWhereWithoutBiddingInput | BiddingCategoryUpdateManyWithWhereWithoutBiddingInput[]
    deleteMany?: BiddingCategoryScalarWhereInput | BiddingCategoryScalarWhereInput[]
  }

  export type ContractUncheckedUpdateOneWithoutBiddingNestedInput = {
    create?: XOR<ContractCreateWithoutBiddingInput, ContractUncheckedCreateWithoutBiddingInput>
    connectOrCreate?: ContractCreateOrConnectWithoutBiddingInput
    upsert?: ContractUpsertWithoutBiddingInput
    disconnect?: ContractWhereInput | boolean
    delete?: ContractWhereInput | boolean
    connect?: ContractWhereUniqueInput
    update?: XOR<XOR<ContractUpdateToOneWithWhereWithoutBiddingInput, ContractUpdateWithoutBiddingInput>, ContractUncheckedUpdateWithoutBiddingInput>
  }

  export type BiddingCreateNestedOneWithoutProposalsInput = {
    create?: XOR<BiddingCreateWithoutProposalsInput, BiddingUncheckedCreateWithoutProposalsInput>
    connectOrCreate?: BiddingCreateOrConnectWithoutProposalsInput
    connect?: BiddingWhereUniqueInput
  }

  export type SupplierCreateNestedOneWithoutProposalsInput = {
    create?: XOR<SupplierCreateWithoutProposalsInput, SupplierUncheckedCreateWithoutProposalsInput>
    connectOrCreate?: SupplierCreateOrConnectWithoutProposalsInput
    connect?: SupplierWhereUniqueInput
  }

  export type ProposalItemCreateNestedManyWithoutProposalInput = {
    create?: XOR<ProposalItemCreateWithoutProposalInput, ProposalItemUncheckedCreateWithoutProposalInput> | ProposalItemCreateWithoutProposalInput[] | ProposalItemUncheckedCreateWithoutProposalInput[]
    connectOrCreate?: ProposalItemCreateOrConnectWithoutProposalInput | ProposalItemCreateOrConnectWithoutProposalInput[]
    createMany?: ProposalItemCreateManyProposalInputEnvelope
    connect?: ProposalItemWhereUniqueInput | ProposalItemWhereUniqueInput[]
  }

  export type DocumentCreateNestedManyWithoutProposalInput = {
    create?: XOR<DocumentCreateWithoutProposalInput, DocumentUncheckedCreateWithoutProposalInput> | DocumentCreateWithoutProposalInput[] | DocumentUncheckedCreateWithoutProposalInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutProposalInput | DocumentCreateOrConnectWithoutProposalInput[]
    createMany?: DocumentCreateManyProposalInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type ContractCreateNestedOneWithoutProposalInput = {
    create?: XOR<ContractCreateWithoutProposalInput, ContractUncheckedCreateWithoutProposalInput>
    connectOrCreate?: ContractCreateOrConnectWithoutProposalInput
    connect?: ContractWhereUniqueInput
  }

  export type ProposalItemUncheckedCreateNestedManyWithoutProposalInput = {
    create?: XOR<ProposalItemCreateWithoutProposalInput, ProposalItemUncheckedCreateWithoutProposalInput> | ProposalItemCreateWithoutProposalInput[] | ProposalItemUncheckedCreateWithoutProposalInput[]
    connectOrCreate?: ProposalItemCreateOrConnectWithoutProposalInput | ProposalItemCreateOrConnectWithoutProposalInput[]
    createMany?: ProposalItemCreateManyProposalInputEnvelope
    connect?: ProposalItemWhereUniqueInput | ProposalItemWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutProposalInput = {
    create?: XOR<DocumentCreateWithoutProposalInput, DocumentUncheckedCreateWithoutProposalInput> | DocumentCreateWithoutProposalInput[] | DocumentUncheckedCreateWithoutProposalInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutProposalInput | DocumentCreateOrConnectWithoutProposalInput[]
    createMany?: DocumentCreateManyProposalInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type ContractUncheckedCreateNestedOneWithoutProposalInput = {
    create?: XOR<ContractCreateWithoutProposalInput, ContractUncheckedCreateWithoutProposalInput>
    connectOrCreate?: ContractCreateOrConnectWithoutProposalInput
    connect?: ContractWhereUniqueInput
  }

  export type EnumProposalStatusFieldUpdateOperationsInput = {
    set?: $Enums.ProposalStatus
  }

  export type BiddingUpdateOneRequiredWithoutProposalsNestedInput = {
    create?: XOR<BiddingCreateWithoutProposalsInput, BiddingUncheckedCreateWithoutProposalsInput>
    connectOrCreate?: BiddingCreateOrConnectWithoutProposalsInput
    upsert?: BiddingUpsertWithoutProposalsInput
    connect?: BiddingWhereUniqueInput
    update?: XOR<XOR<BiddingUpdateToOneWithWhereWithoutProposalsInput, BiddingUpdateWithoutProposalsInput>, BiddingUncheckedUpdateWithoutProposalsInput>
  }

  export type SupplierUpdateOneRequiredWithoutProposalsNestedInput = {
    create?: XOR<SupplierCreateWithoutProposalsInput, SupplierUncheckedCreateWithoutProposalsInput>
    connectOrCreate?: SupplierCreateOrConnectWithoutProposalsInput
    upsert?: SupplierUpsertWithoutProposalsInput
    connect?: SupplierWhereUniqueInput
    update?: XOR<XOR<SupplierUpdateToOneWithWhereWithoutProposalsInput, SupplierUpdateWithoutProposalsInput>, SupplierUncheckedUpdateWithoutProposalsInput>
  }

  export type ProposalItemUpdateManyWithoutProposalNestedInput = {
    create?: XOR<ProposalItemCreateWithoutProposalInput, ProposalItemUncheckedCreateWithoutProposalInput> | ProposalItemCreateWithoutProposalInput[] | ProposalItemUncheckedCreateWithoutProposalInput[]
    connectOrCreate?: ProposalItemCreateOrConnectWithoutProposalInput | ProposalItemCreateOrConnectWithoutProposalInput[]
    upsert?: ProposalItemUpsertWithWhereUniqueWithoutProposalInput | ProposalItemUpsertWithWhereUniqueWithoutProposalInput[]
    createMany?: ProposalItemCreateManyProposalInputEnvelope
    set?: ProposalItemWhereUniqueInput | ProposalItemWhereUniqueInput[]
    disconnect?: ProposalItemWhereUniqueInput | ProposalItemWhereUniqueInput[]
    delete?: ProposalItemWhereUniqueInput | ProposalItemWhereUniqueInput[]
    connect?: ProposalItemWhereUniqueInput | ProposalItemWhereUniqueInput[]
    update?: ProposalItemUpdateWithWhereUniqueWithoutProposalInput | ProposalItemUpdateWithWhereUniqueWithoutProposalInput[]
    updateMany?: ProposalItemUpdateManyWithWhereWithoutProposalInput | ProposalItemUpdateManyWithWhereWithoutProposalInput[]
    deleteMany?: ProposalItemScalarWhereInput | ProposalItemScalarWhereInput[]
  }

  export type DocumentUpdateManyWithoutProposalNestedInput = {
    create?: XOR<DocumentCreateWithoutProposalInput, DocumentUncheckedCreateWithoutProposalInput> | DocumentCreateWithoutProposalInput[] | DocumentUncheckedCreateWithoutProposalInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutProposalInput | DocumentCreateOrConnectWithoutProposalInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutProposalInput | DocumentUpsertWithWhereUniqueWithoutProposalInput[]
    createMany?: DocumentCreateManyProposalInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutProposalInput | DocumentUpdateWithWhereUniqueWithoutProposalInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutProposalInput | DocumentUpdateManyWithWhereWithoutProposalInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type ContractUpdateOneWithoutProposalNestedInput = {
    create?: XOR<ContractCreateWithoutProposalInput, ContractUncheckedCreateWithoutProposalInput>
    connectOrCreate?: ContractCreateOrConnectWithoutProposalInput
    upsert?: ContractUpsertWithoutProposalInput
    disconnect?: ContractWhereInput | boolean
    delete?: ContractWhereInput | boolean
    connect?: ContractWhereUniqueInput
    update?: XOR<XOR<ContractUpdateToOneWithWhereWithoutProposalInput, ContractUpdateWithoutProposalInput>, ContractUncheckedUpdateWithoutProposalInput>
  }

  export type ProposalItemUncheckedUpdateManyWithoutProposalNestedInput = {
    create?: XOR<ProposalItemCreateWithoutProposalInput, ProposalItemUncheckedCreateWithoutProposalInput> | ProposalItemCreateWithoutProposalInput[] | ProposalItemUncheckedCreateWithoutProposalInput[]
    connectOrCreate?: ProposalItemCreateOrConnectWithoutProposalInput | ProposalItemCreateOrConnectWithoutProposalInput[]
    upsert?: ProposalItemUpsertWithWhereUniqueWithoutProposalInput | ProposalItemUpsertWithWhereUniqueWithoutProposalInput[]
    createMany?: ProposalItemCreateManyProposalInputEnvelope
    set?: ProposalItemWhereUniqueInput | ProposalItemWhereUniqueInput[]
    disconnect?: ProposalItemWhereUniqueInput | ProposalItemWhereUniqueInput[]
    delete?: ProposalItemWhereUniqueInput | ProposalItemWhereUniqueInput[]
    connect?: ProposalItemWhereUniqueInput | ProposalItemWhereUniqueInput[]
    update?: ProposalItemUpdateWithWhereUniqueWithoutProposalInput | ProposalItemUpdateWithWhereUniqueWithoutProposalInput[]
    updateMany?: ProposalItemUpdateManyWithWhereWithoutProposalInput | ProposalItemUpdateManyWithWhereWithoutProposalInput[]
    deleteMany?: ProposalItemScalarWhereInput | ProposalItemScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutProposalNestedInput = {
    create?: XOR<DocumentCreateWithoutProposalInput, DocumentUncheckedCreateWithoutProposalInput> | DocumentCreateWithoutProposalInput[] | DocumentUncheckedCreateWithoutProposalInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutProposalInput | DocumentCreateOrConnectWithoutProposalInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutProposalInput | DocumentUpsertWithWhereUniqueWithoutProposalInput[]
    createMany?: DocumentCreateManyProposalInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutProposalInput | DocumentUpdateWithWhereUniqueWithoutProposalInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutProposalInput | DocumentUpdateManyWithWhereWithoutProposalInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type ContractUncheckedUpdateOneWithoutProposalNestedInput = {
    create?: XOR<ContractCreateWithoutProposalInput, ContractUncheckedCreateWithoutProposalInput>
    connectOrCreate?: ContractCreateOrConnectWithoutProposalInput
    upsert?: ContractUpsertWithoutProposalInput
    disconnect?: ContractWhereInput | boolean
    delete?: ContractWhereInput | boolean
    connect?: ContractWhereUniqueInput
    update?: XOR<XOR<ContractUpdateToOneWithWhereWithoutProposalInput, ContractUpdateWithoutProposalInput>, ContractUncheckedUpdateWithoutProposalInput>
  }

  export type ProposalCreateNestedOneWithoutItemsInput = {
    create?: XOR<ProposalCreateWithoutItemsInput, ProposalUncheckedCreateWithoutItemsInput>
    connectOrCreate?: ProposalCreateOrConnectWithoutItemsInput
    connect?: ProposalWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProposalUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<ProposalCreateWithoutItemsInput, ProposalUncheckedCreateWithoutItemsInput>
    connectOrCreate?: ProposalCreateOrConnectWithoutItemsInput
    upsert?: ProposalUpsertWithoutItemsInput
    connect?: ProposalWhereUniqueInput
    update?: XOR<XOR<ProposalUpdateToOneWithWhereWithoutItemsInput, ProposalUpdateWithoutItemsInput>, ProposalUncheckedUpdateWithoutItemsInput>
  }

  export type BiddingCreateNestedOneWithoutContractInput = {
    create?: XOR<BiddingCreateWithoutContractInput, BiddingUncheckedCreateWithoutContractInput>
    connectOrCreate?: BiddingCreateOrConnectWithoutContractInput
    connect?: BiddingWhereUniqueInput
  }

  export type ProposalCreateNestedOneWithoutContractInput = {
    create?: XOR<ProposalCreateWithoutContractInput, ProposalUncheckedCreateWithoutContractInput>
    connectOrCreate?: ProposalCreateOrConnectWithoutContractInput
    connect?: ProposalWhereUniqueInput
  }

  export type PublicEntityCreateNestedOneWithoutContractsInput = {
    create?: XOR<PublicEntityCreateWithoutContractsInput, PublicEntityUncheckedCreateWithoutContractsInput>
    connectOrCreate?: PublicEntityCreateOrConnectWithoutContractsInput
    connect?: PublicEntityWhereUniqueInput
  }

  export type SupplierCreateNestedOneWithoutContractsInput = {
    create?: XOR<SupplierCreateWithoutContractsInput, SupplierUncheckedCreateWithoutContractsInput>
    connectOrCreate?: SupplierCreateOrConnectWithoutContractsInput
    connect?: SupplierWhereUniqueInput
  }

  export type DocumentCreateNestedManyWithoutContractInput = {
    create?: XOR<DocumentCreateWithoutContractInput, DocumentUncheckedCreateWithoutContractInput> | DocumentCreateWithoutContractInput[] | DocumentUncheckedCreateWithoutContractInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutContractInput | DocumentCreateOrConnectWithoutContractInput[]
    createMany?: DocumentCreateManyContractInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutContractInput = {
    create?: XOR<DocumentCreateWithoutContractInput, DocumentUncheckedCreateWithoutContractInput> | DocumentCreateWithoutContractInput[] | DocumentUncheckedCreateWithoutContractInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutContractInput | DocumentCreateOrConnectWithoutContractInput[]
    createMany?: DocumentCreateManyContractInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type EnumContractStatusFieldUpdateOperationsInput = {
    set?: $Enums.ContractStatus
  }

  export type BiddingUpdateOneRequiredWithoutContractNestedInput = {
    create?: XOR<BiddingCreateWithoutContractInput, BiddingUncheckedCreateWithoutContractInput>
    connectOrCreate?: BiddingCreateOrConnectWithoutContractInput
    upsert?: BiddingUpsertWithoutContractInput
    connect?: BiddingWhereUniqueInput
    update?: XOR<XOR<BiddingUpdateToOneWithWhereWithoutContractInput, BiddingUpdateWithoutContractInput>, BiddingUncheckedUpdateWithoutContractInput>
  }

  export type ProposalUpdateOneRequiredWithoutContractNestedInput = {
    create?: XOR<ProposalCreateWithoutContractInput, ProposalUncheckedCreateWithoutContractInput>
    connectOrCreate?: ProposalCreateOrConnectWithoutContractInput
    upsert?: ProposalUpsertWithoutContractInput
    connect?: ProposalWhereUniqueInput
    update?: XOR<XOR<ProposalUpdateToOneWithWhereWithoutContractInput, ProposalUpdateWithoutContractInput>, ProposalUncheckedUpdateWithoutContractInput>
  }

  export type PublicEntityUpdateOneRequiredWithoutContractsNestedInput = {
    create?: XOR<PublicEntityCreateWithoutContractsInput, PublicEntityUncheckedCreateWithoutContractsInput>
    connectOrCreate?: PublicEntityCreateOrConnectWithoutContractsInput
    upsert?: PublicEntityUpsertWithoutContractsInput
    connect?: PublicEntityWhereUniqueInput
    update?: XOR<XOR<PublicEntityUpdateToOneWithWhereWithoutContractsInput, PublicEntityUpdateWithoutContractsInput>, PublicEntityUncheckedUpdateWithoutContractsInput>
  }

  export type SupplierUpdateOneRequiredWithoutContractsNestedInput = {
    create?: XOR<SupplierCreateWithoutContractsInput, SupplierUncheckedCreateWithoutContractsInput>
    connectOrCreate?: SupplierCreateOrConnectWithoutContractsInput
    upsert?: SupplierUpsertWithoutContractsInput
    connect?: SupplierWhereUniqueInput
    update?: XOR<XOR<SupplierUpdateToOneWithWhereWithoutContractsInput, SupplierUpdateWithoutContractsInput>, SupplierUncheckedUpdateWithoutContractsInput>
  }

  export type DocumentUpdateManyWithoutContractNestedInput = {
    create?: XOR<DocumentCreateWithoutContractInput, DocumentUncheckedCreateWithoutContractInput> | DocumentCreateWithoutContractInput[] | DocumentUncheckedCreateWithoutContractInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutContractInput | DocumentCreateOrConnectWithoutContractInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutContractInput | DocumentUpsertWithWhereUniqueWithoutContractInput[]
    createMany?: DocumentCreateManyContractInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutContractInput | DocumentUpdateWithWhereUniqueWithoutContractInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutContractInput | DocumentUpdateManyWithWhereWithoutContractInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutContractNestedInput = {
    create?: XOR<DocumentCreateWithoutContractInput, DocumentUncheckedCreateWithoutContractInput> | DocumentCreateWithoutContractInput[] | DocumentUncheckedCreateWithoutContractInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutContractInput | DocumentCreateOrConnectWithoutContractInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutContractInput | DocumentUpsertWithWhereUniqueWithoutContractInput[]
    createMany?: DocumentCreateManyContractInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutContractInput | DocumentUpdateWithWhereUniqueWithoutContractInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutContractInput | DocumentUpdateManyWithWhereWithoutContractInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type BiddingCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<BiddingCreateWithoutDocumentsInput, BiddingUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: BiddingCreateOrConnectWithoutDocumentsInput
    connect?: BiddingWhereUniqueInput
  }

  export type ProposalCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<ProposalCreateWithoutDocumentsInput, ProposalUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: ProposalCreateOrConnectWithoutDocumentsInput
    connect?: ProposalWhereUniqueInput
  }

  export type ContractCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<ContractCreateWithoutDocumentsInput, ContractUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: ContractCreateOrConnectWithoutDocumentsInput
    connect?: ContractWhereUniqueInput
  }

  export type SupplierCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<SupplierCreateWithoutDocumentsInput, SupplierUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: SupplierCreateOrConnectWithoutDocumentsInput
    connect?: SupplierWhereUniqueInput
  }

  export type PublicEntityCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<PublicEntityCreateWithoutDocumentsInput, PublicEntityUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: PublicEntityCreateOrConnectWithoutDocumentsInput
    connect?: PublicEntityWhereUniqueInput
  }

  export type EnumDocumentTypeFieldUpdateOperationsInput = {
    set?: $Enums.DocumentType
  }

  export type BiddingUpdateOneWithoutDocumentsNestedInput = {
    create?: XOR<BiddingCreateWithoutDocumentsInput, BiddingUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: BiddingCreateOrConnectWithoutDocumentsInput
    upsert?: BiddingUpsertWithoutDocumentsInput
    disconnect?: BiddingWhereInput | boolean
    delete?: BiddingWhereInput | boolean
    connect?: BiddingWhereUniqueInput
    update?: XOR<XOR<BiddingUpdateToOneWithWhereWithoutDocumentsInput, BiddingUpdateWithoutDocumentsInput>, BiddingUncheckedUpdateWithoutDocumentsInput>
  }

  export type ProposalUpdateOneWithoutDocumentsNestedInput = {
    create?: XOR<ProposalCreateWithoutDocumentsInput, ProposalUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: ProposalCreateOrConnectWithoutDocumentsInput
    upsert?: ProposalUpsertWithoutDocumentsInput
    disconnect?: ProposalWhereInput | boolean
    delete?: ProposalWhereInput | boolean
    connect?: ProposalWhereUniqueInput
    update?: XOR<XOR<ProposalUpdateToOneWithWhereWithoutDocumentsInput, ProposalUpdateWithoutDocumentsInput>, ProposalUncheckedUpdateWithoutDocumentsInput>
  }

  export type ContractUpdateOneWithoutDocumentsNestedInput = {
    create?: XOR<ContractCreateWithoutDocumentsInput, ContractUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: ContractCreateOrConnectWithoutDocumentsInput
    upsert?: ContractUpsertWithoutDocumentsInput
    disconnect?: ContractWhereInput | boolean
    delete?: ContractWhereInput | boolean
    connect?: ContractWhereUniqueInput
    update?: XOR<XOR<ContractUpdateToOneWithWhereWithoutDocumentsInput, ContractUpdateWithoutDocumentsInput>, ContractUncheckedUpdateWithoutDocumentsInput>
  }

  export type SupplierUpdateOneWithoutDocumentsNestedInput = {
    create?: XOR<SupplierCreateWithoutDocumentsInput, SupplierUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: SupplierCreateOrConnectWithoutDocumentsInput
    upsert?: SupplierUpsertWithoutDocumentsInput
    disconnect?: SupplierWhereInput | boolean
    delete?: SupplierWhereInput | boolean
    connect?: SupplierWhereUniqueInput
    update?: XOR<XOR<SupplierUpdateToOneWithWhereWithoutDocumentsInput, SupplierUpdateWithoutDocumentsInput>, SupplierUncheckedUpdateWithoutDocumentsInput>
  }

  export type PublicEntityUpdateOneWithoutDocumentsNestedInput = {
    create?: XOR<PublicEntityCreateWithoutDocumentsInput, PublicEntityUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: PublicEntityCreateOrConnectWithoutDocumentsInput
    upsert?: PublicEntityUpsertWithoutDocumentsInput
    disconnect?: PublicEntityWhereInput | boolean
    delete?: PublicEntityWhereInput | boolean
    connect?: PublicEntityWhereUniqueInput
    update?: XOR<XOR<PublicEntityUpdateToOneWithWhereWithoutDocumentsInput, PublicEntityUpdateWithoutDocumentsInput>, PublicEntityUncheckedUpdateWithoutDocumentsInput>
  }

  export type BiddingCreateNestedOneWithoutCategoriesInput = {
    create?: XOR<BiddingCreateWithoutCategoriesInput, BiddingUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: BiddingCreateOrConnectWithoutCategoriesInput
    connect?: BiddingWhereUniqueInput
  }

  export type CategoryCreateNestedOneWithoutBiddingsInput = {
    create?: XOR<CategoryCreateWithoutBiddingsInput, CategoryUncheckedCreateWithoutBiddingsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutBiddingsInput
    connect?: CategoryWhereUniqueInput
  }

  export type BiddingUpdateOneRequiredWithoutCategoriesNestedInput = {
    create?: XOR<BiddingCreateWithoutCategoriesInput, BiddingUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: BiddingCreateOrConnectWithoutCategoriesInput
    upsert?: BiddingUpsertWithoutCategoriesInput
    connect?: BiddingWhereUniqueInput
    update?: XOR<XOR<BiddingUpdateToOneWithWhereWithoutCategoriesInput, BiddingUpdateWithoutCategoriesInput>, BiddingUncheckedUpdateWithoutCategoriesInput>
  }

  export type CategoryUpdateOneRequiredWithoutBiddingsNestedInput = {
    create?: XOR<CategoryCreateWithoutBiddingsInput, CategoryUncheckedCreateWithoutBiddingsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutBiddingsInput
    upsert?: CategoryUpsertWithoutBiddingsInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutBiddingsInput, CategoryUpdateWithoutBiddingsInput>, CategoryUncheckedUpdateWithoutBiddingsInput>
  }

  export type SupplierCreateNestedOneWithoutCategoriesInput = {
    create?: XOR<SupplierCreateWithoutCategoriesInput, SupplierUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: SupplierCreateOrConnectWithoutCategoriesInput
    connect?: SupplierWhereUniqueInput
  }

  export type CategoryCreateNestedOneWithoutSuppliersInput = {
    create?: XOR<CategoryCreateWithoutSuppliersInput, CategoryUncheckedCreateWithoutSuppliersInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutSuppliersInput
    connect?: CategoryWhereUniqueInput
  }

  export type SupplierUpdateOneRequiredWithoutCategoriesNestedInput = {
    create?: XOR<SupplierCreateWithoutCategoriesInput, SupplierUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: SupplierCreateOrConnectWithoutCategoriesInput
    upsert?: SupplierUpsertWithoutCategoriesInput
    connect?: SupplierWhereUniqueInput
    update?: XOR<XOR<SupplierUpdateToOneWithWhereWithoutCategoriesInput, SupplierUpdateWithoutCategoriesInput>, SupplierUncheckedUpdateWithoutCategoriesInput>
  }

  export type CategoryUpdateOneRequiredWithoutSuppliersNestedInput = {
    create?: XOR<CategoryCreateWithoutSuppliersInput, CategoryUncheckedCreateWithoutSuppliersInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutSuppliersInput
    upsert?: CategoryUpsertWithoutSuppliersInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutSuppliersInput, CategoryUpdateWithoutSuppliersInput>, CategoryUncheckedUpdateWithoutSuppliersInput>
  }

  export type UserCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAuditLogsNestedInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    upsert?: UserUpsertWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuditLogsInput, UserUpdateWithoutAuditLogsInput>, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserCreateNestedOneWithoutPermissionsInput = {
    create?: XOR<UserCreateWithoutPermissionsInput, UserUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPermissionsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumPermissionFieldUpdateOperationsInput = {
    set?: $Enums.Permission
  }

  export type UserUpdateOneRequiredWithoutPermissionsNestedInput = {
    create?: XOR<UserCreateWithoutPermissionsInput, UserUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPermissionsInput
    upsert?: UserUpsertWithoutPermissionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPermissionsInput, UserUpdateWithoutPermissionsInput>, UserUncheckedUpdateWithoutPermissionsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedEnumUserStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusFilter<$PrismaModel> | $Enums.UserStatus
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedEnumUserStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusWithAggregatesFilter<$PrismaModel> | $Enums.UserStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserStatusFilter<$PrismaModel>
    _max?: NestedEnumUserStatusFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumBiddingTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.BiddingType | EnumBiddingTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BiddingType[] | ListEnumBiddingTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.BiddingType[] | ListEnumBiddingTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumBiddingTypeFilter<$PrismaModel> | $Enums.BiddingType
  }

  export type NestedEnumBiddingStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BiddingStatus | EnumBiddingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BiddingStatus[] | ListEnumBiddingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BiddingStatus[] | ListEnumBiddingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBiddingStatusFilter<$PrismaModel> | $Enums.BiddingStatus
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedEnumBiddingTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BiddingType | EnumBiddingTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BiddingType[] | ListEnumBiddingTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.BiddingType[] | ListEnumBiddingTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumBiddingTypeWithAggregatesFilter<$PrismaModel> | $Enums.BiddingType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBiddingTypeFilter<$PrismaModel>
    _max?: NestedEnumBiddingTypeFilter<$PrismaModel>
  }

  export type NestedEnumBiddingStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BiddingStatus | EnumBiddingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BiddingStatus[] | ListEnumBiddingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BiddingStatus[] | ListEnumBiddingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBiddingStatusWithAggregatesFilter<$PrismaModel> | $Enums.BiddingStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBiddingStatusFilter<$PrismaModel>
    _max?: NestedEnumBiddingStatusFilter<$PrismaModel>
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedEnumProposalStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ProposalStatus | EnumProposalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProposalStatus[] | ListEnumProposalStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProposalStatus[] | ListEnumProposalStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProposalStatusFilter<$PrismaModel> | $Enums.ProposalStatus
  }

  export type NestedEnumProposalStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProposalStatus | EnumProposalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProposalStatus[] | ListEnumProposalStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProposalStatus[] | ListEnumProposalStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProposalStatusWithAggregatesFilter<$PrismaModel> | $Enums.ProposalStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProposalStatusFilter<$PrismaModel>
    _max?: NestedEnumProposalStatusFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumContractStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractStatus | EnumContractStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ContractStatus[] | ListEnumContractStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContractStatus[] | ListEnumContractStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumContractStatusFilter<$PrismaModel> | $Enums.ContractStatus
  }

  export type NestedEnumContractStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractStatus | EnumContractStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ContractStatus[] | ListEnumContractStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContractStatus[] | ListEnumContractStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumContractStatusWithAggregatesFilter<$PrismaModel> | $Enums.ContractStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumContractStatusFilter<$PrismaModel>
    _max?: NestedEnumContractStatusFilter<$PrismaModel>
  }

  export type NestedEnumDocumentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeFilter<$PrismaModel> | $Enums.DocumentType
  }

  export type NestedEnumDocumentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeWithAggregatesFilter<$PrismaModel> | $Enums.DocumentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDocumentTypeFilter<$PrismaModel>
    _max?: NestedEnumDocumentTypeFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumPermissionFilter<$PrismaModel = never> = {
    equals?: $Enums.Permission | EnumPermissionFieldRefInput<$PrismaModel>
    in?: $Enums.Permission[] | ListEnumPermissionFieldRefInput<$PrismaModel>
    notIn?: $Enums.Permission[] | ListEnumPermissionFieldRefInput<$PrismaModel>
    not?: NestedEnumPermissionFilter<$PrismaModel> | $Enums.Permission
  }

  export type NestedEnumPermissionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Permission | EnumPermissionFieldRefInput<$PrismaModel>
    in?: $Enums.Permission[] | ListEnumPermissionFieldRefInput<$PrismaModel>
    notIn?: $Enums.Permission[] | ListEnumPermissionFieldRefInput<$PrismaModel>
    not?: NestedEnumPermissionWithAggregatesFilter<$PrismaModel> | $Enums.Permission
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPermissionFilter<$PrismaModel>
    _max?: NestedEnumPermissionFilter<$PrismaModel>
  }

  export type SupplierCreateWithoutUserInput = {
    id?: string
    companyName: string
    tradeName?: string | null
    cnpj: string
    stateRegistration?: string | null
    municipalRegistration?: string | null
    address: string
    city: string
    state: string
    zipCode: string
    website?: string | null
    description?: string | null
    isActive?: boolean
    verifiedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    proposals?: ProposalCreateNestedManyWithoutSupplierInput
    contracts?: ContractCreateNestedManyWithoutSupplierInput
    documents?: DocumentCreateNestedManyWithoutSupplierInput
    categories?: SupplierCategoryCreateNestedManyWithoutSupplierInput
  }

  export type SupplierUncheckedCreateWithoutUserInput = {
    id?: string
    companyName: string
    tradeName?: string | null
    cnpj: string
    stateRegistration?: string | null
    municipalRegistration?: string | null
    address: string
    city: string
    state: string
    zipCode: string
    website?: string | null
    description?: string | null
    isActive?: boolean
    verifiedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    proposals?: ProposalUncheckedCreateNestedManyWithoutSupplierInput
    contracts?: ContractUncheckedCreateNestedManyWithoutSupplierInput
    documents?: DocumentUncheckedCreateNestedManyWithoutSupplierInput
    categories?: SupplierCategoryUncheckedCreateNestedManyWithoutSupplierInput
  }

  export type SupplierCreateOrConnectWithoutUserInput = {
    where: SupplierWhereUniqueInput
    create: XOR<SupplierCreateWithoutUserInput, SupplierUncheckedCreateWithoutUserInput>
  }

  export type PublicEntityCreateWithoutUserInput = {
    id?: string
    name: string
    cnpj: string
    entityType: string
    address: string
    city: string
    state: string
    zipCode: string
    phone: string
    website?: string | null
    isActive?: boolean
    verifiedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    biddings?: BiddingCreateNestedManyWithoutPublicEntityInput
    contracts?: ContractCreateNestedManyWithoutPublicEntityInput
    documents?: DocumentCreateNestedManyWithoutPublicEntityInput
  }

  export type PublicEntityUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    cnpj: string
    entityType: string
    address: string
    city: string
    state: string
    zipCode: string
    phone: string
    website?: string | null
    isActive?: boolean
    verifiedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    biddings?: BiddingUncheckedCreateNestedManyWithoutPublicEntityInput
    contracts?: ContractUncheckedCreateNestedManyWithoutPublicEntityInput
    documents?: DocumentUncheckedCreateNestedManyWithoutPublicEntityInput
  }

  export type PublicEntityCreateOrConnectWithoutUserInput = {
    where: PublicEntityWhereUniqueInput
    create: XOR<PublicEntityCreateWithoutUserInput, PublicEntityUncheckedCreateWithoutUserInput>
  }

  export type CitizenCreateWithoutUserInput = {
    id?: string
    cpf?: string | null
    dateOfBirth?: Date | string | null
    profession?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    zipCode?: string | null
    interests?: CitizenCreateinterestsInput | string[]
    isActive?: boolean
    verifiedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CitizenUncheckedCreateWithoutUserInput = {
    id?: string
    cpf?: string | null
    dateOfBirth?: Date | string | null
    profession?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    zipCode?: string | null
    interests?: CitizenCreateinterestsInput | string[]
    isActive?: boolean
    verifiedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CitizenCreateOrConnectWithoutUserInput = {
    where: CitizenWhereUniqueInput
    create: XOR<CitizenCreateWithoutUserInput, CitizenUncheckedCreateWithoutUserInput>
  }

  export type AuditLogCreateWithoutUserInput = {
    id?: string
    action: string
    resource: string
    resourceId?: string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUncheckedCreateWithoutUserInput = {
    id?: string
    action: string
    resource: string
    resourceId?: string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogCreateOrConnectWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogCreateManyUserInputEnvelope = {
    data: AuditLogCreateManyUserInput | AuditLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserSessionCreateWithoutUserInput = {
    id?: string
    token: string
    ipAddress?: string | null
    userAgent?: string | null
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSessionUncheckedCreateWithoutUserInput = {
    id?: string
    token: string
    ipAddress?: string | null
    userAgent?: string | null
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSessionCreateOrConnectWithoutUserInput = {
    where: UserSessionWhereUniqueInput
    create: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput>
  }

  export type UserSessionCreateManyUserInputEnvelope = {
    data: UserSessionCreateManyUserInput | UserSessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserPermissionCreateWithoutUserInput = {
    id?: string
    permission: $Enums.Permission
    grantedBy?: string | null
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPermissionUncheckedCreateWithoutUserInput = {
    id?: string
    permission: $Enums.Permission
    grantedBy?: string | null
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPermissionCreateOrConnectWithoutUserInput = {
    where: UserPermissionWhereUniqueInput
    create: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput>
  }

  export type UserPermissionCreateManyUserInputEnvelope = {
    data: UserPermissionCreateManyUserInput | UserPermissionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SupplierUpsertWithoutUserInput = {
    update: XOR<SupplierUpdateWithoutUserInput, SupplierUncheckedUpdateWithoutUserInput>
    create: XOR<SupplierCreateWithoutUserInput, SupplierUncheckedCreateWithoutUserInput>
    where?: SupplierWhereInput
  }

  export type SupplierUpdateToOneWithWhereWithoutUserInput = {
    where?: SupplierWhereInput
    data: XOR<SupplierUpdateWithoutUserInput, SupplierUncheckedUpdateWithoutUserInput>
  }

  export type SupplierUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    tradeName?: NullableStringFieldUpdateOperationsInput | string | null
    cnpj?: StringFieldUpdateOperationsInput | string
    stateRegistration?: NullableStringFieldUpdateOperationsInput | string | null
    municipalRegistration?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proposals?: ProposalUpdateManyWithoutSupplierNestedInput
    contracts?: ContractUpdateManyWithoutSupplierNestedInput
    documents?: DocumentUpdateManyWithoutSupplierNestedInput
    categories?: SupplierCategoryUpdateManyWithoutSupplierNestedInput
  }

  export type SupplierUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    tradeName?: NullableStringFieldUpdateOperationsInput | string | null
    cnpj?: StringFieldUpdateOperationsInput | string
    stateRegistration?: NullableStringFieldUpdateOperationsInput | string | null
    municipalRegistration?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proposals?: ProposalUncheckedUpdateManyWithoutSupplierNestedInput
    contracts?: ContractUncheckedUpdateManyWithoutSupplierNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutSupplierNestedInput
    categories?: SupplierCategoryUncheckedUpdateManyWithoutSupplierNestedInput
  }

  export type PublicEntityUpsertWithoutUserInput = {
    update: XOR<PublicEntityUpdateWithoutUserInput, PublicEntityUncheckedUpdateWithoutUserInput>
    create: XOR<PublicEntityCreateWithoutUserInput, PublicEntityUncheckedCreateWithoutUserInput>
    where?: PublicEntityWhereInput
  }

  export type PublicEntityUpdateToOneWithWhereWithoutUserInput = {
    where?: PublicEntityWhereInput
    data: XOR<PublicEntityUpdateWithoutUserInput, PublicEntityUncheckedUpdateWithoutUserInput>
  }

  export type PublicEntityUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    biddings?: BiddingUpdateManyWithoutPublicEntityNestedInput
    contracts?: ContractUpdateManyWithoutPublicEntityNestedInput
    documents?: DocumentUpdateManyWithoutPublicEntityNestedInput
  }

  export type PublicEntityUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    biddings?: BiddingUncheckedUpdateManyWithoutPublicEntityNestedInput
    contracts?: ContractUncheckedUpdateManyWithoutPublicEntityNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutPublicEntityNestedInput
  }

  export type CitizenUpsertWithoutUserInput = {
    update: XOR<CitizenUpdateWithoutUserInput, CitizenUncheckedUpdateWithoutUserInput>
    create: XOR<CitizenCreateWithoutUserInput, CitizenUncheckedCreateWithoutUserInput>
    where?: CitizenWhereInput
  }

  export type CitizenUpdateToOneWithWhereWithoutUserInput = {
    where?: CitizenWhereInput
    data: XOR<CitizenUpdateWithoutUserInput, CitizenUncheckedUpdateWithoutUserInput>
  }

  export type CitizenUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: CitizenUpdateinterestsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CitizenUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: CitizenUpdateinterestsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUpsertWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutUserInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutUserInput>
  }

  export type AuditLogScalarWhereInput = {
    AND?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    OR?: AuditLogScalarWhereInput[]
    NOT?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    userId?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    resource?: StringFilter<"AuditLog"> | string
    resourceId?: StringNullableFilter<"AuditLog"> | string | null
    oldValues?: JsonNullableFilter<"AuditLog">
    newValues?: JsonNullableFilter<"AuditLog">
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
  }

  export type UserSessionUpsertWithWhereUniqueWithoutUserInput = {
    where: UserSessionWhereUniqueInput
    update: XOR<UserSessionUpdateWithoutUserInput, UserSessionUncheckedUpdateWithoutUserInput>
    create: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput>
  }

  export type UserSessionUpdateWithWhereUniqueWithoutUserInput = {
    where: UserSessionWhereUniqueInput
    data: XOR<UserSessionUpdateWithoutUserInput, UserSessionUncheckedUpdateWithoutUserInput>
  }

  export type UserSessionUpdateManyWithWhereWithoutUserInput = {
    where: UserSessionScalarWhereInput
    data: XOR<UserSessionUpdateManyMutationInput, UserSessionUncheckedUpdateManyWithoutUserInput>
  }

  export type UserSessionScalarWhereInput = {
    AND?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
    OR?: UserSessionScalarWhereInput[]
    NOT?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
    id?: StringFilter<"UserSession"> | string
    userId?: StringFilter<"UserSession"> | string
    token?: StringFilter<"UserSession"> | string
    ipAddress?: StringNullableFilter<"UserSession"> | string | null
    userAgent?: StringNullableFilter<"UserSession"> | string | null
    expiresAt?: DateTimeFilter<"UserSession"> | Date | string
    createdAt?: DateTimeFilter<"UserSession"> | Date | string
    updatedAt?: DateTimeFilter<"UserSession"> | Date | string
  }

  export type UserPermissionUpsertWithWhereUniqueWithoutUserInput = {
    where: UserPermissionWhereUniqueInput
    update: XOR<UserPermissionUpdateWithoutUserInput, UserPermissionUncheckedUpdateWithoutUserInput>
    create: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput>
  }

  export type UserPermissionUpdateWithWhereUniqueWithoutUserInput = {
    where: UserPermissionWhereUniqueInput
    data: XOR<UserPermissionUpdateWithoutUserInput, UserPermissionUncheckedUpdateWithoutUserInput>
  }

  export type UserPermissionUpdateManyWithWhereWithoutUserInput = {
    where: UserPermissionScalarWhereInput
    data: XOR<UserPermissionUpdateManyMutationInput, UserPermissionUncheckedUpdateManyWithoutUserInput>
  }

  export type UserPermissionScalarWhereInput = {
    AND?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
    OR?: UserPermissionScalarWhereInput[]
    NOT?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
    id?: StringFilter<"UserPermission"> | string
    userId?: StringFilter<"UserPermission"> | string
    permission?: EnumPermissionFilter<"UserPermission"> | $Enums.Permission
    grantedBy?: StringNullableFilter<"UserPermission"> | string | null
    grantedAt?: DateTimeFilter<"UserPermission"> | Date | string
    expiresAt?: DateTimeNullableFilter<"UserPermission"> | Date | string | null
    isActive?: BoolFilter<"UserPermission"> | boolean
    createdAt?: DateTimeFilter<"UserPermission"> | Date | string
    updatedAt?: DateTimeFilter<"UserPermission"> | Date | string
  }

  export type UserCreateWithoutSupplierInput = {
    id?: string
    email: string
    password: string
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    firstName: string
    lastName: string
    phone?: string | null
    avatar?: string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    publicEntity?: PublicEntityCreateNestedOneWithoutUserInput
    citizen?: CitizenCreateNestedOneWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSupplierInput = {
    id?: string
    email: string
    password: string
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    firstName: string
    lastName: string
    phone?: string | null
    avatar?: string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    publicEntity?: PublicEntityUncheckedCreateNestedOneWithoutUserInput
    citizen?: CitizenUncheckedCreateNestedOneWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSupplierInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSupplierInput, UserUncheckedCreateWithoutSupplierInput>
  }

  export type ProposalCreateWithoutSupplierInput = {
    id?: string
    totalValue: Decimal | DecimalJsLike | number | string
    description: string
    status?: $Enums.ProposalStatus
    submittedAt?: Date | string | null
    validUntil: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bidding: BiddingCreateNestedOneWithoutProposalsInput
    items?: ProposalItemCreateNestedManyWithoutProposalInput
    documents?: DocumentCreateNestedManyWithoutProposalInput
    contract?: ContractCreateNestedOneWithoutProposalInput
  }

  export type ProposalUncheckedCreateWithoutSupplierInput = {
    id?: string
    biddingId: string
    totalValue: Decimal | DecimalJsLike | number | string
    description: string
    status?: $Enums.ProposalStatus
    submittedAt?: Date | string | null
    validUntil: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ProposalItemUncheckedCreateNestedManyWithoutProposalInput
    documents?: DocumentUncheckedCreateNestedManyWithoutProposalInput
    contract?: ContractUncheckedCreateNestedOneWithoutProposalInput
  }

  export type ProposalCreateOrConnectWithoutSupplierInput = {
    where: ProposalWhereUniqueInput
    create: XOR<ProposalCreateWithoutSupplierInput, ProposalUncheckedCreateWithoutSupplierInput>
  }

  export type ProposalCreateManySupplierInputEnvelope = {
    data: ProposalCreateManySupplierInput | ProposalCreateManySupplierInput[]
    skipDuplicates?: boolean
  }

  export type ContractCreateWithoutSupplierInput = {
    id?: string
    contractNumber: string
    title: string
    description: string
    totalValue: Decimal | DecimalJsLike | number | string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.ContractStatus
    signedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bidding: BiddingCreateNestedOneWithoutContractInput
    proposal: ProposalCreateNestedOneWithoutContractInput
    publicEntity: PublicEntityCreateNestedOneWithoutContractsInput
    documents?: DocumentCreateNestedManyWithoutContractInput
  }

  export type ContractUncheckedCreateWithoutSupplierInput = {
    id?: string
    biddingId: string
    proposalId: string
    publicEntityId: string
    contractNumber: string
    title: string
    description: string
    totalValue: Decimal | DecimalJsLike | number | string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.ContractStatus
    signedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: DocumentUncheckedCreateNestedManyWithoutContractInput
  }

  export type ContractCreateOrConnectWithoutSupplierInput = {
    where: ContractWhereUniqueInput
    create: XOR<ContractCreateWithoutSupplierInput, ContractUncheckedCreateWithoutSupplierInput>
  }

  export type ContractCreateManySupplierInputEnvelope = {
    data: ContractCreateManySupplierInput | ContractCreateManySupplierInput[]
    skipDuplicates?: boolean
  }

  export type DocumentCreateWithoutSupplierInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    size: number
    path: string
    type: $Enums.DocumentType
    description?: string | null
    isPublic?: boolean
    uploadedBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    bidding?: BiddingCreateNestedOneWithoutDocumentsInput
    proposal?: ProposalCreateNestedOneWithoutDocumentsInput
    contract?: ContractCreateNestedOneWithoutDocumentsInput
    publicEntity?: PublicEntityCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateWithoutSupplierInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    size: number
    path: string
    type: $Enums.DocumentType
    description?: string | null
    isPublic?: boolean
    uploadedBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    biddingId?: string | null
    proposalId?: string | null
    contractId?: string | null
    publicEntityId?: string | null
  }

  export type DocumentCreateOrConnectWithoutSupplierInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutSupplierInput, DocumentUncheckedCreateWithoutSupplierInput>
  }

  export type DocumentCreateManySupplierInputEnvelope = {
    data: DocumentCreateManySupplierInput | DocumentCreateManySupplierInput[]
    skipDuplicates?: boolean
  }

  export type SupplierCategoryCreateWithoutSupplierInput = {
    id?: string
    createdAt?: Date | string
    category: CategoryCreateNestedOneWithoutSuppliersInput
  }

  export type SupplierCategoryUncheckedCreateWithoutSupplierInput = {
    id?: string
    categoryId: string
    createdAt?: Date | string
  }

  export type SupplierCategoryCreateOrConnectWithoutSupplierInput = {
    where: SupplierCategoryWhereUniqueInput
    create: XOR<SupplierCategoryCreateWithoutSupplierInput, SupplierCategoryUncheckedCreateWithoutSupplierInput>
  }

  export type SupplierCategoryCreateManySupplierInputEnvelope = {
    data: SupplierCategoryCreateManySupplierInput | SupplierCategoryCreateManySupplierInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutSupplierInput = {
    update: XOR<UserUpdateWithoutSupplierInput, UserUncheckedUpdateWithoutSupplierInput>
    create: XOR<UserCreateWithoutSupplierInput, UserUncheckedCreateWithoutSupplierInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSupplierInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSupplierInput, UserUncheckedUpdateWithoutSupplierInput>
  }

  export type UserUpdateWithoutSupplierInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publicEntity?: PublicEntityUpdateOneWithoutUserNestedInput
    citizen?: CitizenUpdateOneWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSupplierInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publicEntity?: PublicEntityUncheckedUpdateOneWithoutUserNestedInput
    citizen?: CitizenUncheckedUpdateOneWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProposalUpsertWithWhereUniqueWithoutSupplierInput = {
    where: ProposalWhereUniqueInput
    update: XOR<ProposalUpdateWithoutSupplierInput, ProposalUncheckedUpdateWithoutSupplierInput>
    create: XOR<ProposalCreateWithoutSupplierInput, ProposalUncheckedCreateWithoutSupplierInput>
  }

  export type ProposalUpdateWithWhereUniqueWithoutSupplierInput = {
    where: ProposalWhereUniqueInput
    data: XOR<ProposalUpdateWithoutSupplierInput, ProposalUncheckedUpdateWithoutSupplierInput>
  }

  export type ProposalUpdateManyWithWhereWithoutSupplierInput = {
    where: ProposalScalarWhereInput
    data: XOR<ProposalUpdateManyMutationInput, ProposalUncheckedUpdateManyWithoutSupplierInput>
  }

  export type ProposalScalarWhereInput = {
    AND?: ProposalScalarWhereInput | ProposalScalarWhereInput[]
    OR?: ProposalScalarWhereInput[]
    NOT?: ProposalScalarWhereInput | ProposalScalarWhereInput[]
    id?: StringFilter<"Proposal"> | string
    biddingId?: StringFilter<"Proposal"> | string
    supplierId?: StringFilter<"Proposal"> | string
    totalValue?: DecimalFilter<"Proposal"> | Decimal | DecimalJsLike | number | string
    description?: StringFilter<"Proposal"> | string
    status?: EnumProposalStatusFilter<"Proposal"> | $Enums.ProposalStatus
    submittedAt?: DateTimeNullableFilter<"Proposal"> | Date | string | null
    validUntil?: DateTimeFilter<"Proposal"> | Date | string
    notes?: StringNullableFilter<"Proposal"> | string | null
    createdAt?: DateTimeFilter<"Proposal"> | Date | string
    updatedAt?: DateTimeFilter<"Proposal"> | Date | string
  }

  export type ContractUpsertWithWhereUniqueWithoutSupplierInput = {
    where: ContractWhereUniqueInput
    update: XOR<ContractUpdateWithoutSupplierInput, ContractUncheckedUpdateWithoutSupplierInput>
    create: XOR<ContractCreateWithoutSupplierInput, ContractUncheckedCreateWithoutSupplierInput>
  }

  export type ContractUpdateWithWhereUniqueWithoutSupplierInput = {
    where: ContractWhereUniqueInput
    data: XOR<ContractUpdateWithoutSupplierInput, ContractUncheckedUpdateWithoutSupplierInput>
  }

  export type ContractUpdateManyWithWhereWithoutSupplierInput = {
    where: ContractScalarWhereInput
    data: XOR<ContractUpdateManyMutationInput, ContractUncheckedUpdateManyWithoutSupplierInput>
  }

  export type ContractScalarWhereInput = {
    AND?: ContractScalarWhereInput | ContractScalarWhereInput[]
    OR?: ContractScalarWhereInput[]
    NOT?: ContractScalarWhereInput | ContractScalarWhereInput[]
    id?: StringFilter<"Contract"> | string
    biddingId?: StringFilter<"Contract"> | string
    proposalId?: StringFilter<"Contract"> | string
    publicEntityId?: StringFilter<"Contract"> | string
    supplierId?: StringFilter<"Contract"> | string
    contractNumber?: StringFilter<"Contract"> | string
    title?: StringFilter<"Contract"> | string
    description?: StringFilter<"Contract"> | string
    totalValue?: DecimalFilter<"Contract"> | Decimal | DecimalJsLike | number | string
    startDate?: DateTimeFilter<"Contract"> | Date | string
    endDate?: DateTimeFilter<"Contract"> | Date | string
    status?: EnumContractStatusFilter<"Contract"> | $Enums.ContractStatus
    signedAt?: DateTimeNullableFilter<"Contract"> | Date | string | null
    createdAt?: DateTimeFilter<"Contract"> | Date | string
    updatedAt?: DateTimeFilter<"Contract"> | Date | string
  }

  export type DocumentUpsertWithWhereUniqueWithoutSupplierInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutSupplierInput, DocumentUncheckedUpdateWithoutSupplierInput>
    create: XOR<DocumentCreateWithoutSupplierInput, DocumentUncheckedCreateWithoutSupplierInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutSupplierInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutSupplierInput, DocumentUncheckedUpdateWithoutSupplierInput>
  }

  export type DocumentUpdateManyWithWhereWithoutSupplierInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutSupplierInput>
  }

  export type DocumentScalarWhereInput = {
    AND?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    OR?: DocumentScalarWhereInput[]
    NOT?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    id?: StringFilter<"Document"> | string
    filename?: StringFilter<"Document"> | string
    originalName?: StringFilter<"Document"> | string
    mimeType?: StringFilter<"Document"> | string
    size?: IntFilter<"Document"> | number
    path?: StringFilter<"Document"> | string
    type?: EnumDocumentTypeFilter<"Document"> | $Enums.DocumentType
    description?: StringNullableFilter<"Document"> | string | null
    isPublic?: BoolFilter<"Document"> | boolean
    uploadedBy?: StringFilter<"Document"> | string
    createdAt?: DateTimeFilter<"Document"> | Date | string
    updatedAt?: DateTimeFilter<"Document"> | Date | string
    biddingId?: StringNullableFilter<"Document"> | string | null
    proposalId?: StringNullableFilter<"Document"> | string | null
    contractId?: StringNullableFilter<"Document"> | string | null
    supplierId?: StringNullableFilter<"Document"> | string | null
    publicEntityId?: StringNullableFilter<"Document"> | string | null
  }

  export type SupplierCategoryUpsertWithWhereUniqueWithoutSupplierInput = {
    where: SupplierCategoryWhereUniqueInput
    update: XOR<SupplierCategoryUpdateWithoutSupplierInput, SupplierCategoryUncheckedUpdateWithoutSupplierInput>
    create: XOR<SupplierCategoryCreateWithoutSupplierInput, SupplierCategoryUncheckedCreateWithoutSupplierInput>
  }

  export type SupplierCategoryUpdateWithWhereUniqueWithoutSupplierInput = {
    where: SupplierCategoryWhereUniqueInput
    data: XOR<SupplierCategoryUpdateWithoutSupplierInput, SupplierCategoryUncheckedUpdateWithoutSupplierInput>
  }

  export type SupplierCategoryUpdateManyWithWhereWithoutSupplierInput = {
    where: SupplierCategoryScalarWhereInput
    data: XOR<SupplierCategoryUpdateManyMutationInput, SupplierCategoryUncheckedUpdateManyWithoutSupplierInput>
  }

  export type SupplierCategoryScalarWhereInput = {
    AND?: SupplierCategoryScalarWhereInput | SupplierCategoryScalarWhereInput[]
    OR?: SupplierCategoryScalarWhereInput[]
    NOT?: SupplierCategoryScalarWhereInput | SupplierCategoryScalarWhereInput[]
    id?: StringFilter<"SupplierCategory"> | string
    supplierId?: StringFilter<"SupplierCategory"> | string
    categoryId?: StringFilter<"SupplierCategory"> | string
    createdAt?: DateTimeFilter<"SupplierCategory"> | Date | string
  }

  export type UserCreateWithoutPublicEntityInput = {
    id?: string
    email: string
    password: string
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    firstName: string
    lastName: string
    phone?: string | null
    avatar?: string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    supplier?: SupplierCreateNestedOneWithoutUserInput
    citizen?: CitizenCreateNestedOneWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPublicEntityInput = {
    id?: string
    email: string
    password: string
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    firstName: string
    lastName: string
    phone?: string | null
    avatar?: string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    supplier?: SupplierUncheckedCreateNestedOneWithoutUserInput
    citizen?: CitizenUncheckedCreateNestedOneWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPublicEntityInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPublicEntityInput, UserUncheckedCreateWithoutPublicEntityInput>
  }

  export type BiddingCreateWithoutPublicEntityInput = {
    id?: string
    title: string
    description: string
    biddingNumber: string
    type: $Enums.BiddingType
    status?: $Enums.BiddingStatus
    estimatedValue: Decimal | DecimalJsLike | number | string
    openingDate: Date | string
    closingDate: Date | string
    deliveryLocation: string
    deliveryDeadline: Date | string
    requirements: string
    evaluationCriteria: string
    isPublic?: boolean
    publishedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    proposals?: ProposalCreateNestedManyWithoutBiddingInput
    documents?: DocumentCreateNestedManyWithoutBiddingInput
    categories?: BiddingCategoryCreateNestedManyWithoutBiddingInput
    contract?: ContractCreateNestedOneWithoutBiddingInput
  }

  export type BiddingUncheckedCreateWithoutPublicEntityInput = {
    id?: string
    title: string
    description: string
    biddingNumber: string
    type: $Enums.BiddingType
    status?: $Enums.BiddingStatus
    estimatedValue: Decimal | DecimalJsLike | number | string
    openingDate: Date | string
    closingDate: Date | string
    deliveryLocation: string
    deliveryDeadline: Date | string
    requirements: string
    evaluationCriteria: string
    isPublic?: boolean
    publishedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    proposals?: ProposalUncheckedCreateNestedManyWithoutBiddingInput
    documents?: DocumentUncheckedCreateNestedManyWithoutBiddingInput
    categories?: BiddingCategoryUncheckedCreateNestedManyWithoutBiddingInput
    contract?: ContractUncheckedCreateNestedOneWithoutBiddingInput
  }

  export type BiddingCreateOrConnectWithoutPublicEntityInput = {
    where: BiddingWhereUniqueInput
    create: XOR<BiddingCreateWithoutPublicEntityInput, BiddingUncheckedCreateWithoutPublicEntityInput>
  }

  export type BiddingCreateManyPublicEntityInputEnvelope = {
    data: BiddingCreateManyPublicEntityInput | BiddingCreateManyPublicEntityInput[]
    skipDuplicates?: boolean
  }

  export type ContractCreateWithoutPublicEntityInput = {
    id?: string
    contractNumber: string
    title: string
    description: string
    totalValue: Decimal | DecimalJsLike | number | string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.ContractStatus
    signedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bidding: BiddingCreateNestedOneWithoutContractInput
    proposal: ProposalCreateNestedOneWithoutContractInput
    supplier: SupplierCreateNestedOneWithoutContractsInput
    documents?: DocumentCreateNestedManyWithoutContractInput
  }

  export type ContractUncheckedCreateWithoutPublicEntityInput = {
    id?: string
    biddingId: string
    proposalId: string
    supplierId: string
    contractNumber: string
    title: string
    description: string
    totalValue: Decimal | DecimalJsLike | number | string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.ContractStatus
    signedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: DocumentUncheckedCreateNestedManyWithoutContractInput
  }

  export type ContractCreateOrConnectWithoutPublicEntityInput = {
    where: ContractWhereUniqueInput
    create: XOR<ContractCreateWithoutPublicEntityInput, ContractUncheckedCreateWithoutPublicEntityInput>
  }

  export type ContractCreateManyPublicEntityInputEnvelope = {
    data: ContractCreateManyPublicEntityInput | ContractCreateManyPublicEntityInput[]
    skipDuplicates?: boolean
  }

  export type DocumentCreateWithoutPublicEntityInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    size: number
    path: string
    type: $Enums.DocumentType
    description?: string | null
    isPublic?: boolean
    uploadedBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    bidding?: BiddingCreateNestedOneWithoutDocumentsInput
    proposal?: ProposalCreateNestedOneWithoutDocumentsInput
    contract?: ContractCreateNestedOneWithoutDocumentsInput
    supplier?: SupplierCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateWithoutPublicEntityInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    size: number
    path: string
    type: $Enums.DocumentType
    description?: string | null
    isPublic?: boolean
    uploadedBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    biddingId?: string | null
    proposalId?: string | null
    contractId?: string | null
    supplierId?: string | null
  }

  export type DocumentCreateOrConnectWithoutPublicEntityInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutPublicEntityInput, DocumentUncheckedCreateWithoutPublicEntityInput>
  }

  export type DocumentCreateManyPublicEntityInputEnvelope = {
    data: DocumentCreateManyPublicEntityInput | DocumentCreateManyPublicEntityInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutPublicEntityInput = {
    update: XOR<UserUpdateWithoutPublicEntityInput, UserUncheckedUpdateWithoutPublicEntityInput>
    create: XOR<UserCreateWithoutPublicEntityInput, UserUncheckedCreateWithoutPublicEntityInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPublicEntityInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPublicEntityInput, UserUncheckedUpdateWithoutPublicEntityInput>
  }

  export type UserUpdateWithoutPublicEntityInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    supplier?: SupplierUpdateOneWithoutUserNestedInput
    citizen?: CitizenUpdateOneWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPublicEntityInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    supplier?: SupplierUncheckedUpdateOneWithoutUserNestedInput
    citizen?: CitizenUncheckedUpdateOneWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BiddingUpsertWithWhereUniqueWithoutPublicEntityInput = {
    where: BiddingWhereUniqueInput
    update: XOR<BiddingUpdateWithoutPublicEntityInput, BiddingUncheckedUpdateWithoutPublicEntityInput>
    create: XOR<BiddingCreateWithoutPublicEntityInput, BiddingUncheckedCreateWithoutPublicEntityInput>
  }

  export type BiddingUpdateWithWhereUniqueWithoutPublicEntityInput = {
    where: BiddingWhereUniqueInput
    data: XOR<BiddingUpdateWithoutPublicEntityInput, BiddingUncheckedUpdateWithoutPublicEntityInput>
  }

  export type BiddingUpdateManyWithWhereWithoutPublicEntityInput = {
    where: BiddingScalarWhereInput
    data: XOR<BiddingUpdateManyMutationInput, BiddingUncheckedUpdateManyWithoutPublicEntityInput>
  }

  export type BiddingScalarWhereInput = {
    AND?: BiddingScalarWhereInput | BiddingScalarWhereInput[]
    OR?: BiddingScalarWhereInput[]
    NOT?: BiddingScalarWhereInput | BiddingScalarWhereInput[]
    id?: StringFilter<"Bidding"> | string
    publicEntityId?: StringFilter<"Bidding"> | string
    title?: StringFilter<"Bidding"> | string
    description?: StringFilter<"Bidding"> | string
    biddingNumber?: StringFilter<"Bidding"> | string
    type?: EnumBiddingTypeFilter<"Bidding"> | $Enums.BiddingType
    status?: EnumBiddingStatusFilter<"Bidding"> | $Enums.BiddingStatus
    estimatedValue?: DecimalFilter<"Bidding"> | Decimal | DecimalJsLike | number | string
    openingDate?: DateTimeFilter<"Bidding"> | Date | string
    closingDate?: DateTimeFilter<"Bidding"> | Date | string
    deliveryLocation?: StringFilter<"Bidding"> | string
    deliveryDeadline?: DateTimeFilter<"Bidding"> | Date | string
    requirements?: StringFilter<"Bidding"> | string
    evaluationCriteria?: StringFilter<"Bidding"> | string
    isPublic?: BoolFilter<"Bidding"> | boolean
    publishedAt?: DateTimeNullableFilter<"Bidding"> | Date | string | null
    createdAt?: DateTimeFilter<"Bidding"> | Date | string
    updatedAt?: DateTimeFilter<"Bidding"> | Date | string
  }

  export type ContractUpsertWithWhereUniqueWithoutPublicEntityInput = {
    where: ContractWhereUniqueInput
    update: XOR<ContractUpdateWithoutPublicEntityInput, ContractUncheckedUpdateWithoutPublicEntityInput>
    create: XOR<ContractCreateWithoutPublicEntityInput, ContractUncheckedCreateWithoutPublicEntityInput>
  }

  export type ContractUpdateWithWhereUniqueWithoutPublicEntityInput = {
    where: ContractWhereUniqueInput
    data: XOR<ContractUpdateWithoutPublicEntityInput, ContractUncheckedUpdateWithoutPublicEntityInput>
  }

  export type ContractUpdateManyWithWhereWithoutPublicEntityInput = {
    where: ContractScalarWhereInput
    data: XOR<ContractUpdateManyMutationInput, ContractUncheckedUpdateManyWithoutPublicEntityInput>
  }

  export type DocumentUpsertWithWhereUniqueWithoutPublicEntityInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutPublicEntityInput, DocumentUncheckedUpdateWithoutPublicEntityInput>
    create: XOR<DocumentCreateWithoutPublicEntityInput, DocumentUncheckedCreateWithoutPublicEntityInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutPublicEntityInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutPublicEntityInput, DocumentUncheckedUpdateWithoutPublicEntityInput>
  }

  export type DocumentUpdateManyWithWhereWithoutPublicEntityInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutPublicEntityInput>
  }

  export type UserCreateWithoutCitizenInput = {
    id?: string
    email: string
    password: string
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    firstName: string
    lastName: string
    phone?: string | null
    avatar?: string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    supplier?: SupplierCreateNestedOneWithoutUserInput
    publicEntity?: PublicEntityCreateNestedOneWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCitizenInput = {
    id?: string
    email: string
    password: string
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    firstName: string
    lastName: string
    phone?: string | null
    avatar?: string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    supplier?: SupplierUncheckedCreateNestedOneWithoutUserInput
    publicEntity?: PublicEntityUncheckedCreateNestedOneWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCitizenInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCitizenInput, UserUncheckedCreateWithoutCitizenInput>
  }

  export type UserUpsertWithoutCitizenInput = {
    update: XOR<UserUpdateWithoutCitizenInput, UserUncheckedUpdateWithoutCitizenInput>
    create: XOR<UserCreateWithoutCitizenInput, UserUncheckedCreateWithoutCitizenInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCitizenInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCitizenInput, UserUncheckedUpdateWithoutCitizenInput>
  }

  export type UserUpdateWithoutCitizenInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    supplier?: SupplierUpdateOneWithoutUserNestedInput
    publicEntity?: PublicEntityUpdateOneWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCitizenInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    supplier?: SupplierUncheckedUpdateOneWithoutUserNestedInput
    publicEntity?: PublicEntityUncheckedUpdateOneWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CategoryCreateWithoutChildrenInput = {
    id?: string
    name: string
    description?: string | null
    code: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: CategoryCreateNestedOneWithoutChildrenInput
    biddings?: BiddingCategoryCreateNestedManyWithoutCategoryInput
    suppliers?: SupplierCategoryCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutChildrenInput = {
    id?: string
    name: string
    description?: string | null
    code: string
    parentId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    biddings?: BiddingCategoryUncheckedCreateNestedManyWithoutCategoryInput
    suppliers?: SupplierCategoryUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutChildrenInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutChildrenInput, CategoryUncheckedCreateWithoutChildrenInput>
  }

  export type CategoryCreateWithoutParentInput = {
    id?: string
    name: string
    description?: string | null
    code: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: CategoryCreateNestedManyWithoutParentInput
    biddings?: BiddingCategoryCreateNestedManyWithoutCategoryInput
    suppliers?: SupplierCategoryCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutParentInput = {
    id?: string
    name: string
    description?: string | null
    code: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: CategoryUncheckedCreateNestedManyWithoutParentInput
    biddings?: BiddingCategoryUncheckedCreateNestedManyWithoutCategoryInput
    suppliers?: SupplierCategoryUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutParentInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput>
  }

  export type CategoryCreateManyParentInputEnvelope = {
    data: CategoryCreateManyParentInput | CategoryCreateManyParentInput[]
    skipDuplicates?: boolean
  }

  export type BiddingCategoryCreateWithoutCategoryInput = {
    id?: string
    createdAt?: Date | string
    bidding: BiddingCreateNestedOneWithoutCategoriesInput
  }

  export type BiddingCategoryUncheckedCreateWithoutCategoryInput = {
    id?: string
    biddingId: string
    createdAt?: Date | string
  }

  export type BiddingCategoryCreateOrConnectWithoutCategoryInput = {
    where: BiddingCategoryWhereUniqueInput
    create: XOR<BiddingCategoryCreateWithoutCategoryInput, BiddingCategoryUncheckedCreateWithoutCategoryInput>
  }

  export type BiddingCategoryCreateManyCategoryInputEnvelope = {
    data: BiddingCategoryCreateManyCategoryInput | BiddingCategoryCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type SupplierCategoryCreateWithoutCategoryInput = {
    id?: string
    createdAt?: Date | string
    supplier: SupplierCreateNestedOneWithoutCategoriesInput
  }

  export type SupplierCategoryUncheckedCreateWithoutCategoryInput = {
    id?: string
    supplierId: string
    createdAt?: Date | string
  }

  export type SupplierCategoryCreateOrConnectWithoutCategoryInput = {
    where: SupplierCategoryWhereUniqueInput
    create: XOR<SupplierCategoryCreateWithoutCategoryInput, SupplierCategoryUncheckedCreateWithoutCategoryInput>
  }

  export type SupplierCategoryCreateManyCategoryInputEnvelope = {
    data: SupplierCategoryCreateManyCategoryInput | SupplierCategoryCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type CategoryUpsertWithoutChildrenInput = {
    update: XOR<CategoryUpdateWithoutChildrenInput, CategoryUncheckedUpdateWithoutChildrenInput>
    create: XOR<CategoryCreateWithoutChildrenInput, CategoryUncheckedCreateWithoutChildrenInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutChildrenInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutChildrenInput, CategoryUncheckedUpdateWithoutChildrenInput>
  }

  export type CategoryUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: CategoryUpdateOneWithoutChildrenNestedInput
    biddings?: BiddingCategoryUpdateManyWithoutCategoryNestedInput
    suppliers?: SupplierCategoryUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    biddings?: BiddingCategoryUncheckedUpdateManyWithoutCategoryNestedInput
    suppliers?: SupplierCategoryUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUpsertWithWhereUniqueWithoutParentInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutParentInput, CategoryUncheckedUpdateWithoutParentInput>
    create: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutParentInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutParentInput, CategoryUncheckedUpdateWithoutParentInput>
  }

  export type CategoryUpdateManyWithWhereWithoutParentInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutParentInput>
  }

  export type CategoryScalarWhereInput = {
    AND?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    OR?: CategoryScalarWhereInput[]
    NOT?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    id?: StringFilter<"Category"> | string
    name?: StringFilter<"Category"> | string
    description?: StringNullableFilter<"Category"> | string | null
    code?: StringFilter<"Category"> | string
    parentId?: StringNullableFilter<"Category"> | string | null
    isActive?: BoolFilter<"Category"> | boolean
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
  }

  export type BiddingCategoryUpsertWithWhereUniqueWithoutCategoryInput = {
    where: BiddingCategoryWhereUniqueInput
    update: XOR<BiddingCategoryUpdateWithoutCategoryInput, BiddingCategoryUncheckedUpdateWithoutCategoryInput>
    create: XOR<BiddingCategoryCreateWithoutCategoryInput, BiddingCategoryUncheckedCreateWithoutCategoryInput>
  }

  export type BiddingCategoryUpdateWithWhereUniqueWithoutCategoryInput = {
    where: BiddingCategoryWhereUniqueInput
    data: XOR<BiddingCategoryUpdateWithoutCategoryInput, BiddingCategoryUncheckedUpdateWithoutCategoryInput>
  }

  export type BiddingCategoryUpdateManyWithWhereWithoutCategoryInput = {
    where: BiddingCategoryScalarWhereInput
    data: XOR<BiddingCategoryUpdateManyMutationInput, BiddingCategoryUncheckedUpdateManyWithoutCategoryInput>
  }

  export type BiddingCategoryScalarWhereInput = {
    AND?: BiddingCategoryScalarWhereInput | BiddingCategoryScalarWhereInput[]
    OR?: BiddingCategoryScalarWhereInput[]
    NOT?: BiddingCategoryScalarWhereInput | BiddingCategoryScalarWhereInput[]
    id?: StringFilter<"BiddingCategory"> | string
    biddingId?: StringFilter<"BiddingCategory"> | string
    categoryId?: StringFilter<"BiddingCategory"> | string
    createdAt?: DateTimeFilter<"BiddingCategory"> | Date | string
  }

  export type SupplierCategoryUpsertWithWhereUniqueWithoutCategoryInput = {
    where: SupplierCategoryWhereUniqueInput
    update: XOR<SupplierCategoryUpdateWithoutCategoryInput, SupplierCategoryUncheckedUpdateWithoutCategoryInput>
    create: XOR<SupplierCategoryCreateWithoutCategoryInput, SupplierCategoryUncheckedCreateWithoutCategoryInput>
  }

  export type SupplierCategoryUpdateWithWhereUniqueWithoutCategoryInput = {
    where: SupplierCategoryWhereUniqueInput
    data: XOR<SupplierCategoryUpdateWithoutCategoryInput, SupplierCategoryUncheckedUpdateWithoutCategoryInput>
  }

  export type SupplierCategoryUpdateManyWithWhereWithoutCategoryInput = {
    where: SupplierCategoryScalarWhereInput
    data: XOR<SupplierCategoryUpdateManyMutationInput, SupplierCategoryUncheckedUpdateManyWithoutCategoryInput>
  }

  export type PublicEntityCreateWithoutBiddingsInput = {
    id?: string
    name: string
    cnpj: string
    entityType: string
    address: string
    city: string
    state: string
    zipCode: string
    phone: string
    website?: string | null
    isActive?: boolean
    verifiedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPublicEntityInput
    contracts?: ContractCreateNestedManyWithoutPublicEntityInput
    documents?: DocumentCreateNestedManyWithoutPublicEntityInput
  }

  export type PublicEntityUncheckedCreateWithoutBiddingsInput = {
    id?: string
    userId: string
    name: string
    cnpj: string
    entityType: string
    address: string
    city: string
    state: string
    zipCode: string
    phone: string
    website?: string | null
    isActive?: boolean
    verifiedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: ContractUncheckedCreateNestedManyWithoutPublicEntityInput
    documents?: DocumentUncheckedCreateNestedManyWithoutPublicEntityInput
  }

  export type PublicEntityCreateOrConnectWithoutBiddingsInput = {
    where: PublicEntityWhereUniqueInput
    create: XOR<PublicEntityCreateWithoutBiddingsInput, PublicEntityUncheckedCreateWithoutBiddingsInput>
  }

  export type ProposalCreateWithoutBiddingInput = {
    id?: string
    totalValue: Decimal | DecimalJsLike | number | string
    description: string
    status?: $Enums.ProposalStatus
    submittedAt?: Date | string | null
    validUntil: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    supplier: SupplierCreateNestedOneWithoutProposalsInput
    items?: ProposalItemCreateNestedManyWithoutProposalInput
    documents?: DocumentCreateNestedManyWithoutProposalInput
    contract?: ContractCreateNestedOneWithoutProposalInput
  }

  export type ProposalUncheckedCreateWithoutBiddingInput = {
    id?: string
    supplierId: string
    totalValue: Decimal | DecimalJsLike | number | string
    description: string
    status?: $Enums.ProposalStatus
    submittedAt?: Date | string | null
    validUntil: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ProposalItemUncheckedCreateNestedManyWithoutProposalInput
    documents?: DocumentUncheckedCreateNestedManyWithoutProposalInput
    contract?: ContractUncheckedCreateNestedOneWithoutProposalInput
  }

  export type ProposalCreateOrConnectWithoutBiddingInput = {
    where: ProposalWhereUniqueInput
    create: XOR<ProposalCreateWithoutBiddingInput, ProposalUncheckedCreateWithoutBiddingInput>
  }

  export type ProposalCreateManyBiddingInputEnvelope = {
    data: ProposalCreateManyBiddingInput | ProposalCreateManyBiddingInput[]
    skipDuplicates?: boolean
  }

  export type DocumentCreateWithoutBiddingInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    size: number
    path: string
    type: $Enums.DocumentType
    description?: string | null
    isPublic?: boolean
    uploadedBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    proposal?: ProposalCreateNestedOneWithoutDocumentsInput
    contract?: ContractCreateNestedOneWithoutDocumentsInput
    supplier?: SupplierCreateNestedOneWithoutDocumentsInput
    publicEntity?: PublicEntityCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateWithoutBiddingInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    size: number
    path: string
    type: $Enums.DocumentType
    description?: string | null
    isPublic?: boolean
    uploadedBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    proposalId?: string | null
    contractId?: string | null
    supplierId?: string | null
    publicEntityId?: string | null
  }

  export type DocumentCreateOrConnectWithoutBiddingInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutBiddingInput, DocumentUncheckedCreateWithoutBiddingInput>
  }

  export type DocumentCreateManyBiddingInputEnvelope = {
    data: DocumentCreateManyBiddingInput | DocumentCreateManyBiddingInput[]
    skipDuplicates?: boolean
  }

  export type BiddingCategoryCreateWithoutBiddingInput = {
    id?: string
    createdAt?: Date | string
    category: CategoryCreateNestedOneWithoutBiddingsInput
  }

  export type BiddingCategoryUncheckedCreateWithoutBiddingInput = {
    id?: string
    categoryId: string
    createdAt?: Date | string
  }

  export type BiddingCategoryCreateOrConnectWithoutBiddingInput = {
    where: BiddingCategoryWhereUniqueInput
    create: XOR<BiddingCategoryCreateWithoutBiddingInput, BiddingCategoryUncheckedCreateWithoutBiddingInput>
  }

  export type BiddingCategoryCreateManyBiddingInputEnvelope = {
    data: BiddingCategoryCreateManyBiddingInput | BiddingCategoryCreateManyBiddingInput[]
    skipDuplicates?: boolean
  }

  export type ContractCreateWithoutBiddingInput = {
    id?: string
    contractNumber: string
    title: string
    description: string
    totalValue: Decimal | DecimalJsLike | number | string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.ContractStatus
    signedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    proposal: ProposalCreateNestedOneWithoutContractInput
    publicEntity: PublicEntityCreateNestedOneWithoutContractsInput
    supplier: SupplierCreateNestedOneWithoutContractsInput
    documents?: DocumentCreateNestedManyWithoutContractInput
  }

  export type ContractUncheckedCreateWithoutBiddingInput = {
    id?: string
    proposalId: string
    publicEntityId: string
    supplierId: string
    contractNumber: string
    title: string
    description: string
    totalValue: Decimal | DecimalJsLike | number | string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.ContractStatus
    signedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: DocumentUncheckedCreateNestedManyWithoutContractInput
  }

  export type ContractCreateOrConnectWithoutBiddingInput = {
    where: ContractWhereUniqueInput
    create: XOR<ContractCreateWithoutBiddingInput, ContractUncheckedCreateWithoutBiddingInput>
  }

  export type PublicEntityUpsertWithoutBiddingsInput = {
    update: XOR<PublicEntityUpdateWithoutBiddingsInput, PublicEntityUncheckedUpdateWithoutBiddingsInput>
    create: XOR<PublicEntityCreateWithoutBiddingsInput, PublicEntityUncheckedCreateWithoutBiddingsInput>
    where?: PublicEntityWhereInput
  }

  export type PublicEntityUpdateToOneWithWhereWithoutBiddingsInput = {
    where?: PublicEntityWhereInput
    data: XOR<PublicEntityUpdateWithoutBiddingsInput, PublicEntityUncheckedUpdateWithoutBiddingsInput>
  }

  export type PublicEntityUpdateWithoutBiddingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPublicEntityNestedInput
    contracts?: ContractUpdateManyWithoutPublicEntityNestedInput
    documents?: DocumentUpdateManyWithoutPublicEntityNestedInput
  }

  export type PublicEntityUncheckedUpdateWithoutBiddingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: ContractUncheckedUpdateManyWithoutPublicEntityNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutPublicEntityNestedInput
  }

  export type ProposalUpsertWithWhereUniqueWithoutBiddingInput = {
    where: ProposalWhereUniqueInput
    update: XOR<ProposalUpdateWithoutBiddingInput, ProposalUncheckedUpdateWithoutBiddingInput>
    create: XOR<ProposalCreateWithoutBiddingInput, ProposalUncheckedCreateWithoutBiddingInput>
  }

  export type ProposalUpdateWithWhereUniqueWithoutBiddingInput = {
    where: ProposalWhereUniqueInput
    data: XOR<ProposalUpdateWithoutBiddingInput, ProposalUncheckedUpdateWithoutBiddingInput>
  }

  export type ProposalUpdateManyWithWhereWithoutBiddingInput = {
    where: ProposalScalarWhereInput
    data: XOR<ProposalUpdateManyMutationInput, ProposalUncheckedUpdateManyWithoutBiddingInput>
  }

  export type DocumentUpsertWithWhereUniqueWithoutBiddingInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutBiddingInput, DocumentUncheckedUpdateWithoutBiddingInput>
    create: XOR<DocumentCreateWithoutBiddingInput, DocumentUncheckedCreateWithoutBiddingInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutBiddingInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutBiddingInput, DocumentUncheckedUpdateWithoutBiddingInput>
  }

  export type DocumentUpdateManyWithWhereWithoutBiddingInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutBiddingInput>
  }

  export type BiddingCategoryUpsertWithWhereUniqueWithoutBiddingInput = {
    where: BiddingCategoryWhereUniqueInput
    update: XOR<BiddingCategoryUpdateWithoutBiddingInput, BiddingCategoryUncheckedUpdateWithoutBiddingInput>
    create: XOR<BiddingCategoryCreateWithoutBiddingInput, BiddingCategoryUncheckedCreateWithoutBiddingInput>
  }

  export type BiddingCategoryUpdateWithWhereUniqueWithoutBiddingInput = {
    where: BiddingCategoryWhereUniqueInput
    data: XOR<BiddingCategoryUpdateWithoutBiddingInput, BiddingCategoryUncheckedUpdateWithoutBiddingInput>
  }

  export type BiddingCategoryUpdateManyWithWhereWithoutBiddingInput = {
    where: BiddingCategoryScalarWhereInput
    data: XOR<BiddingCategoryUpdateManyMutationInput, BiddingCategoryUncheckedUpdateManyWithoutBiddingInput>
  }

  export type ContractUpsertWithoutBiddingInput = {
    update: XOR<ContractUpdateWithoutBiddingInput, ContractUncheckedUpdateWithoutBiddingInput>
    create: XOR<ContractCreateWithoutBiddingInput, ContractUncheckedCreateWithoutBiddingInput>
    where?: ContractWhereInput
  }

  export type ContractUpdateToOneWithWhereWithoutBiddingInput = {
    where?: ContractWhereInput
    data: XOR<ContractUpdateWithoutBiddingInput, ContractUncheckedUpdateWithoutBiddingInput>
  }

  export type ContractUpdateWithoutBiddingInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    totalValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    signedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proposal?: ProposalUpdateOneRequiredWithoutContractNestedInput
    publicEntity?: PublicEntityUpdateOneRequiredWithoutContractsNestedInput
    supplier?: SupplierUpdateOneRequiredWithoutContractsNestedInput
    documents?: DocumentUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateWithoutBiddingInput = {
    id?: StringFieldUpdateOperationsInput | string
    proposalId?: StringFieldUpdateOperationsInput | string
    publicEntityId?: StringFieldUpdateOperationsInput | string
    supplierId?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    totalValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    signedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: DocumentUncheckedUpdateManyWithoutContractNestedInput
  }

  export type BiddingCreateWithoutProposalsInput = {
    id?: string
    title: string
    description: string
    biddingNumber: string
    type: $Enums.BiddingType
    status?: $Enums.BiddingStatus
    estimatedValue: Decimal | DecimalJsLike | number | string
    openingDate: Date | string
    closingDate: Date | string
    deliveryLocation: string
    deliveryDeadline: Date | string
    requirements: string
    evaluationCriteria: string
    isPublic?: boolean
    publishedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    publicEntity: PublicEntityCreateNestedOneWithoutBiddingsInput
    documents?: DocumentCreateNestedManyWithoutBiddingInput
    categories?: BiddingCategoryCreateNestedManyWithoutBiddingInput
    contract?: ContractCreateNestedOneWithoutBiddingInput
  }

  export type BiddingUncheckedCreateWithoutProposalsInput = {
    id?: string
    publicEntityId: string
    title: string
    description: string
    biddingNumber: string
    type: $Enums.BiddingType
    status?: $Enums.BiddingStatus
    estimatedValue: Decimal | DecimalJsLike | number | string
    openingDate: Date | string
    closingDate: Date | string
    deliveryLocation: string
    deliveryDeadline: Date | string
    requirements: string
    evaluationCriteria: string
    isPublic?: boolean
    publishedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: DocumentUncheckedCreateNestedManyWithoutBiddingInput
    categories?: BiddingCategoryUncheckedCreateNestedManyWithoutBiddingInput
    contract?: ContractUncheckedCreateNestedOneWithoutBiddingInput
  }

  export type BiddingCreateOrConnectWithoutProposalsInput = {
    where: BiddingWhereUniqueInput
    create: XOR<BiddingCreateWithoutProposalsInput, BiddingUncheckedCreateWithoutProposalsInput>
  }

  export type SupplierCreateWithoutProposalsInput = {
    id?: string
    companyName: string
    tradeName?: string | null
    cnpj: string
    stateRegistration?: string | null
    municipalRegistration?: string | null
    address: string
    city: string
    state: string
    zipCode: string
    website?: string | null
    description?: string | null
    isActive?: boolean
    verifiedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSupplierInput
    contracts?: ContractCreateNestedManyWithoutSupplierInput
    documents?: DocumentCreateNestedManyWithoutSupplierInput
    categories?: SupplierCategoryCreateNestedManyWithoutSupplierInput
  }

  export type SupplierUncheckedCreateWithoutProposalsInput = {
    id?: string
    userId: string
    companyName: string
    tradeName?: string | null
    cnpj: string
    stateRegistration?: string | null
    municipalRegistration?: string | null
    address: string
    city: string
    state: string
    zipCode: string
    website?: string | null
    description?: string | null
    isActive?: boolean
    verifiedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: ContractUncheckedCreateNestedManyWithoutSupplierInput
    documents?: DocumentUncheckedCreateNestedManyWithoutSupplierInput
    categories?: SupplierCategoryUncheckedCreateNestedManyWithoutSupplierInput
  }

  export type SupplierCreateOrConnectWithoutProposalsInput = {
    where: SupplierWhereUniqueInput
    create: XOR<SupplierCreateWithoutProposalsInput, SupplierUncheckedCreateWithoutProposalsInput>
  }

  export type ProposalItemCreateWithoutProposalInput = {
    id?: string
    description: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    totalPrice: Decimal | DecimalJsLike | number | string
    brand?: string | null
    model?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProposalItemUncheckedCreateWithoutProposalInput = {
    id?: string
    description: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    totalPrice: Decimal | DecimalJsLike | number | string
    brand?: string | null
    model?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProposalItemCreateOrConnectWithoutProposalInput = {
    where: ProposalItemWhereUniqueInput
    create: XOR<ProposalItemCreateWithoutProposalInput, ProposalItemUncheckedCreateWithoutProposalInput>
  }

  export type ProposalItemCreateManyProposalInputEnvelope = {
    data: ProposalItemCreateManyProposalInput | ProposalItemCreateManyProposalInput[]
    skipDuplicates?: boolean
  }

  export type DocumentCreateWithoutProposalInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    size: number
    path: string
    type: $Enums.DocumentType
    description?: string | null
    isPublic?: boolean
    uploadedBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    bidding?: BiddingCreateNestedOneWithoutDocumentsInput
    contract?: ContractCreateNestedOneWithoutDocumentsInput
    supplier?: SupplierCreateNestedOneWithoutDocumentsInput
    publicEntity?: PublicEntityCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateWithoutProposalInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    size: number
    path: string
    type: $Enums.DocumentType
    description?: string | null
    isPublic?: boolean
    uploadedBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    biddingId?: string | null
    contractId?: string | null
    supplierId?: string | null
    publicEntityId?: string | null
  }

  export type DocumentCreateOrConnectWithoutProposalInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutProposalInput, DocumentUncheckedCreateWithoutProposalInput>
  }

  export type DocumentCreateManyProposalInputEnvelope = {
    data: DocumentCreateManyProposalInput | DocumentCreateManyProposalInput[]
    skipDuplicates?: boolean
  }

  export type ContractCreateWithoutProposalInput = {
    id?: string
    contractNumber: string
    title: string
    description: string
    totalValue: Decimal | DecimalJsLike | number | string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.ContractStatus
    signedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bidding: BiddingCreateNestedOneWithoutContractInput
    publicEntity: PublicEntityCreateNestedOneWithoutContractsInput
    supplier: SupplierCreateNestedOneWithoutContractsInput
    documents?: DocumentCreateNestedManyWithoutContractInput
  }

  export type ContractUncheckedCreateWithoutProposalInput = {
    id?: string
    biddingId: string
    publicEntityId: string
    supplierId: string
    contractNumber: string
    title: string
    description: string
    totalValue: Decimal | DecimalJsLike | number | string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.ContractStatus
    signedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: DocumentUncheckedCreateNestedManyWithoutContractInput
  }

  export type ContractCreateOrConnectWithoutProposalInput = {
    where: ContractWhereUniqueInput
    create: XOR<ContractCreateWithoutProposalInput, ContractUncheckedCreateWithoutProposalInput>
  }

  export type BiddingUpsertWithoutProposalsInput = {
    update: XOR<BiddingUpdateWithoutProposalsInput, BiddingUncheckedUpdateWithoutProposalsInput>
    create: XOR<BiddingCreateWithoutProposalsInput, BiddingUncheckedCreateWithoutProposalsInput>
    where?: BiddingWhereInput
  }

  export type BiddingUpdateToOneWithWhereWithoutProposalsInput = {
    where?: BiddingWhereInput
    data: XOR<BiddingUpdateWithoutProposalsInput, BiddingUncheckedUpdateWithoutProposalsInput>
  }

  export type BiddingUpdateWithoutProposalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    biddingNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumBiddingTypeFieldUpdateOperationsInput | $Enums.BiddingType
    status?: EnumBiddingStatusFieldUpdateOperationsInput | $Enums.BiddingStatus
    estimatedValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    openingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    closingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryLocation?: StringFieldUpdateOperationsInput | string
    deliveryDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    requirements?: StringFieldUpdateOperationsInput | string
    evaluationCriteria?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publicEntity?: PublicEntityUpdateOneRequiredWithoutBiddingsNestedInput
    documents?: DocumentUpdateManyWithoutBiddingNestedInput
    categories?: BiddingCategoryUpdateManyWithoutBiddingNestedInput
    contract?: ContractUpdateOneWithoutBiddingNestedInput
  }

  export type BiddingUncheckedUpdateWithoutProposalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    publicEntityId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    biddingNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumBiddingTypeFieldUpdateOperationsInput | $Enums.BiddingType
    status?: EnumBiddingStatusFieldUpdateOperationsInput | $Enums.BiddingStatus
    estimatedValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    openingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    closingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryLocation?: StringFieldUpdateOperationsInput | string
    deliveryDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    requirements?: StringFieldUpdateOperationsInput | string
    evaluationCriteria?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: DocumentUncheckedUpdateManyWithoutBiddingNestedInput
    categories?: BiddingCategoryUncheckedUpdateManyWithoutBiddingNestedInput
    contract?: ContractUncheckedUpdateOneWithoutBiddingNestedInput
  }

  export type SupplierUpsertWithoutProposalsInput = {
    update: XOR<SupplierUpdateWithoutProposalsInput, SupplierUncheckedUpdateWithoutProposalsInput>
    create: XOR<SupplierCreateWithoutProposalsInput, SupplierUncheckedCreateWithoutProposalsInput>
    where?: SupplierWhereInput
  }

  export type SupplierUpdateToOneWithWhereWithoutProposalsInput = {
    where?: SupplierWhereInput
    data: XOR<SupplierUpdateWithoutProposalsInput, SupplierUncheckedUpdateWithoutProposalsInput>
  }

  export type SupplierUpdateWithoutProposalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    tradeName?: NullableStringFieldUpdateOperationsInput | string | null
    cnpj?: StringFieldUpdateOperationsInput | string
    stateRegistration?: NullableStringFieldUpdateOperationsInput | string | null
    municipalRegistration?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSupplierNestedInput
    contracts?: ContractUpdateManyWithoutSupplierNestedInput
    documents?: DocumentUpdateManyWithoutSupplierNestedInput
    categories?: SupplierCategoryUpdateManyWithoutSupplierNestedInput
  }

  export type SupplierUncheckedUpdateWithoutProposalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    tradeName?: NullableStringFieldUpdateOperationsInput | string | null
    cnpj?: StringFieldUpdateOperationsInput | string
    stateRegistration?: NullableStringFieldUpdateOperationsInput | string | null
    municipalRegistration?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: ContractUncheckedUpdateManyWithoutSupplierNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutSupplierNestedInput
    categories?: SupplierCategoryUncheckedUpdateManyWithoutSupplierNestedInput
  }

  export type ProposalItemUpsertWithWhereUniqueWithoutProposalInput = {
    where: ProposalItemWhereUniqueInput
    update: XOR<ProposalItemUpdateWithoutProposalInput, ProposalItemUncheckedUpdateWithoutProposalInput>
    create: XOR<ProposalItemCreateWithoutProposalInput, ProposalItemUncheckedCreateWithoutProposalInput>
  }

  export type ProposalItemUpdateWithWhereUniqueWithoutProposalInput = {
    where: ProposalItemWhereUniqueInput
    data: XOR<ProposalItemUpdateWithoutProposalInput, ProposalItemUncheckedUpdateWithoutProposalInput>
  }

  export type ProposalItemUpdateManyWithWhereWithoutProposalInput = {
    where: ProposalItemScalarWhereInput
    data: XOR<ProposalItemUpdateManyMutationInput, ProposalItemUncheckedUpdateManyWithoutProposalInput>
  }

  export type ProposalItemScalarWhereInput = {
    AND?: ProposalItemScalarWhereInput | ProposalItemScalarWhereInput[]
    OR?: ProposalItemScalarWhereInput[]
    NOT?: ProposalItemScalarWhereInput | ProposalItemScalarWhereInput[]
    id?: StringFilter<"ProposalItem"> | string
    proposalId?: StringFilter<"ProposalItem"> | string
    description?: StringFilter<"ProposalItem"> | string
    quantity?: IntFilter<"ProposalItem"> | number
    unitPrice?: DecimalFilter<"ProposalItem"> | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFilter<"ProposalItem"> | Decimal | DecimalJsLike | number | string
    brand?: StringNullableFilter<"ProposalItem"> | string | null
    model?: StringNullableFilter<"ProposalItem"> | string | null
    createdAt?: DateTimeFilter<"ProposalItem"> | Date | string
    updatedAt?: DateTimeFilter<"ProposalItem"> | Date | string
  }

  export type DocumentUpsertWithWhereUniqueWithoutProposalInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutProposalInput, DocumentUncheckedUpdateWithoutProposalInput>
    create: XOR<DocumentCreateWithoutProposalInput, DocumentUncheckedCreateWithoutProposalInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutProposalInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutProposalInput, DocumentUncheckedUpdateWithoutProposalInput>
  }

  export type DocumentUpdateManyWithWhereWithoutProposalInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutProposalInput>
  }

  export type ContractUpsertWithoutProposalInput = {
    update: XOR<ContractUpdateWithoutProposalInput, ContractUncheckedUpdateWithoutProposalInput>
    create: XOR<ContractCreateWithoutProposalInput, ContractUncheckedCreateWithoutProposalInput>
    where?: ContractWhereInput
  }

  export type ContractUpdateToOneWithWhereWithoutProposalInput = {
    where?: ContractWhereInput
    data: XOR<ContractUpdateWithoutProposalInput, ContractUncheckedUpdateWithoutProposalInput>
  }

  export type ContractUpdateWithoutProposalInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    totalValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    signedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bidding?: BiddingUpdateOneRequiredWithoutContractNestedInput
    publicEntity?: PublicEntityUpdateOneRequiredWithoutContractsNestedInput
    supplier?: SupplierUpdateOneRequiredWithoutContractsNestedInput
    documents?: DocumentUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateWithoutProposalInput = {
    id?: StringFieldUpdateOperationsInput | string
    biddingId?: StringFieldUpdateOperationsInput | string
    publicEntityId?: StringFieldUpdateOperationsInput | string
    supplierId?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    totalValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    signedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: DocumentUncheckedUpdateManyWithoutContractNestedInput
  }

  export type ProposalCreateWithoutItemsInput = {
    id?: string
    totalValue: Decimal | DecimalJsLike | number | string
    description: string
    status?: $Enums.ProposalStatus
    submittedAt?: Date | string | null
    validUntil: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bidding: BiddingCreateNestedOneWithoutProposalsInput
    supplier: SupplierCreateNestedOneWithoutProposalsInput
    documents?: DocumentCreateNestedManyWithoutProposalInput
    contract?: ContractCreateNestedOneWithoutProposalInput
  }

  export type ProposalUncheckedCreateWithoutItemsInput = {
    id?: string
    biddingId: string
    supplierId: string
    totalValue: Decimal | DecimalJsLike | number | string
    description: string
    status?: $Enums.ProposalStatus
    submittedAt?: Date | string | null
    validUntil: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: DocumentUncheckedCreateNestedManyWithoutProposalInput
    contract?: ContractUncheckedCreateNestedOneWithoutProposalInput
  }

  export type ProposalCreateOrConnectWithoutItemsInput = {
    where: ProposalWhereUniqueInput
    create: XOR<ProposalCreateWithoutItemsInput, ProposalUncheckedCreateWithoutItemsInput>
  }

  export type ProposalUpsertWithoutItemsInput = {
    update: XOR<ProposalUpdateWithoutItemsInput, ProposalUncheckedUpdateWithoutItemsInput>
    create: XOR<ProposalCreateWithoutItemsInput, ProposalUncheckedCreateWithoutItemsInput>
    where?: ProposalWhereInput
  }

  export type ProposalUpdateToOneWithWhereWithoutItemsInput = {
    where?: ProposalWhereInput
    data: XOR<ProposalUpdateWithoutItemsInput, ProposalUncheckedUpdateWithoutItemsInput>
  }

  export type ProposalUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumProposalStatusFieldUpdateOperationsInput | $Enums.ProposalStatus
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bidding?: BiddingUpdateOneRequiredWithoutProposalsNestedInput
    supplier?: SupplierUpdateOneRequiredWithoutProposalsNestedInput
    documents?: DocumentUpdateManyWithoutProposalNestedInput
    contract?: ContractUpdateOneWithoutProposalNestedInput
  }

  export type ProposalUncheckedUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    biddingId?: StringFieldUpdateOperationsInput | string
    supplierId?: StringFieldUpdateOperationsInput | string
    totalValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumProposalStatusFieldUpdateOperationsInput | $Enums.ProposalStatus
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: DocumentUncheckedUpdateManyWithoutProposalNestedInput
    contract?: ContractUncheckedUpdateOneWithoutProposalNestedInput
  }

  export type BiddingCreateWithoutContractInput = {
    id?: string
    title: string
    description: string
    biddingNumber: string
    type: $Enums.BiddingType
    status?: $Enums.BiddingStatus
    estimatedValue: Decimal | DecimalJsLike | number | string
    openingDate: Date | string
    closingDate: Date | string
    deliveryLocation: string
    deliveryDeadline: Date | string
    requirements: string
    evaluationCriteria: string
    isPublic?: boolean
    publishedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    publicEntity: PublicEntityCreateNestedOneWithoutBiddingsInput
    proposals?: ProposalCreateNestedManyWithoutBiddingInput
    documents?: DocumentCreateNestedManyWithoutBiddingInput
    categories?: BiddingCategoryCreateNestedManyWithoutBiddingInput
  }

  export type BiddingUncheckedCreateWithoutContractInput = {
    id?: string
    publicEntityId: string
    title: string
    description: string
    biddingNumber: string
    type: $Enums.BiddingType
    status?: $Enums.BiddingStatus
    estimatedValue: Decimal | DecimalJsLike | number | string
    openingDate: Date | string
    closingDate: Date | string
    deliveryLocation: string
    deliveryDeadline: Date | string
    requirements: string
    evaluationCriteria: string
    isPublic?: boolean
    publishedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    proposals?: ProposalUncheckedCreateNestedManyWithoutBiddingInput
    documents?: DocumentUncheckedCreateNestedManyWithoutBiddingInput
    categories?: BiddingCategoryUncheckedCreateNestedManyWithoutBiddingInput
  }

  export type BiddingCreateOrConnectWithoutContractInput = {
    where: BiddingWhereUniqueInput
    create: XOR<BiddingCreateWithoutContractInput, BiddingUncheckedCreateWithoutContractInput>
  }

  export type ProposalCreateWithoutContractInput = {
    id?: string
    totalValue: Decimal | DecimalJsLike | number | string
    description: string
    status?: $Enums.ProposalStatus
    submittedAt?: Date | string | null
    validUntil: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bidding: BiddingCreateNestedOneWithoutProposalsInput
    supplier: SupplierCreateNestedOneWithoutProposalsInput
    items?: ProposalItemCreateNestedManyWithoutProposalInput
    documents?: DocumentCreateNestedManyWithoutProposalInput
  }

  export type ProposalUncheckedCreateWithoutContractInput = {
    id?: string
    biddingId: string
    supplierId: string
    totalValue: Decimal | DecimalJsLike | number | string
    description: string
    status?: $Enums.ProposalStatus
    submittedAt?: Date | string | null
    validUntil: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ProposalItemUncheckedCreateNestedManyWithoutProposalInput
    documents?: DocumentUncheckedCreateNestedManyWithoutProposalInput
  }

  export type ProposalCreateOrConnectWithoutContractInput = {
    where: ProposalWhereUniqueInput
    create: XOR<ProposalCreateWithoutContractInput, ProposalUncheckedCreateWithoutContractInput>
  }

  export type PublicEntityCreateWithoutContractsInput = {
    id?: string
    name: string
    cnpj: string
    entityType: string
    address: string
    city: string
    state: string
    zipCode: string
    phone: string
    website?: string | null
    isActive?: boolean
    verifiedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPublicEntityInput
    biddings?: BiddingCreateNestedManyWithoutPublicEntityInput
    documents?: DocumentCreateNestedManyWithoutPublicEntityInput
  }

  export type PublicEntityUncheckedCreateWithoutContractsInput = {
    id?: string
    userId: string
    name: string
    cnpj: string
    entityType: string
    address: string
    city: string
    state: string
    zipCode: string
    phone: string
    website?: string | null
    isActive?: boolean
    verifiedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    biddings?: BiddingUncheckedCreateNestedManyWithoutPublicEntityInput
    documents?: DocumentUncheckedCreateNestedManyWithoutPublicEntityInput
  }

  export type PublicEntityCreateOrConnectWithoutContractsInput = {
    where: PublicEntityWhereUniqueInput
    create: XOR<PublicEntityCreateWithoutContractsInput, PublicEntityUncheckedCreateWithoutContractsInput>
  }

  export type SupplierCreateWithoutContractsInput = {
    id?: string
    companyName: string
    tradeName?: string | null
    cnpj: string
    stateRegistration?: string | null
    municipalRegistration?: string | null
    address: string
    city: string
    state: string
    zipCode: string
    website?: string | null
    description?: string | null
    isActive?: boolean
    verifiedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSupplierInput
    proposals?: ProposalCreateNestedManyWithoutSupplierInput
    documents?: DocumentCreateNestedManyWithoutSupplierInput
    categories?: SupplierCategoryCreateNestedManyWithoutSupplierInput
  }

  export type SupplierUncheckedCreateWithoutContractsInput = {
    id?: string
    userId: string
    companyName: string
    tradeName?: string | null
    cnpj: string
    stateRegistration?: string | null
    municipalRegistration?: string | null
    address: string
    city: string
    state: string
    zipCode: string
    website?: string | null
    description?: string | null
    isActive?: boolean
    verifiedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    proposals?: ProposalUncheckedCreateNestedManyWithoutSupplierInput
    documents?: DocumentUncheckedCreateNestedManyWithoutSupplierInput
    categories?: SupplierCategoryUncheckedCreateNestedManyWithoutSupplierInput
  }

  export type SupplierCreateOrConnectWithoutContractsInput = {
    where: SupplierWhereUniqueInput
    create: XOR<SupplierCreateWithoutContractsInput, SupplierUncheckedCreateWithoutContractsInput>
  }

  export type DocumentCreateWithoutContractInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    size: number
    path: string
    type: $Enums.DocumentType
    description?: string | null
    isPublic?: boolean
    uploadedBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    bidding?: BiddingCreateNestedOneWithoutDocumentsInput
    proposal?: ProposalCreateNestedOneWithoutDocumentsInput
    supplier?: SupplierCreateNestedOneWithoutDocumentsInput
    publicEntity?: PublicEntityCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateWithoutContractInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    size: number
    path: string
    type: $Enums.DocumentType
    description?: string | null
    isPublic?: boolean
    uploadedBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    biddingId?: string | null
    proposalId?: string | null
    supplierId?: string | null
    publicEntityId?: string | null
  }

  export type DocumentCreateOrConnectWithoutContractInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutContractInput, DocumentUncheckedCreateWithoutContractInput>
  }

  export type DocumentCreateManyContractInputEnvelope = {
    data: DocumentCreateManyContractInput | DocumentCreateManyContractInput[]
    skipDuplicates?: boolean
  }

  export type BiddingUpsertWithoutContractInput = {
    update: XOR<BiddingUpdateWithoutContractInput, BiddingUncheckedUpdateWithoutContractInput>
    create: XOR<BiddingCreateWithoutContractInput, BiddingUncheckedCreateWithoutContractInput>
    where?: BiddingWhereInput
  }

  export type BiddingUpdateToOneWithWhereWithoutContractInput = {
    where?: BiddingWhereInput
    data: XOR<BiddingUpdateWithoutContractInput, BiddingUncheckedUpdateWithoutContractInput>
  }

  export type BiddingUpdateWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    biddingNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumBiddingTypeFieldUpdateOperationsInput | $Enums.BiddingType
    status?: EnumBiddingStatusFieldUpdateOperationsInput | $Enums.BiddingStatus
    estimatedValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    openingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    closingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryLocation?: StringFieldUpdateOperationsInput | string
    deliveryDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    requirements?: StringFieldUpdateOperationsInput | string
    evaluationCriteria?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publicEntity?: PublicEntityUpdateOneRequiredWithoutBiddingsNestedInput
    proposals?: ProposalUpdateManyWithoutBiddingNestedInput
    documents?: DocumentUpdateManyWithoutBiddingNestedInput
    categories?: BiddingCategoryUpdateManyWithoutBiddingNestedInput
  }

  export type BiddingUncheckedUpdateWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    publicEntityId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    biddingNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumBiddingTypeFieldUpdateOperationsInput | $Enums.BiddingType
    status?: EnumBiddingStatusFieldUpdateOperationsInput | $Enums.BiddingStatus
    estimatedValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    openingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    closingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryLocation?: StringFieldUpdateOperationsInput | string
    deliveryDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    requirements?: StringFieldUpdateOperationsInput | string
    evaluationCriteria?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proposals?: ProposalUncheckedUpdateManyWithoutBiddingNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutBiddingNestedInput
    categories?: BiddingCategoryUncheckedUpdateManyWithoutBiddingNestedInput
  }

  export type ProposalUpsertWithoutContractInput = {
    update: XOR<ProposalUpdateWithoutContractInput, ProposalUncheckedUpdateWithoutContractInput>
    create: XOR<ProposalCreateWithoutContractInput, ProposalUncheckedCreateWithoutContractInput>
    where?: ProposalWhereInput
  }

  export type ProposalUpdateToOneWithWhereWithoutContractInput = {
    where?: ProposalWhereInput
    data: XOR<ProposalUpdateWithoutContractInput, ProposalUncheckedUpdateWithoutContractInput>
  }

  export type ProposalUpdateWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumProposalStatusFieldUpdateOperationsInput | $Enums.ProposalStatus
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bidding?: BiddingUpdateOneRequiredWithoutProposalsNestedInput
    supplier?: SupplierUpdateOneRequiredWithoutProposalsNestedInput
    items?: ProposalItemUpdateManyWithoutProposalNestedInput
    documents?: DocumentUpdateManyWithoutProposalNestedInput
  }

  export type ProposalUncheckedUpdateWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    biddingId?: StringFieldUpdateOperationsInput | string
    supplierId?: StringFieldUpdateOperationsInput | string
    totalValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumProposalStatusFieldUpdateOperationsInput | $Enums.ProposalStatus
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ProposalItemUncheckedUpdateManyWithoutProposalNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutProposalNestedInput
  }

  export type PublicEntityUpsertWithoutContractsInput = {
    update: XOR<PublicEntityUpdateWithoutContractsInput, PublicEntityUncheckedUpdateWithoutContractsInput>
    create: XOR<PublicEntityCreateWithoutContractsInput, PublicEntityUncheckedCreateWithoutContractsInput>
    where?: PublicEntityWhereInput
  }

  export type PublicEntityUpdateToOneWithWhereWithoutContractsInput = {
    where?: PublicEntityWhereInput
    data: XOR<PublicEntityUpdateWithoutContractsInput, PublicEntityUncheckedUpdateWithoutContractsInput>
  }

  export type PublicEntityUpdateWithoutContractsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPublicEntityNestedInput
    biddings?: BiddingUpdateManyWithoutPublicEntityNestedInput
    documents?: DocumentUpdateManyWithoutPublicEntityNestedInput
  }

  export type PublicEntityUncheckedUpdateWithoutContractsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    biddings?: BiddingUncheckedUpdateManyWithoutPublicEntityNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutPublicEntityNestedInput
  }

  export type SupplierUpsertWithoutContractsInput = {
    update: XOR<SupplierUpdateWithoutContractsInput, SupplierUncheckedUpdateWithoutContractsInput>
    create: XOR<SupplierCreateWithoutContractsInput, SupplierUncheckedCreateWithoutContractsInput>
    where?: SupplierWhereInput
  }

  export type SupplierUpdateToOneWithWhereWithoutContractsInput = {
    where?: SupplierWhereInput
    data: XOR<SupplierUpdateWithoutContractsInput, SupplierUncheckedUpdateWithoutContractsInput>
  }

  export type SupplierUpdateWithoutContractsInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    tradeName?: NullableStringFieldUpdateOperationsInput | string | null
    cnpj?: StringFieldUpdateOperationsInput | string
    stateRegistration?: NullableStringFieldUpdateOperationsInput | string | null
    municipalRegistration?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSupplierNestedInput
    proposals?: ProposalUpdateManyWithoutSupplierNestedInput
    documents?: DocumentUpdateManyWithoutSupplierNestedInput
    categories?: SupplierCategoryUpdateManyWithoutSupplierNestedInput
  }

  export type SupplierUncheckedUpdateWithoutContractsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    tradeName?: NullableStringFieldUpdateOperationsInput | string | null
    cnpj?: StringFieldUpdateOperationsInput | string
    stateRegistration?: NullableStringFieldUpdateOperationsInput | string | null
    municipalRegistration?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proposals?: ProposalUncheckedUpdateManyWithoutSupplierNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutSupplierNestedInput
    categories?: SupplierCategoryUncheckedUpdateManyWithoutSupplierNestedInput
  }

  export type DocumentUpsertWithWhereUniqueWithoutContractInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutContractInput, DocumentUncheckedUpdateWithoutContractInput>
    create: XOR<DocumentCreateWithoutContractInput, DocumentUncheckedCreateWithoutContractInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutContractInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutContractInput, DocumentUncheckedUpdateWithoutContractInput>
  }

  export type DocumentUpdateManyWithWhereWithoutContractInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutContractInput>
  }

  export type BiddingCreateWithoutDocumentsInput = {
    id?: string
    title: string
    description: string
    biddingNumber: string
    type: $Enums.BiddingType
    status?: $Enums.BiddingStatus
    estimatedValue: Decimal | DecimalJsLike | number | string
    openingDate: Date | string
    closingDate: Date | string
    deliveryLocation: string
    deliveryDeadline: Date | string
    requirements: string
    evaluationCriteria: string
    isPublic?: boolean
    publishedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    publicEntity: PublicEntityCreateNestedOneWithoutBiddingsInput
    proposals?: ProposalCreateNestedManyWithoutBiddingInput
    categories?: BiddingCategoryCreateNestedManyWithoutBiddingInput
    contract?: ContractCreateNestedOneWithoutBiddingInput
  }

  export type BiddingUncheckedCreateWithoutDocumentsInput = {
    id?: string
    publicEntityId: string
    title: string
    description: string
    biddingNumber: string
    type: $Enums.BiddingType
    status?: $Enums.BiddingStatus
    estimatedValue: Decimal | DecimalJsLike | number | string
    openingDate: Date | string
    closingDate: Date | string
    deliveryLocation: string
    deliveryDeadline: Date | string
    requirements: string
    evaluationCriteria: string
    isPublic?: boolean
    publishedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    proposals?: ProposalUncheckedCreateNestedManyWithoutBiddingInput
    categories?: BiddingCategoryUncheckedCreateNestedManyWithoutBiddingInput
    contract?: ContractUncheckedCreateNestedOneWithoutBiddingInput
  }

  export type BiddingCreateOrConnectWithoutDocumentsInput = {
    where: BiddingWhereUniqueInput
    create: XOR<BiddingCreateWithoutDocumentsInput, BiddingUncheckedCreateWithoutDocumentsInput>
  }

  export type ProposalCreateWithoutDocumentsInput = {
    id?: string
    totalValue: Decimal | DecimalJsLike | number | string
    description: string
    status?: $Enums.ProposalStatus
    submittedAt?: Date | string | null
    validUntil: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bidding: BiddingCreateNestedOneWithoutProposalsInput
    supplier: SupplierCreateNestedOneWithoutProposalsInput
    items?: ProposalItemCreateNestedManyWithoutProposalInput
    contract?: ContractCreateNestedOneWithoutProposalInput
  }

  export type ProposalUncheckedCreateWithoutDocumentsInput = {
    id?: string
    biddingId: string
    supplierId: string
    totalValue: Decimal | DecimalJsLike | number | string
    description: string
    status?: $Enums.ProposalStatus
    submittedAt?: Date | string | null
    validUntil: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ProposalItemUncheckedCreateNestedManyWithoutProposalInput
    contract?: ContractUncheckedCreateNestedOneWithoutProposalInput
  }

  export type ProposalCreateOrConnectWithoutDocumentsInput = {
    where: ProposalWhereUniqueInput
    create: XOR<ProposalCreateWithoutDocumentsInput, ProposalUncheckedCreateWithoutDocumentsInput>
  }

  export type ContractCreateWithoutDocumentsInput = {
    id?: string
    contractNumber: string
    title: string
    description: string
    totalValue: Decimal | DecimalJsLike | number | string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.ContractStatus
    signedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bidding: BiddingCreateNestedOneWithoutContractInput
    proposal: ProposalCreateNestedOneWithoutContractInput
    publicEntity: PublicEntityCreateNestedOneWithoutContractsInput
    supplier: SupplierCreateNestedOneWithoutContractsInput
  }

  export type ContractUncheckedCreateWithoutDocumentsInput = {
    id?: string
    biddingId: string
    proposalId: string
    publicEntityId: string
    supplierId: string
    contractNumber: string
    title: string
    description: string
    totalValue: Decimal | DecimalJsLike | number | string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.ContractStatus
    signedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContractCreateOrConnectWithoutDocumentsInput = {
    where: ContractWhereUniqueInput
    create: XOR<ContractCreateWithoutDocumentsInput, ContractUncheckedCreateWithoutDocumentsInput>
  }

  export type SupplierCreateWithoutDocumentsInput = {
    id?: string
    companyName: string
    tradeName?: string | null
    cnpj: string
    stateRegistration?: string | null
    municipalRegistration?: string | null
    address: string
    city: string
    state: string
    zipCode: string
    website?: string | null
    description?: string | null
    isActive?: boolean
    verifiedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSupplierInput
    proposals?: ProposalCreateNestedManyWithoutSupplierInput
    contracts?: ContractCreateNestedManyWithoutSupplierInput
    categories?: SupplierCategoryCreateNestedManyWithoutSupplierInput
  }

  export type SupplierUncheckedCreateWithoutDocumentsInput = {
    id?: string
    userId: string
    companyName: string
    tradeName?: string | null
    cnpj: string
    stateRegistration?: string | null
    municipalRegistration?: string | null
    address: string
    city: string
    state: string
    zipCode: string
    website?: string | null
    description?: string | null
    isActive?: boolean
    verifiedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    proposals?: ProposalUncheckedCreateNestedManyWithoutSupplierInput
    contracts?: ContractUncheckedCreateNestedManyWithoutSupplierInput
    categories?: SupplierCategoryUncheckedCreateNestedManyWithoutSupplierInput
  }

  export type SupplierCreateOrConnectWithoutDocumentsInput = {
    where: SupplierWhereUniqueInput
    create: XOR<SupplierCreateWithoutDocumentsInput, SupplierUncheckedCreateWithoutDocumentsInput>
  }

  export type PublicEntityCreateWithoutDocumentsInput = {
    id?: string
    name: string
    cnpj: string
    entityType: string
    address: string
    city: string
    state: string
    zipCode: string
    phone: string
    website?: string | null
    isActive?: boolean
    verifiedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPublicEntityInput
    biddings?: BiddingCreateNestedManyWithoutPublicEntityInput
    contracts?: ContractCreateNestedManyWithoutPublicEntityInput
  }

  export type PublicEntityUncheckedCreateWithoutDocumentsInput = {
    id?: string
    userId: string
    name: string
    cnpj: string
    entityType: string
    address: string
    city: string
    state: string
    zipCode: string
    phone: string
    website?: string | null
    isActive?: boolean
    verifiedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    biddings?: BiddingUncheckedCreateNestedManyWithoutPublicEntityInput
    contracts?: ContractUncheckedCreateNestedManyWithoutPublicEntityInput
  }

  export type PublicEntityCreateOrConnectWithoutDocumentsInput = {
    where: PublicEntityWhereUniqueInput
    create: XOR<PublicEntityCreateWithoutDocumentsInput, PublicEntityUncheckedCreateWithoutDocumentsInput>
  }

  export type BiddingUpsertWithoutDocumentsInput = {
    update: XOR<BiddingUpdateWithoutDocumentsInput, BiddingUncheckedUpdateWithoutDocumentsInput>
    create: XOR<BiddingCreateWithoutDocumentsInput, BiddingUncheckedCreateWithoutDocumentsInput>
    where?: BiddingWhereInput
  }

  export type BiddingUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: BiddingWhereInput
    data: XOR<BiddingUpdateWithoutDocumentsInput, BiddingUncheckedUpdateWithoutDocumentsInput>
  }

  export type BiddingUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    biddingNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumBiddingTypeFieldUpdateOperationsInput | $Enums.BiddingType
    status?: EnumBiddingStatusFieldUpdateOperationsInput | $Enums.BiddingStatus
    estimatedValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    openingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    closingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryLocation?: StringFieldUpdateOperationsInput | string
    deliveryDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    requirements?: StringFieldUpdateOperationsInput | string
    evaluationCriteria?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publicEntity?: PublicEntityUpdateOneRequiredWithoutBiddingsNestedInput
    proposals?: ProposalUpdateManyWithoutBiddingNestedInput
    categories?: BiddingCategoryUpdateManyWithoutBiddingNestedInput
    contract?: ContractUpdateOneWithoutBiddingNestedInput
  }

  export type BiddingUncheckedUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    publicEntityId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    biddingNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumBiddingTypeFieldUpdateOperationsInput | $Enums.BiddingType
    status?: EnumBiddingStatusFieldUpdateOperationsInput | $Enums.BiddingStatus
    estimatedValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    openingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    closingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryLocation?: StringFieldUpdateOperationsInput | string
    deliveryDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    requirements?: StringFieldUpdateOperationsInput | string
    evaluationCriteria?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proposals?: ProposalUncheckedUpdateManyWithoutBiddingNestedInput
    categories?: BiddingCategoryUncheckedUpdateManyWithoutBiddingNestedInput
    contract?: ContractUncheckedUpdateOneWithoutBiddingNestedInput
  }

  export type ProposalUpsertWithoutDocumentsInput = {
    update: XOR<ProposalUpdateWithoutDocumentsInput, ProposalUncheckedUpdateWithoutDocumentsInput>
    create: XOR<ProposalCreateWithoutDocumentsInput, ProposalUncheckedCreateWithoutDocumentsInput>
    where?: ProposalWhereInput
  }

  export type ProposalUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: ProposalWhereInput
    data: XOR<ProposalUpdateWithoutDocumentsInput, ProposalUncheckedUpdateWithoutDocumentsInput>
  }

  export type ProposalUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumProposalStatusFieldUpdateOperationsInput | $Enums.ProposalStatus
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bidding?: BiddingUpdateOneRequiredWithoutProposalsNestedInput
    supplier?: SupplierUpdateOneRequiredWithoutProposalsNestedInput
    items?: ProposalItemUpdateManyWithoutProposalNestedInput
    contract?: ContractUpdateOneWithoutProposalNestedInput
  }

  export type ProposalUncheckedUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    biddingId?: StringFieldUpdateOperationsInput | string
    supplierId?: StringFieldUpdateOperationsInput | string
    totalValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumProposalStatusFieldUpdateOperationsInput | $Enums.ProposalStatus
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ProposalItemUncheckedUpdateManyWithoutProposalNestedInput
    contract?: ContractUncheckedUpdateOneWithoutProposalNestedInput
  }

  export type ContractUpsertWithoutDocumentsInput = {
    update: XOR<ContractUpdateWithoutDocumentsInput, ContractUncheckedUpdateWithoutDocumentsInput>
    create: XOR<ContractCreateWithoutDocumentsInput, ContractUncheckedCreateWithoutDocumentsInput>
    where?: ContractWhereInput
  }

  export type ContractUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: ContractWhereInput
    data: XOR<ContractUpdateWithoutDocumentsInput, ContractUncheckedUpdateWithoutDocumentsInput>
  }

  export type ContractUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    totalValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    signedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bidding?: BiddingUpdateOneRequiredWithoutContractNestedInput
    proposal?: ProposalUpdateOneRequiredWithoutContractNestedInput
    publicEntity?: PublicEntityUpdateOneRequiredWithoutContractsNestedInput
    supplier?: SupplierUpdateOneRequiredWithoutContractsNestedInput
  }

  export type ContractUncheckedUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    biddingId?: StringFieldUpdateOperationsInput | string
    proposalId?: StringFieldUpdateOperationsInput | string
    publicEntityId?: StringFieldUpdateOperationsInput | string
    supplierId?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    totalValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    signedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SupplierUpsertWithoutDocumentsInput = {
    update: XOR<SupplierUpdateWithoutDocumentsInput, SupplierUncheckedUpdateWithoutDocumentsInput>
    create: XOR<SupplierCreateWithoutDocumentsInput, SupplierUncheckedCreateWithoutDocumentsInput>
    where?: SupplierWhereInput
  }

  export type SupplierUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: SupplierWhereInput
    data: XOR<SupplierUpdateWithoutDocumentsInput, SupplierUncheckedUpdateWithoutDocumentsInput>
  }

  export type SupplierUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    tradeName?: NullableStringFieldUpdateOperationsInput | string | null
    cnpj?: StringFieldUpdateOperationsInput | string
    stateRegistration?: NullableStringFieldUpdateOperationsInput | string | null
    municipalRegistration?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSupplierNestedInput
    proposals?: ProposalUpdateManyWithoutSupplierNestedInput
    contracts?: ContractUpdateManyWithoutSupplierNestedInput
    categories?: SupplierCategoryUpdateManyWithoutSupplierNestedInput
  }

  export type SupplierUncheckedUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    tradeName?: NullableStringFieldUpdateOperationsInput | string | null
    cnpj?: StringFieldUpdateOperationsInput | string
    stateRegistration?: NullableStringFieldUpdateOperationsInput | string | null
    municipalRegistration?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proposals?: ProposalUncheckedUpdateManyWithoutSupplierNestedInput
    contracts?: ContractUncheckedUpdateManyWithoutSupplierNestedInput
    categories?: SupplierCategoryUncheckedUpdateManyWithoutSupplierNestedInput
  }

  export type PublicEntityUpsertWithoutDocumentsInput = {
    update: XOR<PublicEntityUpdateWithoutDocumentsInput, PublicEntityUncheckedUpdateWithoutDocumentsInput>
    create: XOR<PublicEntityCreateWithoutDocumentsInput, PublicEntityUncheckedCreateWithoutDocumentsInput>
    where?: PublicEntityWhereInput
  }

  export type PublicEntityUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: PublicEntityWhereInput
    data: XOR<PublicEntityUpdateWithoutDocumentsInput, PublicEntityUncheckedUpdateWithoutDocumentsInput>
  }

  export type PublicEntityUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPublicEntityNestedInput
    biddings?: BiddingUpdateManyWithoutPublicEntityNestedInput
    contracts?: ContractUpdateManyWithoutPublicEntityNestedInput
  }

  export type PublicEntityUncheckedUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    biddings?: BiddingUncheckedUpdateManyWithoutPublicEntityNestedInput
    contracts?: ContractUncheckedUpdateManyWithoutPublicEntityNestedInput
  }

  export type BiddingCreateWithoutCategoriesInput = {
    id?: string
    title: string
    description: string
    biddingNumber: string
    type: $Enums.BiddingType
    status?: $Enums.BiddingStatus
    estimatedValue: Decimal | DecimalJsLike | number | string
    openingDate: Date | string
    closingDate: Date | string
    deliveryLocation: string
    deliveryDeadline: Date | string
    requirements: string
    evaluationCriteria: string
    isPublic?: boolean
    publishedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    publicEntity: PublicEntityCreateNestedOneWithoutBiddingsInput
    proposals?: ProposalCreateNestedManyWithoutBiddingInput
    documents?: DocumentCreateNestedManyWithoutBiddingInput
    contract?: ContractCreateNestedOneWithoutBiddingInput
  }

  export type BiddingUncheckedCreateWithoutCategoriesInput = {
    id?: string
    publicEntityId: string
    title: string
    description: string
    biddingNumber: string
    type: $Enums.BiddingType
    status?: $Enums.BiddingStatus
    estimatedValue: Decimal | DecimalJsLike | number | string
    openingDate: Date | string
    closingDate: Date | string
    deliveryLocation: string
    deliveryDeadline: Date | string
    requirements: string
    evaluationCriteria: string
    isPublic?: boolean
    publishedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    proposals?: ProposalUncheckedCreateNestedManyWithoutBiddingInput
    documents?: DocumentUncheckedCreateNestedManyWithoutBiddingInput
    contract?: ContractUncheckedCreateNestedOneWithoutBiddingInput
  }

  export type BiddingCreateOrConnectWithoutCategoriesInput = {
    where: BiddingWhereUniqueInput
    create: XOR<BiddingCreateWithoutCategoriesInput, BiddingUncheckedCreateWithoutCategoriesInput>
  }

  export type CategoryCreateWithoutBiddingsInput = {
    id?: string
    name: string
    description?: string | null
    code: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: CategoryCreateNestedOneWithoutChildrenInput
    children?: CategoryCreateNestedManyWithoutParentInput
    suppliers?: SupplierCategoryCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutBiddingsInput = {
    id?: string
    name: string
    description?: string | null
    code: string
    parentId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: CategoryUncheckedCreateNestedManyWithoutParentInput
    suppliers?: SupplierCategoryUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutBiddingsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutBiddingsInput, CategoryUncheckedCreateWithoutBiddingsInput>
  }

  export type BiddingUpsertWithoutCategoriesInput = {
    update: XOR<BiddingUpdateWithoutCategoriesInput, BiddingUncheckedUpdateWithoutCategoriesInput>
    create: XOR<BiddingCreateWithoutCategoriesInput, BiddingUncheckedCreateWithoutCategoriesInput>
    where?: BiddingWhereInput
  }

  export type BiddingUpdateToOneWithWhereWithoutCategoriesInput = {
    where?: BiddingWhereInput
    data: XOR<BiddingUpdateWithoutCategoriesInput, BiddingUncheckedUpdateWithoutCategoriesInput>
  }

  export type BiddingUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    biddingNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumBiddingTypeFieldUpdateOperationsInput | $Enums.BiddingType
    status?: EnumBiddingStatusFieldUpdateOperationsInput | $Enums.BiddingStatus
    estimatedValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    openingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    closingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryLocation?: StringFieldUpdateOperationsInput | string
    deliveryDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    requirements?: StringFieldUpdateOperationsInput | string
    evaluationCriteria?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publicEntity?: PublicEntityUpdateOneRequiredWithoutBiddingsNestedInput
    proposals?: ProposalUpdateManyWithoutBiddingNestedInput
    documents?: DocumentUpdateManyWithoutBiddingNestedInput
    contract?: ContractUpdateOneWithoutBiddingNestedInput
  }

  export type BiddingUncheckedUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    publicEntityId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    biddingNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumBiddingTypeFieldUpdateOperationsInput | $Enums.BiddingType
    status?: EnumBiddingStatusFieldUpdateOperationsInput | $Enums.BiddingStatus
    estimatedValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    openingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    closingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryLocation?: StringFieldUpdateOperationsInput | string
    deliveryDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    requirements?: StringFieldUpdateOperationsInput | string
    evaluationCriteria?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proposals?: ProposalUncheckedUpdateManyWithoutBiddingNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutBiddingNestedInput
    contract?: ContractUncheckedUpdateOneWithoutBiddingNestedInput
  }

  export type CategoryUpsertWithoutBiddingsInput = {
    update: XOR<CategoryUpdateWithoutBiddingsInput, CategoryUncheckedUpdateWithoutBiddingsInput>
    create: XOR<CategoryCreateWithoutBiddingsInput, CategoryUncheckedCreateWithoutBiddingsInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutBiddingsInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutBiddingsInput, CategoryUncheckedUpdateWithoutBiddingsInput>
  }

  export type CategoryUpdateWithoutBiddingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: CategoryUpdateOneWithoutChildrenNestedInput
    children?: CategoryUpdateManyWithoutParentNestedInput
    suppliers?: SupplierCategoryUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutBiddingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    suppliers?: SupplierCategoryUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type SupplierCreateWithoutCategoriesInput = {
    id?: string
    companyName: string
    tradeName?: string | null
    cnpj: string
    stateRegistration?: string | null
    municipalRegistration?: string | null
    address: string
    city: string
    state: string
    zipCode: string
    website?: string | null
    description?: string | null
    isActive?: boolean
    verifiedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSupplierInput
    proposals?: ProposalCreateNestedManyWithoutSupplierInput
    contracts?: ContractCreateNestedManyWithoutSupplierInput
    documents?: DocumentCreateNestedManyWithoutSupplierInput
  }

  export type SupplierUncheckedCreateWithoutCategoriesInput = {
    id?: string
    userId: string
    companyName: string
    tradeName?: string | null
    cnpj: string
    stateRegistration?: string | null
    municipalRegistration?: string | null
    address: string
    city: string
    state: string
    zipCode: string
    website?: string | null
    description?: string | null
    isActive?: boolean
    verifiedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    proposals?: ProposalUncheckedCreateNestedManyWithoutSupplierInput
    contracts?: ContractUncheckedCreateNestedManyWithoutSupplierInput
    documents?: DocumentUncheckedCreateNestedManyWithoutSupplierInput
  }

  export type SupplierCreateOrConnectWithoutCategoriesInput = {
    where: SupplierWhereUniqueInput
    create: XOR<SupplierCreateWithoutCategoriesInput, SupplierUncheckedCreateWithoutCategoriesInput>
  }

  export type CategoryCreateWithoutSuppliersInput = {
    id?: string
    name: string
    description?: string | null
    code: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: CategoryCreateNestedOneWithoutChildrenInput
    children?: CategoryCreateNestedManyWithoutParentInput
    biddings?: BiddingCategoryCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutSuppliersInput = {
    id?: string
    name: string
    description?: string | null
    code: string
    parentId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: CategoryUncheckedCreateNestedManyWithoutParentInput
    biddings?: BiddingCategoryUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutSuppliersInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutSuppliersInput, CategoryUncheckedCreateWithoutSuppliersInput>
  }

  export type SupplierUpsertWithoutCategoriesInput = {
    update: XOR<SupplierUpdateWithoutCategoriesInput, SupplierUncheckedUpdateWithoutCategoriesInput>
    create: XOR<SupplierCreateWithoutCategoriesInput, SupplierUncheckedCreateWithoutCategoriesInput>
    where?: SupplierWhereInput
  }

  export type SupplierUpdateToOneWithWhereWithoutCategoriesInput = {
    where?: SupplierWhereInput
    data: XOR<SupplierUpdateWithoutCategoriesInput, SupplierUncheckedUpdateWithoutCategoriesInput>
  }

  export type SupplierUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    tradeName?: NullableStringFieldUpdateOperationsInput | string | null
    cnpj?: StringFieldUpdateOperationsInput | string
    stateRegistration?: NullableStringFieldUpdateOperationsInput | string | null
    municipalRegistration?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSupplierNestedInput
    proposals?: ProposalUpdateManyWithoutSupplierNestedInput
    contracts?: ContractUpdateManyWithoutSupplierNestedInput
    documents?: DocumentUpdateManyWithoutSupplierNestedInput
  }

  export type SupplierUncheckedUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    tradeName?: NullableStringFieldUpdateOperationsInput | string | null
    cnpj?: StringFieldUpdateOperationsInput | string
    stateRegistration?: NullableStringFieldUpdateOperationsInput | string | null
    municipalRegistration?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proposals?: ProposalUncheckedUpdateManyWithoutSupplierNestedInput
    contracts?: ContractUncheckedUpdateManyWithoutSupplierNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutSupplierNestedInput
  }

  export type CategoryUpsertWithoutSuppliersInput = {
    update: XOR<CategoryUpdateWithoutSuppliersInput, CategoryUncheckedUpdateWithoutSuppliersInput>
    create: XOR<CategoryCreateWithoutSuppliersInput, CategoryUncheckedCreateWithoutSuppliersInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutSuppliersInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutSuppliersInput, CategoryUncheckedUpdateWithoutSuppliersInput>
  }

  export type CategoryUpdateWithoutSuppliersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: CategoryUpdateOneWithoutChildrenNestedInput
    children?: CategoryUpdateManyWithoutParentNestedInput
    biddings?: BiddingCategoryUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutSuppliersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    biddings?: BiddingCategoryUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type UserCreateWithoutAuditLogsInput = {
    id?: string
    email: string
    password: string
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    firstName: string
    lastName: string
    phone?: string | null
    avatar?: string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    supplier?: SupplierCreateNestedOneWithoutUserInput
    publicEntity?: PublicEntityCreateNestedOneWithoutUserInput
    citizen?: CitizenCreateNestedOneWithoutUserInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    email: string
    password: string
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    firstName: string
    lastName: string
    phone?: string | null
    avatar?: string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    supplier?: SupplierUncheckedCreateNestedOneWithoutUserInput
    publicEntity?: PublicEntityUncheckedCreateNestedOneWithoutUserInput
    citizen?: CitizenUncheckedCreateNestedOneWithoutUserInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAuditLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
  }

  export type UserUpsertWithoutAuditLogsInput = {
    update: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    supplier?: SupplierUpdateOneWithoutUserNestedInput
    publicEntity?: PublicEntityUpdateOneWithoutUserNestedInput
    citizen?: CitizenUpdateOneWithoutUserNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    supplier?: SupplierUncheckedUpdateOneWithoutUserNestedInput
    publicEntity?: PublicEntityUncheckedUpdateOneWithoutUserNestedInput
    citizen?: CitizenUncheckedUpdateOneWithoutUserNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    email: string
    password: string
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    firstName: string
    lastName: string
    phone?: string | null
    avatar?: string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    supplier?: SupplierCreateNestedOneWithoutUserInput
    publicEntity?: PublicEntityCreateNestedOneWithoutUserInput
    citizen?: CitizenCreateNestedOneWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    email: string
    password: string
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    firstName: string
    lastName: string
    phone?: string | null
    avatar?: string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    supplier?: SupplierUncheckedCreateNestedOneWithoutUserInput
    publicEntity?: PublicEntityUncheckedCreateNestedOneWithoutUserInput
    citizen?: CitizenUncheckedCreateNestedOneWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    supplier?: SupplierUpdateOneWithoutUserNestedInput
    publicEntity?: PublicEntityUpdateOneWithoutUserNestedInput
    citizen?: CitizenUpdateOneWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    supplier?: SupplierUncheckedUpdateOneWithoutUserNestedInput
    publicEntity?: PublicEntityUncheckedUpdateOneWithoutUserNestedInput
    citizen?: CitizenUncheckedUpdateOneWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutPermissionsInput = {
    id?: string
    email: string
    password: string
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    firstName: string
    lastName: string
    phone?: string | null
    avatar?: string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    supplier?: SupplierCreateNestedOneWithoutUserInput
    publicEntity?: PublicEntityCreateNestedOneWithoutUserInput
    citizen?: CitizenCreateNestedOneWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPermissionsInput = {
    id?: string
    email: string
    password: string
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    firstName: string
    lastName: string
    phone?: string | null
    avatar?: string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    supplier?: SupplierUncheckedCreateNestedOneWithoutUserInput
    publicEntity?: PublicEntityUncheckedCreateNestedOneWithoutUserInput
    citizen?: CitizenUncheckedCreateNestedOneWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPermissionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPermissionsInput, UserUncheckedCreateWithoutPermissionsInput>
  }

  export type UserUpsertWithoutPermissionsInput = {
    update: XOR<UserUpdateWithoutPermissionsInput, UserUncheckedUpdateWithoutPermissionsInput>
    create: XOR<UserCreateWithoutPermissionsInput, UserUncheckedCreateWithoutPermissionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPermissionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPermissionsInput, UserUncheckedUpdateWithoutPermissionsInput>
  }

  export type UserUpdateWithoutPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    supplier?: SupplierUpdateOneWithoutUserNestedInput
    publicEntity?: PublicEntityUpdateOneWithoutUserNestedInput
    citizen?: CitizenUpdateOneWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    supplier?: SupplierUncheckedUpdateOneWithoutUserNestedInput
    publicEntity?: PublicEntityUncheckedUpdateOneWithoutUserNestedInput
    citizen?: CitizenUncheckedUpdateOneWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AuditLogCreateManyUserInput = {
    id?: string
    action: string
    resource: string
    resourceId?: string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type UserSessionCreateManyUserInput = {
    id?: string
    token: string
    ipAddress?: string | null
    userAgent?: string | null
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPermissionCreateManyUserInput = {
    id?: string
    permission: $Enums.Permission
    grantedBy?: string | null
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AuditLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPermissionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    permission?: EnumPermissionFieldUpdateOperationsInput | $Enums.Permission
    grantedBy?: NullableStringFieldUpdateOperationsInput | string | null
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPermissionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    permission?: EnumPermissionFieldUpdateOperationsInput | $Enums.Permission
    grantedBy?: NullableStringFieldUpdateOperationsInput | string | null
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPermissionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    permission?: EnumPermissionFieldUpdateOperationsInput | $Enums.Permission
    grantedBy?: NullableStringFieldUpdateOperationsInput | string | null
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProposalCreateManySupplierInput = {
    id?: string
    biddingId: string
    totalValue: Decimal | DecimalJsLike | number | string
    description: string
    status?: $Enums.ProposalStatus
    submittedAt?: Date | string | null
    validUntil: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContractCreateManySupplierInput = {
    id?: string
    biddingId: string
    proposalId: string
    publicEntityId: string
    contractNumber: string
    title: string
    description: string
    totalValue: Decimal | DecimalJsLike | number | string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.ContractStatus
    signedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentCreateManySupplierInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    size: number
    path: string
    type: $Enums.DocumentType
    description?: string | null
    isPublic?: boolean
    uploadedBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    biddingId?: string | null
    proposalId?: string | null
    contractId?: string | null
    publicEntityId?: string | null
  }

  export type SupplierCategoryCreateManySupplierInput = {
    id?: string
    categoryId: string
    createdAt?: Date | string
  }

  export type ProposalUpdateWithoutSupplierInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumProposalStatusFieldUpdateOperationsInput | $Enums.ProposalStatus
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bidding?: BiddingUpdateOneRequiredWithoutProposalsNestedInput
    items?: ProposalItemUpdateManyWithoutProposalNestedInput
    documents?: DocumentUpdateManyWithoutProposalNestedInput
    contract?: ContractUpdateOneWithoutProposalNestedInput
  }

  export type ProposalUncheckedUpdateWithoutSupplierInput = {
    id?: StringFieldUpdateOperationsInput | string
    biddingId?: StringFieldUpdateOperationsInput | string
    totalValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumProposalStatusFieldUpdateOperationsInput | $Enums.ProposalStatus
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ProposalItemUncheckedUpdateManyWithoutProposalNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutProposalNestedInput
    contract?: ContractUncheckedUpdateOneWithoutProposalNestedInput
  }

  export type ProposalUncheckedUpdateManyWithoutSupplierInput = {
    id?: StringFieldUpdateOperationsInput | string
    biddingId?: StringFieldUpdateOperationsInput | string
    totalValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumProposalStatusFieldUpdateOperationsInput | $Enums.ProposalStatus
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractUpdateWithoutSupplierInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    totalValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    signedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bidding?: BiddingUpdateOneRequiredWithoutContractNestedInput
    proposal?: ProposalUpdateOneRequiredWithoutContractNestedInput
    publicEntity?: PublicEntityUpdateOneRequiredWithoutContractsNestedInput
    documents?: DocumentUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateWithoutSupplierInput = {
    id?: StringFieldUpdateOperationsInput | string
    biddingId?: StringFieldUpdateOperationsInput | string
    proposalId?: StringFieldUpdateOperationsInput | string
    publicEntityId?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    totalValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    signedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: DocumentUncheckedUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateManyWithoutSupplierInput = {
    id?: StringFieldUpdateOperationsInput | string
    biddingId?: StringFieldUpdateOperationsInput | string
    proposalId?: StringFieldUpdateOperationsInput | string
    publicEntityId?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    totalValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    signedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUpdateWithoutSupplierInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    uploadedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bidding?: BiddingUpdateOneWithoutDocumentsNestedInput
    proposal?: ProposalUpdateOneWithoutDocumentsNestedInput
    contract?: ContractUpdateOneWithoutDocumentsNestedInput
    publicEntity?: PublicEntityUpdateOneWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateWithoutSupplierInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    uploadedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    biddingId?: NullableStringFieldUpdateOperationsInput | string | null
    proposalId?: NullableStringFieldUpdateOperationsInput | string | null
    contractId?: NullableStringFieldUpdateOperationsInput | string | null
    publicEntityId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentUncheckedUpdateManyWithoutSupplierInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    uploadedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    biddingId?: NullableStringFieldUpdateOperationsInput | string | null
    proposalId?: NullableStringFieldUpdateOperationsInput | string | null
    contractId?: NullableStringFieldUpdateOperationsInput | string | null
    publicEntityId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SupplierCategoryUpdateWithoutSupplierInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutSuppliersNestedInput
  }

  export type SupplierCategoryUncheckedUpdateWithoutSupplierInput = {
    id?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SupplierCategoryUncheckedUpdateManyWithoutSupplierInput = {
    id?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BiddingCreateManyPublicEntityInput = {
    id?: string
    title: string
    description: string
    biddingNumber: string
    type: $Enums.BiddingType
    status?: $Enums.BiddingStatus
    estimatedValue: Decimal | DecimalJsLike | number | string
    openingDate: Date | string
    closingDate: Date | string
    deliveryLocation: string
    deliveryDeadline: Date | string
    requirements: string
    evaluationCriteria: string
    isPublic?: boolean
    publishedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContractCreateManyPublicEntityInput = {
    id?: string
    biddingId: string
    proposalId: string
    supplierId: string
    contractNumber: string
    title: string
    description: string
    totalValue: Decimal | DecimalJsLike | number | string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.ContractStatus
    signedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentCreateManyPublicEntityInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    size: number
    path: string
    type: $Enums.DocumentType
    description?: string | null
    isPublic?: boolean
    uploadedBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    biddingId?: string | null
    proposalId?: string | null
    contractId?: string | null
    supplierId?: string | null
  }

  export type BiddingUpdateWithoutPublicEntityInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    biddingNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumBiddingTypeFieldUpdateOperationsInput | $Enums.BiddingType
    status?: EnumBiddingStatusFieldUpdateOperationsInput | $Enums.BiddingStatus
    estimatedValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    openingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    closingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryLocation?: StringFieldUpdateOperationsInput | string
    deliveryDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    requirements?: StringFieldUpdateOperationsInput | string
    evaluationCriteria?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proposals?: ProposalUpdateManyWithoutBiddingNestedInput
    documents?: DocumentUpdateManyWithoutBiddingNestedInput
    categories?: BiddingCategoryUpdateManyWithoutBiddingNestedInput
    contract?: ContractUpdateOneWithoutBiddingNestedInput
  }

  export type BiddingUncheckedUpdateWithoutPublicEntityInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    biddingNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumBiddingTypeFieldUpdateOperationsInput | $Enums.BiddingType
    status?: EnumBiddingStatusFieldUpdateOperationsInput | $Enums.BiddingStatus
    estimatedValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    openingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    closingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryLocation?: StringFieldUpdateOperationsInput | string
    deliveryDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    requirements?: StringFieldUpdateOperationsInput | string
    evaluationCriteria?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proposals?: ProposalUncheckedUpdateManyWithoutBiddingNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutBiddingNestedInput
    categories?: BiddingCategoryUncheckedUpdateManyWithoutBiddingNestedInput
    contract?: ContractUncheckedUpdateOneWithoutBiddingNestedInput
  }

  export type BiddingUncheckedUpdateManyWithoutPublicEntityInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    biddingNumber?: StringFieldUpdateOperationsInput | string
    type?: EnumBiddingTypeFieldUpdateOperationsInput | $Enums.BiddingType
    status?: EnumBiddingStatusFieldUpdateOperationsInput | $Enums.BiddingStatus
    estimatedValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    openingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    closingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryLocation?: StringFieldUpdateOperationsInput | string
    deliveryDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    requirements?: StringFieldUpdateOperationsInput | string
    evaluationCriteria?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractUpdateWithoutPublicEntityInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    totalValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    signedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bidding?: BiddingUpdateOneRequiredWithoutContractNestedInput
    proposal?: ProposalUpdateOneRequiredWithoutContractNestedInput
    supplier?: SupplierUpdateOneRequiredWithoutContractsNestedInput
    documents?: DocumentUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateWithoutPublicEntityInput = {
    id?: StringFieldUpdateOperationsInput | string
    biddingId?: StringFieldUpdateOperationsInput | string
    proposalId?: StringFieldUpdateOperationsInput | string
    supplierId?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    totalValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    signedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: DocumentUncheckedUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateManyWithoutPublicEntityInput = {
    id?: StringFieldUpdateOperationsInput | string
    biddingId?: StringFieldUpdateOperationsInput | string
    proposalId?: StringFieldUpdateOperationsInput | string
    supplierId?: StringFieldUpdateOperationsInput | string
    contractNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    totalValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    signedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUpdateWithoutPublicEntityInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    uploadedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bidding?: BiddingUpdateOneWithoutDocumentsNestedInput
    proposal?: ProposalUpdateOneWithoutDocumentsNestedInput
    contract?: ContractUpdateOneWithoutDocumentsNestedInput
    supplier?: SupplierUpdateOneWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateWithoutPublicEntityInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    uploadedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    biddingId?: NullableStringFieldUpdateOperationsInput | string | null
    proposalId?: NullableStringFieldUpdateOperationsInput | string | null
    contractId?: NullableStringFieldUpdateOperationsInput | string | null
    supplierId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentUncheckedUpdateManyWithoutPublicEntityInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    uploadedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    biddingId?: NullableStringFieldUpdateOperationsInput | string | null
    proposalId?: NullableStringFieldUpdateOperationsInput | string | null
    contractId?: NullableStringFieldUpdateOperationsInput | string | null
    supplierId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoryCreateManyParentInput = {
    id?: string
    name: string
    description?: string | null
    code: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BiddingCategoryCreateManyCategoryInput = {
    id?: string
    biddingId: string
    createdAt?: Date | string
  }

  export type SupplierCategoryCreateManyCategoryInput = {
    id?: string
    supplierId: string
    createdAt?: Date | string
  }

  export type CategoryUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: CategoryUpdateManyWithoutParentNestedInput
    biddings?: BiddingCategoryUpdateManyWithoutCategoryNestedInput
    suppliers?: SupplierCategoryUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    biddings?: BiddingCategoryUncheckedUpdateManyWithoutCategoryNestedInput
    suppliers?: SupplierCategoryUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateManyWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BiddingCategoryUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bidding?: BiddingUpdateOneRequiredWithoutCategoriesNestedInput
  }

  export type BiddingCategoryUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    biddingId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BiddingCategoryUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    biddingId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SupplierCategoryUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    supplier?: SupplierUpdateOneRequiredWithoutCategoriesNestedInput
  }

  export type SupplierCategoryUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    supplierId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SupplierCategoryUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    supplierId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProposalCreateManyBiddingInput = {
    id?: string
    supplierId: string
    totalValue: Decimal | DecimalJsLike | number | string
    description: string
    status?: $Enums.ProposalStatus
    submittedAt?: Date | string | null
    validUntil: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentCreateManyBiddingInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    size: number
    path: string
    type: $Enums.DocumentType
    description?: string | null
    isPublic?: boolean
    uploadedBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    proposalId?: string | null
    contractId?: string | null
    supplierId?: string | null
    publicEntityId?: string | null
  }

  export type BiddingCategoryCreateManyBiddingInput = {
    id?: string
    categoryId: string
    createdAt?: Date | string
  }

  export type ProposalUpdateWithoutBiddingInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumProposalStatusFieldUpdateOperationsInput | $Enums.ProposalStatus
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    supplier?: SupplierUpdateOneRequiredWithoutProposalsNestedInput
    items?: ProposalItemUpdateManyWithoutProposalNestedInput
    documents?: DocumentUpdateManyWithoutProposalNestedInput
    contract?: ContractUpdateOneWithoutProposalNestedInput
  }

  export type ProposalUncheckedUpdateWithoutBiddingInput = {
    id?: StringFieldUpdateOperationsInput | string
    supplierId?: StringFieldUpdateOperationsInput | string
    totalValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumProposalStatusFieldUpdateOperationsInput | $Enums.ProposalStatus
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ProposalItemUncheckedUpdateManyWithoutProposalNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutProposalNestedInput
    contract?: ContractUncheckedUpdateOneWithoutProposalNestedInput
  }

  export type ProposalUncheckedUpdateManyWithoutBiddingInput = {
    id?: StringFieldUpdateOperationsInput | string
    supplierId?: StringFieldUpdateOperationsInput | string
    totalValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumProposalStatusFieldUpdateOperationsInput | $Enums.ProposalStatus
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUpdateWithoutBiddingInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    uploadedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proposal?: ProposalUpdateOneWithoutDocumentsNestedInput
    contract?: ContractUpdateOneWithoutDocumentsNestedInput
    supplier?: SupplierUpdateOneWithoutDocumentsNestedInput
    publicEntity?: PublicEntityUpdateOneWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateWithoutBiddingInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    uploadedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proposalId?: NullableStringFieldUpdateOperationsInput | string | null
    contractId?: NullableStringFieldUpdateOperationsInput | string | null
    supplierId?: NullableStringFieldUpdateOperationsInput | string | null
    publicEntityId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentUncheckedUpdateManyWithoutBiddingInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    uploadedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proposalId?: NullableStringFieldUpdateOperationsInput | string | null
    contractId?: NullableStringFieldUpdateOperationsInput | string | null
    supplierId?: NullableStringFieldUpdateOperationsInput | string | null
    publicEntityId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BiddingCategoryUpdateWithoutBiddingInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutBiddingsNestedInput
  }

  export type BiddingCategoryUncheckedUpdateWithoutBiddingInput = {
    id?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BiddingCategoryUncheckedUpdateManyWithoutBiddingInput = {
    id?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProposalItemCreateManyProposalInput = {
    id?: string
    description: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    totalPrice: Decimal | DecimalJsLike | number | string
    brand?: string | null
    model?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentCreateManyProposalInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    size: number
    path: string
    type: $Enums.DocumentType
    description?: string | null
    isPublic?: boolean
    uploadedBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    biddingId?: string | null
    contractId?: string | null
    supplierId?: string | null
    publicEntityId?: string | null
  }

  export type ProposalItemUpdateWithoutProposalInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProposalItemUncheckedUpdateWithoutProposalInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProposalItemUncheckedUpdateManyWithoutProposalInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUpdateWithoutProposalInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    uploadedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bidding?: BiddingUpdateOneWithoutDocumentsNestedInput
    contract?: ContractUpdateOneWithoutDocumentsNestedInput
    supplier?: SupplierUpdateOneWithoutDocumentsNestedInput
    publicEntity?: PublicEntityUpdateOneWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateWithoutProposalInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    uploadedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    biddingId?: NullableStringFieldUpdateOperationsInput | string | null
    contractId?: NullableStringFieldUpdateOperationsInput | string | null
    supplierId?: NullableStringFieldUpdateOperationsInput | string | null
    publicEntityId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentUncheckedUpdateManyWithoutProposalInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    uploadedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    biddingId?: NullableStringFieldUpdateOperationsInput | string | null
    contractId?: NullableStringFieldUpdateOperationsInput | string | null
    supplierId?: NullableStringFieldUpdateOperationsInput | string | null
    publicEntityId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentCreateManyContractInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    size: number
    path: string
    type: $Enums.DocumentType
    description?: string | null
    isPublic?: boolean
    uploadedBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    biddingId?: string | null
    proposalId?: string | null
    supplierId?: string | null
    publicEntityId?: string | null
  }

  export type DocumentUpdateWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    uploadedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bidding?: BiddingUpdateOneWithoutDocumentsNestedInput
    proposal?: ProposalUpdateOneWithoutDocumentsNestedInput
    supplier?: SupplierUpdateOneWithoutDocumentsNestedInput
    publicEntity?: PublicEntityUpdateOneWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    uploadedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    biddingId?: NullableStringFieldUpdateOperationsInput | string | null
    proposalId?: NullableStringFieldUpdateOperationsInput | string | null
    supplierId?: NullableStringFieldUpdateOperationsInput | string | null
    publicEntityId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentUncheckedUpdateManyWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    uploadedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    biddingId?: NullableStringFieldUpdateOperationsInput | string | null
    proposalId?: NullableStringFieldUpdateOperationsInput | string | null
    supplierId?: NullableStringFieldUpdateOperationsInput | string | null
    publicEntityId?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SupplierCountOutputTypeDefaultArgs instead
     */
    export type SupplierCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SupplierCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PublicEntityCountOutputTypeDefaultArgs instead
     */
    export type PublicEntityCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PublicEntityCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryCountOutputTypeDefaultArgs instead
     */
    export type CategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BiddingCountOutputTypeDefaultArgs instead
     */
    export type BiddingCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BiddingCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProposalCountOutputTypeDefaultArgs instead
     */
    export type ProposalCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProposalCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ContractCountOutputTypeDefaultArgs instead
     */
    export type ContractCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ContractCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SupplierDefaultArgs instead
     */
    export type SupplierArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SupplierDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PublicEntityDefaultArgs instead
     */
    export type PublicEntityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PublicEntityDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CitizenDefaultArgs instead
     */
    export type CitizenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CitizenDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryDefaultArgs instead
     */
    export type CategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BiddingDefaultArgs instead
     */
    export type BiddingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BiddingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProposalDefaultArgs instead
     */
    export type ProposalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProposalDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProposalItemDefaultArgs instead
     */
    export type ProposalItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProposalItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ContractDefaultArgs instead
     */
    export type ContractArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ContractDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DocumentDefaultArgs instead
     */
    export type DocumentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DocumentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BiddingCategoryDefaultArgs instead
     */
    export type BiddingCategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BiddingCategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SupplierCategoryDefaultArgs instead
     */
    export type SupplierCategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SupplierCategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AuditLogDefaultArgs instead
     */
    export type AuditLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AuditLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserSessionDefaultArgs instead
     */
    export type UserSessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserSessionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SystemConfigDefaultArgs instead
     */
    export type SystemConfigArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SystemConfigDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationDefaultArgs instead
     */
    export type NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserPermissionDefaultArgs instead
     */
    export type UserPermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserPermissionDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  role: 'role',
  status: 'status',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  avatar: 'avatar',
  lastLoginAt: 'lastLoginAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SupplierScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  companyName: 'companyName',
  tradeName: 'tradeName',
  cnpj: 'cnpj',
  stateRegistration: 'stateRegistration',
  municipalRegistration: 'municipalRegistration',
  address: 'address',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  website: 'website',
  description: 'description',
  isActive: 'isActive',
  verifiedAt: 'verifiedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PublicEntityScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  cnpj: 'cnpj',
  entityType: 'entityType',
  sphere: 'sphere',
  address: 'address',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  phone: 'phone',
  website: 'website',
  legalRepresentativeName: 'legalRepresentativeName',
  legalRepresentativeCpf: 'legalRepresentativeCpf',
  legalRepresentativePosition: 'legalRepresentativePosition',
  isActive: 'isActive',
  verifiedAt: 'verifiedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CitizenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  cpf: 'cpf',
  dateOfBirth: 'dateOfBirth',
  profession: 'profession',
  address: 'address',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  interests: 'interests',
  isActive: 'isActive',
  verifiedAt: 'verifiedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  code: 'code',
  parentId: 'parentId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BiddingScalarFieldEnum = {
  id: 'id',
  publicEntityId: 'publicEntityId',
  title: 'title',
  description: 'description',
  biddingNumber: 'biddingNumber',
  type: 'type',
  status: 'status',
  estimatedValue: 'estimatedValue',
  openingDate: 'openingDate',
  closingDate: 'closingDate',
  deliveryLocation: 'deliveryLocation',
  deliveryDeadline: 'deliveryDeadline',
  requirements: 'requirements',
  evaluationCriteria: 'evaluationCriteria',
  isPublic: 'isPublic',
  publishedAt: 'publishedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProposalScalarFieldEnum = {
  id: 'id',
  biddingId: 'biddingId',
  supplierId: 'supplierId',
  totalValue: 'totalValue',
  description: 'description',
  status: 'status',
  submittedAt: 'submittedAt',
  validUntil: 'validUntil',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProposalItemScalarFieldEnum = {
  id: 'id',
  proposalId: 'proposalId',
  description: 'description',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  totalPrice: 'totalPrice',
  brand: 'brand',
  model: 'model',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContractScalarFieldEnum = {
  id: 'id',
  biddingId: 'biddingId',
  proposalId: 'proposalId',
  publicEntityId: 'publicEntityId',
  supplierId: 'supplierId',
  contractNumber: 'contractNumber',
  title: 'title',
  description: 'description',
  totalValue: 'totalValue',
  startDate: 'startDate',
  endDate: 'endDate',
  status: 'status',
  signedAt: 'signedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  filename: 'filename',
  originalName: 'originalName',
  mimeType: 'mimeType',
  size: 'size',
  path: 'path',
  type: 'type',
  description: 'description',
  isPublic: 'isPublic',
  uploadedBy: 'uploadedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  biddingId: 'biddingId',
  proposalId: 'proposalId',
  contractId: 'contractId',
  supplierId: 'supplierId',
  publicEntityId: 'publicEntityId'
};

exports.Prisma.BiddingCategoryScalarFieldEnum = {
  id: 'id',
  biddingId: 'biddingId',
  categoryId: 'categoryId',
  createdAt: 'createdAt'
};

exports.Prisma.SupplierCategoryScalarFieldEnum = {
  id: 'id',
  supplierId: 'supplierId',
  categoryId: 'categoryId',
  createdAt: 'createdAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  resource: 'resource',
  resourceId: 'resourceId',
  oldValues: 'oldValues',
  newValues: 'newValues',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SystemConfigScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  type: 'type',
  description: 'description',
  isPublic: 'isPublic',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  message: 'message',
  type: 'type',
  isRead: 'isRead',
  data: 'data',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserPermissionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  permission: 'permission',
  grantedBy: 'grantedBy',
  grantedAt: 'grantedAt',
  expiresAt: 'expiresAt',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  SUPPLIER: 'SUPPLIER',
  PUBLIC_ENTITY: 'PUBLIC_ENTITY',
  AUDITOR: 'AUDITOR',
  CITIZEN: 'CITIZEN'
};

exports.UserStatus = exports.$Enums.UserStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  PENDING: 'PENDING',
  SUSPENDED: 'SUSPENDED'
};

exports.BiddingType = exports.$Enums.BiddingType = {
  PREGAO_ELETRONICO: 'PREGAO_ELETRONICO',
  CONCORRENCIA: 'CONCORRENCIA',
  TOMADA_PRECOS: 'TOMADA_PRECOS',
  CONVITE: 'CONVITE',
  CONCURSO: 'CONCURSO',
  LEILAO: 'LEILAO'
};

exports.BiddingStatus = exports.$Enums.BiddingStatus = {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  OPEN: 'OPEN',
  CLOSED: 'CLOSED',
  CANCELLED: 'CANCELLED',
  AWARDED: 'AWARDED'
};

exports.ProposalStatus = exports.$Enums.ProposalStatus = {
  DRAFT: 'DRAFT',
  SUBMITTED: 'SUBMITTED',
  UNDER_REVIEW: 'UNDER_REVIEW',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  WITHDRAWN: 'WITHDRAWN'
};

exports.ContractStatus = exports.$Enums.ContractStatus = {
  DRAFT: 'DRAFT',
  ACTIVE: 'ACTIVE',
  SUSPENDED: 'SUSPENDED',
  TERMINATED: 'TERMINATED',
  COMPLETED: 'COMPLETED'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  EDITAL: 'EDITAL',
  PROPOSAL: 'PROPOSAL',
  CONTRACT: 'CONTRACT',
  CERTIFICATE: 'CERTIFICATE',
  REPORT: 'REPORT',
  OTHER: 'OTHER'
};

exports.Permission = exports.$Enums.Permission = {
  READ_PUBLIC_DATA: 'READ_PUBLIC_DATA',
  READ_PRIVATE_DATA: 'READ_PRIVATE_DATA',
  WRITE_DATA: 'WRITE_DATA',
  DELETE_DATA: 'DELETE_DATA',
  CREATE_BIDDING: 'CREATE_BIDDING',
  EDIT_BIDDING: 'EDIT_BIDDING',
  DELETE_BIDDING: 'DELETE_BIDDING',
  PUBLISH_BIDDING: 'PUBLISH_BIDDING',
  CANCEL_BIDDING: 'CANCEL_BIDDING',
  CREATE_PROPOSAL: 'CREATE_PROPOSAL',
  EDIT_PROPOSAL: 'EDIT_PROPOSAL',
  DELETE_PROPOSAL: 'DELETE_PROPOSAL',
  SUBMIT_PROPOSAL: 'SUBMIT_PROPOSAL',
  CREATE_CONTRACT: 'CREATE_CONTRACT',
  EDIT_CONTRACT: 'EDIT_CONTRACT',
  SIGN_CONTRACT: 'SIGN_CONTRACT',
  TERMINATE_CONTRACT: 'TERMINATE_CONTRACT',
  MANAGE_USERS: 'MANAGE_USERS',
  MANAGE_SYSTEM: 'MANAGE_SYSTEM',
  VIEW_AUDIT_LOGS: 'VIEW_AUDIT_LOGS',
  MANAGE_CATEGORIES: 'MANAGE_CATEGORIES',
  GENERATE_REPORTS: 'GENERATE_REPORTS',
  EXPORT_DATA: 'EXPORT_DATA'
};

exports.Prisma.ModelName = {
  User: 'User',
  Supplier: 'Supplier',
  PublicEntity: 'PublicEntity',
  Citizen: 'Citizen',
  Category: 'Category',
  Bidding: 'Bidding',
  Proposal: 'Proposal',
  ProposalItem: 'ProposalItem',
  Contract: 'Contract',
  Document: 'Document',
  BiddingCategory: 'BiddingCategory',
  SupplierCategory: 'SupplierCategory',
  AuditLog: 'AuditLog',
  UserSession: 'UserSession',
  SystemConfig: 'SystemConfig',
  Notification: 'Notification',
  UserPermission: 'UserPermission'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)

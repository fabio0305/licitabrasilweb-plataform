"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const auth_1 = require("../middleware/auth");
const validation_1 = require("../middleware/validation");
const errorHandler_1 = require("../middleware/errorHandler");
const AdminController_1 = require("../controllers/AdminController");
const UserController_1 = require("../controllers/UserController");
const SupplierController_1 = require("../controllers/SupplierController");
const PublicEntityController_1 = require("../controllers/PublicEntityController");
const BiddingController_1 = require("../controllers/BiddingController");
const ContractController_1 = require("../controllers/ContractController");
const router = (0, express_1.Router)();
const adminController = new AdminController_1.AdminController();
const userController = new UserController_1.UserController();
const supplierController = new SupplierController_1.SupplierController();
const publicEntityController = new PublicEntityController_1.PublicEntityController();
const biddingController = new BiddingController_1.BiddingController();
const contractController = new ContractController_1.ContractController();
router.use(auth_1.authenticate);
router.use(auth_1.requireAdminAccess);
router.get('/users', validation_1.validateUserList, (0, errorHandler_1.asyncHandler)(userController.list));
router.get('/users/statistics', (0, errorHandler_1.asyncHandler)(userController.getStatistics));
router.put('/users/:id/status', validation_1.validateUuidParam, (0, errorHandler_1.asyncHandler)(userController.updateStatus));
router.put('/users/:id/role', validation_1.validateUuidParam, (0, errorHandler_1.asyncHandler)(userController.updateRole));
router.delete('/users/:id', validation_1.validateUuidParam, (0, errorHandler_1.asyncHandler)(userController.delete));
router.get('/suppliers', validation_1.validatePagination, (0, errorHandler_1.asyncHandler)(supplierController.list));
router.put('/suppliers/:id/verify', validation_1.validateUuidParam, (0, errorHandler_1.asyncHandler)(supplierController.verify));
router.get('/public-entities', validation_1.validatePagination, (0, errorHandler_1.asyncHandler)(publicEntityController.list));
router.put('/public-entities/:id/verify', validation_1.validateUuidParam, (0, errorHandler_1.asyncHandler)(publicEntityController.verify));
router.get('/biddings', validation_1.validatePagination, (0, errorHandler_1.asyncHandler)(biddingController.list));
router.put('/biddings/:id/moderate', validation_1.validateUuidParam, (0, errorHandler_1.asyncHandler)(adminController.moderateBidding));
router.get('/contracts', validation_1.validatePagination, (0, errorHandler_1.asyncHandler)(contractController.list));
router.get('/config', (0, errorHandler_1.asyncHandler)(adminController.getConfig));
router.put('/config', (0, errorHandler_1.asyncHandler)(adminController.updateConfig));
router.get('/audit-logs', validation_1.validatePagination, (0, errorHandler_1.asyncHandler)(adminController.getAuditLogs));
router.get('/statistics', (0, errorHandler_1.asyncHandler)(adminController.getStatistics));
router.get('/moderation', (0, errorHandler_1.asyncHandler)(adminController.getModerationDashboard));
router.post('/backup', (0, errorHandler_1.asyncHandler)(adminController.createBackup));
router.get('/backup/status', (0, errorHandler_1.asyncHandler)(adminController.getBackupStatus));
exports.default = router;
//# sourceMappingURL=admin.js.map
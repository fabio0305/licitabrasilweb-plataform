#!/bin/bash

# =============================================================================
# SCRIPT: Stop Platform - LicitaBrasil Web
# DESCRI√á√ÉO: Para toda a plataforma LicitaBrasil Web usando Docker Compose
# AUTOR: Sistema LicitaBrasil
# DATA: $(date +"%Y-%m-%d")
# =============================================================================

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir cabe√ßalho
print_header() {
    echo -e "${PURPLE}=============================================================================${NC}"
    echo -e "${PURPLE}                     LICITABRASIL WEB - STOP PLATFORM                      ${NC}"
    echo -e "${PURPLE}=============================================================================${NC}"
    echo -e "${CYAN}Data/Hora: $(date '+%Y-%m-%d %H:%M:%S')${NC}"
    echo -e "${CYAN}Diret√≥rio: $(pwd)${NC}"
    echo ""
}

# Fun√ß√£o para imprimir status
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# Fun√ß√£o para imprimir sucesso
print_success() {
    echo -e "${GREEN}[SUCESSO]${NC} $1"
}

# Fun√ß√£o para imprimir aviso
print_warning() {
    echo -e "${YELLOW}[AVISO]${NC} $1"
}

# Fun√ß√£o para imprimir erro
print_error() {
    echo -e "${RED}[ERRO]${NC} $1"
}

# Fun√ß√£o para verificar se Docker Compose est√° dispon√≠vel
check_docker_compose() {
    if ! command -v docker-compose &> /dev/null; then
        print_error "Docker Compose n√£o encontrado!"
        print_error "Por favor, instale o Docker Compose antes de continuar."
        exit 1
    fi
    print_success "Docker Compose encontrado"
}

# Fun√ß√£o para verificar se o arquivo docker-compose.yml existe
check_compose_file() {
    if [ ! -f "docker-compose.yml" ]; then
        print_error "Arquivo docker-compose.yml n√£o encontrado no diret√≥rio atual!"
        print_error "Certifique-se de estar no diret√≥rio raiz do projeto."
        exit 1
    fi
    print_success "Arquivo docker-compose.yml encontrado"
}

# Fun√ß√£o para mostrar status atual dos servi√ßos
show_current_status() {
    print_status "Status atual dos servi√ßos:"
    echo ""
    docker-compose ps
    echo ""
}

# Fun√ß√£o para confirmar parada dos servi√ßos
confirm_stop() {
    echo -e "${YELLOW}‚ö†Ô∏è  ATEN√á√ÉO: Esta a√ß√£o ir√° parar TODOS os servi√ßos da plataforma LicitaBrasil Web!${NC}"
    echo ""
    echo -e "${RED}Servi√ßos que ser√£o parados:${NC}"
    echo -e "${CYAN}  ‚Ä¢ Backend (API)${NC}"
    echo -e "${CYAN}  ‚Ä¢ Frontend (Website)${NC}"
    echo -e "${CYAN}  ‚Ä¢ Nginx (Proxy Reverso)${NC}"
    echo -e "${CYAN}  ‚Ä¢ PostgreSQL (Banco de Dados)${NC}"
    echo -e "${CYAN}  ‚Ä¢ Redis (Cache)${NC}"
    echo -e "${CYAN}  ‚Ä¢ Prometheus (Monitoramento)${NC}"
    echo -e "${CYAN}  ‚Ä¢ Grafana (Dashboards)${NC}"
    echo -e "${CYAN}  ‚Ä¢ Outros servi√ßos de monitoramento${NC}"
    echo ""
    echo -e "${YELLOW}A plataforma ficar√° INDISPON√çVEL at√© ser reiniciada!${NC}"
    echo ""
    
    read -p "Tem certeza que deseja continuar? (s/N): " -n 1 -r
    echo ""
    
    if [[ ! $REPLY =~ ^[Ss]$ ]]; then
        print_warning "Opera√ß√£o cancelada pelo usu√°rio"
        exit 0
    fi
    
    print_status "Confirma√ß√£o recebida, prosseguindo com a parada dos servi√ßos..."
}

# Fun√ß√£o para fazer backup de dados cr√≠ticos (opcional)
backup_critical_data() {
    print_status "Verificando se √© necess√°rio fazer backup de dados cr√≠ticos..."
    
    # Criar diret√≥rio de backup se n√£o existir
    BACKUP_DIR="./backups/$(date +%Y%m%d_%H%M%S)"
    
    if [ "$1" = "--backup" ]; then
        print_status "Criando backup de dados cr√≠ticos..."
        mkdir -p "$BACKUP_DIR"
        
        # Backup do banco de dados PostgreSQL
        print_status "Fazendo backup do banco de dados..."
        docker exec licitabrasil-postgres pg_dumpall -U postgres > "$BACKUP_DIR/postgres_backup.sql" 2>/dev/null
        
        if [ $? -eq 0 ]; then
            print_success "Backup do banco de dados criado: $BACKUP_DIR/postgres_backup.sql"
        else
            print_warning "Falha ao criar backup do banco de dados"
        fi
        
        # Backup de configura√ß√µes importantes
        if [ -f ".env" ]; then
            cp .env "$BACKUP_DIR/env_backup"
            print_success "Backup das vari√°veis de ambiente criado"
        fi
        
        if [ -f "docker-compose.yml" ]; then
            cp docker-compose.yml "$BACKUP_DIR/docker-compose_backup.yml"
            print_success "Backup do docker-compose criado"
        fi
        
        print_success "Backup completo salvo em: $BACKUP_DIR"
    else
        print_status "Backup n√£o solicitado (use --backup para criar backup autom√°tico)"
    fi
}

# Fun√ß√£o para parar os servi√ßos gradualmente
stop_services_gracefully() {
    print_status "Parando servi√ßos de forma gradual para evitar perda de dados..."
    
    # Parar servi√ßos de aplica√ß√£o primeiro
    print_status "Parando servi√ßos de aplica√ß√£o..."
    docker-compose stop nginx backend 2>/dev/null
    
    if [ $? -eq 0 ]; then
        print_success "Servi√ßos de aplica√ß√£o parados"
    else
        print_warning "Alguns servi√ßos de aplica√ß√£o podem n√£o ter parado corretamente"
    fi
    
    # Aguardar um pouco para conex√µes finalizarem
    sleep 5
    
    # Parar servi√ßos de dados
    print_status "Parando servi√ßos de dados..."
    docker-compose stop postgres redis 2>/dev/null
    
    if [ $? -eq 0 ]; then
        print_success "Servi√ßos de dados parados"
    else
        print_warning "Alguns servi√ßos de dados podem n√£o ter parado corretamente"
    fi
    
    # Parar todos os outros servi√ßos
    print_status "Parando servi√ßos restantes..."
    docker-compose stop
    
    if [ $? -eq 0 ]; then
        print_success "Todos os servi√ßos foram parados"
    else
        print_error "Falha ao parar alguns servi√ßos"
        return 1
    fi
}

# Fun√ß√£o para parar todos os servi√ßos de uma vez
stop_all_services() {
    print_status "Parando todos os servi√ßos da plataforma..."
    
    docker-compose stop
    
    if [ $? -eq 0 ]; then
        print_success "Todos os servi√ßos foram parados"
    else
        print_error "Falha ao parar os servi√ßos"
        return 1
    fi
}

# Fun√ß√£o para verificar se todos os servi√ßos pararam
verify_services_stopped() {
    print_status "Verificando se todos os servi√ßos pararam..."
    echo ""
    
    # Mostrar status final
    docker-compose ps
    
    echo ""
    
    # Verificar servi√ßos espec√≠ficos
    RUNNING_SERVICES=$(docker-compose ps --services --filter "status=running" 2>/dev/null)
    
    if [ -z "$RUNNING_SERVICES" ]; then
        print_success "Todos os servi√ßos foram parados com sucesso"
        return 0
    else
        print_warning "Alguns servi√ßos ainda est√£o rodando:"
        echo "$RUNNING_SERVICES"
        return 1
    fi
}

# Fun√ß√£o para limpeza opcional
cleanup_resources() {
    if [ "$1" = "--cleanup" ]; then
        print_status "Executando limpeza de recursos..."
        
        # Remover containers parados
        print_status "Removendo containers parados..."
        docker-compose rm -f 2>/dev/null
        
        # Limpar volumes √≥rf√£os (cuidado!)
        print_status "Limpando volumes √≥rf√£os..."
        docker volume prune -f 2>/dev/null
        
        # Limpar redes n√£o utilizadas
        print_status "Limpando redes n√£o utilizadas..."
        docker network prune -f 2>/dev/null
        
        print_success "Limpeza de recursos conclu√≠da"
    else
        print_status "Limpeza n√£o solicitada (use --cleanup para limpeza autom√°tica)"
    fi
}

# Fun√ß√£o para mostrar informa√ß√µes de como reiniciar
show_restart_info() {
    echo ""
    echo -e "${CYAN}üìã Para reiniciar a plataforma, use um dos seguintes comandos:${NC}"
    echo -e "${GREEN}   ./start-platform.sh${NC}     - Iniciar todos os servi√ßos"
    echo -e "${GREEN}   ./restart-platform.sh${NC}   - Reiniciar todos os servi√ßos"
    echo -e "${GREEN}   docker-compose up -d${NC}    - Comando Docker Compose direto"
    echo ""
}

# Fun√ß√£o principal
main() {
    print_header
    
    print_status "Iniciando parada da plataforma LicitaBrasil Web..."
    echo ""
    
    # Verifica√ß√µes preliminares
    check_docker_compose
    check_compose_file
    
    echo ""
    
    # Mostrar status atual
    show_current_status
    
    # Confirmar a√ß√£o (apenas se n√£o for modo silencioso)
    if [ "$1" != "--force" ]; then
        confirm_stop
        echo ""
    fi
    
    # Backup opcional
    backup_critical_data "$@"
    
    echo ""
    
    # Parar servi√ßos
    if [ "$1" = "--graceful" ] || [ "$2" = "--graceful" ]; then
        stop_services_gracefully
    else
        stop_all_services
    fi
    
    echo ""
    
    # Verificar se pararam
    verify_services_stopped
    
    echo ""
    
    # Limpeza opcional
    cleanup_resources "$@"
    
    # Mostrar informa√ß√µes de reinicializa√ß√£o
    show_restart_info
    
    echo ""
    print_success "Parada da plataforma conclu√≠da!"
    echo -e "${PURPLE}=============================================================================${NC}"
    echo -e "${RED}üõë Plataforma LicitaBrasil Web foi parada com sucesso!${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  A plataforma est√° INDISPON√çVEL at√© ser reiniciada${NC}"
    echo -e "${CYAN}üîÑ Use ./start-platform.sh para reiniciar${NC}"
    echo -e "${PURPLE}=============================================================================${NC}"
}

# Mostrar ajuda se solicitado
if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    echo "Uso: $0 [OP√á√ïES]"
    echo ""
    echo "Op√ß√µes:"
    echo "  --force      Para os servi√ßos sem confirma√ß√£o"
    echo "  --graceful   Para os servi√ßos de forma gradual"
    echo "  --backup     Cria backup antes de parar"
    echo "  --cleanup    Remove recursos n√£o utilizados"
    echo "  --help, -h   Mostra esta ajuda"
    echo ""
    echo "Exemplos:"
    echo "  $0                    # Parada normal com confirma√ß√£o"
    echo "  $0 --force           # Parada for√ßada sem confirma√ß√£o"
    echo "  $0 --graceful --backup # Parada gradual com backup"
    exit 0
fi

# Executar fun√ß√£o principal
main "$@"

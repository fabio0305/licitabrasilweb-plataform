#!/bin/bash

# =============================================================================
# SCRIPT: Restart Platform - LicitaBrasil Web
# DESCRI√á√ÉO: Reinicia toda a plataforma LicitaBrasil Web usando Docker Compose
# AUTOR: Sistema LicitaBrasil
# DATA: $(date +"%Y-%m-%d")
# =============================================================================

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir cabe√ßalho
print_header() {
    echo -e "${PURPLE}=============================================================================${NC}"
    echo -e "${PURPLE}                    LICITABRASIL WEB - RESTART PLATFORM                    ${NC}"
    echo -e "${PURPLE}=============================================================================${NC}"
    echo -e "${CYAN}Data/Hora: $(date '+%Y-%m-%d %H:%M:%S')${NC}"
    echo -e "${CYAN}Diret√≥rio: $(pwd)${NC}"
    echo ""
}

# Fun√ß√£o para imprimir status
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# Fun√ß√£o para imprimir sucesso
print_success() {
    echo -e "${GREEN}[SUCESSO]${NC} $1"
}

# Fun√ß√£o para imprimir aviso
print_warning() {
    echo -e "${YELLOW}[AVISO]${NC} $1"
}

# Fun√ß√£o para imprimir erro
print_error() {
    echo -e "${RED}[ERRO]${NC} $1"
}

# Fun√ß√£o para verificar se Docker Compose est√° dispon√≠vel
check_docker_compose() {
    if ! command -v docker-compose &> /dev/null; then
        print_error "Docker Compose n√£o encontrado!"
        print_error "Por favor, instale o Docker Compose antes de continuar."
        exit 1
    fi
    print_success "Docker Compose encontrado"
}

# Fun√ß√£o para verificar se o arquivo docker-compose.yml existe
check_compose_file() {
    if [ ! -f "docker-compose.yml" ]; then
        print_error "Arquivo docker-compose.yml n√£o encontrado no diret√≥rio atual!"
        print_error "Certifique-se de estar no diret√≥rio raiz do projeto."
        exit 1
    fi
    print_success "Arquivo docker-compose.yml encontrado"
}

# Fun√ß√£o para recompilar o backend se necess√°rio
rebuild_backend() {
    print_status "Verificando se √© necess√°rio recompilar o backend..."
    
    if [ -d "backend" ] && [ -f "backend/package.json" ]; then
        print_status "Recompilando backend TypeScript..."
        cd backend
        npm run build
        if [ $? -eq 0 ]; then
            print_success "Backend recompilado com sucesso"
        else
            print_warning "Falha na recompila√ß√£o do backend, continuando..."
        fi
        cd ..
    else
        print_warning "Diret√≥rio backend n√£o encontrado, pulando recompila√ß√£o"
    fi
}

# Fun√ß√£o para recompilar o frontend se necess√°rio
rebuild_frontend() {
    print_status "Verificando se √© necess√°rio recompilar o frontend..."
    
    if [ -d "frontend" ] && [ -f "frontend/package.json" ]; then
        print_status "Recompilando frontend React..."
        cd frontend
        npm run build
        if [ $? -eq 0 ]; then
            print_success "Frontend recompilado com sucesso"
        else
            print_warning "Falha na recompila√ß√£o do frontend, continuando..."
        fi
        cd ..
    else
        print_warning "Diret√≥rio frontend n√£o encontrado, pulando recompila√ß√£o"
    fi
}

# Fun√ß√£o para copiar arquivos compilados para containers
copy_compiled_files() {
    print_status "Copiando arquivos compilados para containers..."
    
    # Copiar backend compilado
    if [ -d "backend/dist" ]; then
        print_status "Copiando backend compilado..."
        docker cp backend/dist/. licitabrasil-backend:/app/dist/ 2>/dev/null
        if [ $? -eq 0 ]; then
            print_success "Backend copiado para container"
        else
            print_warning "Falha ao copiar backend (container pode n√£o estar rodando)"
        fi
    fi
    
    # Copiar frontend compilado
    if [ -d "frontend/build" ]; then
        print_status "Copiando frontend compilado..."
        docker cp frontend/build/. licitabrasil-nginx:/usr/share/nginx/html/ 2>/dev/null
        if [ $? -eq 0 ]; then
            print_success "Frontend copiado para container"
        else
            print_warning "Falha ao copiar frontend (container pode n√£o estar rodando)"
        fi
    fi
}

# Fun√ß√£o para reiniciar os servi√ßos
restart_services() {
    print_status "Reiniciando todos os servi√ßos da plataforma..."
    
    # Reiniciar todos os servi√ßos
    docker-compose restart
    
    if [ $? -eq 0 ]; then
        print_success "Todos os servi√ßos foram reiniciados"
    else
        print_error "Falha ao reiniciar os servi√ßos"
        exit 1
    fi
}

# Fun√ß√£o para verificar status dos servi√ßos
check_services_status() {
    print_status "Verificando status dos servi√ßos..."
    echo ""
    
    # Aguardar alguns segundos para os servi√ßos iniciarem
    sleep 10
    
    # Mostrar status dos servi√ßos
    docker-compose ps
    
    echo ""
    print_status "Verificando sa√∫de dos servi√ßos principais..."
    
    # Verificar backend
    if docker ps --filter "name=licitabrasil-backend" --filter "status=running" | grep -q licitabrasil-backend; then
        print_success "Backend est√° rodando"
    else
        print_error "Backend n√£o est√° rodando"
    fi
    
    # Verificar nginx
    if docker ps --filter "name=licitabrasil-nginx" --filter "status=running" | grep -q licitabrasil-nginx; then
        print_success "Nginx est√° rodando"
    else
        print_error "Nginx n√£o est√° rodando"
    fi
    
    # Verificar postgres
    if docker ps --filter "name=licitabrasil-postgres" --filter "status=running" | grep -q licitabrasil-postgres; then
        print_success "PostgreSQL est√° rodando"
    else
        print_error "PostgreSQL n√£o est√° rodando"
    fi
    
    # Verificar redis
    if docker ps --filter "name=licitabrasil-redis" --filter "status=running" | grep -q licitabrasil-redis; then
        print_success "Redis est√° rodando"
    else
        print_error "Redis n√£o est√° rodando"
    fi
}

# Fun√ß√£o para testar conectividade
test_connectivity() {
    print_status "Testando conectividade da plataforma..."
    
    # Aguardar mais tempo para os servi√ßos estabilizarem
    sleep 15
    
    # Testar website principal
    if curl -s -I https://licitabrasilweb.com.br | grep -q "200"; then
        print_success "Website principal acess√≠vel (https://licitabrasilweb.com.br)"
    else
        print_warning "Website principal pode n√£o estar acess√≠vel"
    fi
    
    # Testar API
    if curl -s -I https://api.licitabrasilweb.com.br/health | grep -q "200"; then
        print_success "API acess√≠vel (https://api.licitabrasilweb.com.br)"
    else
        print_warning "API pode n√£o estar acess√≠vel"
    fi
}

# Fun√ß√£o principal
main() {
    print_header
    
    print_status "Iniciando reinicializa√ß√£o da plataforma LicitaBrasil Web..."
    echo ""
    
    # Verifica√ß√µes preliminares
    check_docker_compose
    check_compose_file
    
    echo ""
    
    # Recompila√ß√£o (opcional)
    rebuild_backend
    rebuild_frontend
    
    echo ""
    
    # Reiniciar servi√ßos
    restart_services
    
    echo ""
    
    # Copiar arquivos compilados ap√≥s reinicializa√ß√£o
    copy_compiled_files
    
    echo ""
    
    # Verificar status
    check_services_status
    
    echo ""
    
    # Testar conectividade
    test_connectivity
    
    echo ""
    print_success "Reinicializa√ß√£o da plataforma conclu√≠da!"
    echo -e "${PURPLE}=============================================================================${NC}"
    echo -e "${GREEN}‚úÖ Plataforma LicitaBrasil Web reiniciada com sucesso!${NC}"
    echo -e "${CYAN}üåê Website: https://licitabrasilweb.com.br${NC}"
    echo -e "${CYAN}üîß Admin: https://licitabrasilweb.com.br/admin${NC}"
    echo -e "${CYAN}üìä Monitoramento: https://licitabrasilweb.com.br:3000 (Grafana)${NC}"
    echo -e "${PURPLE}=============================================================================${NC}"
}

# Executar fun√ß√£o principal
main "$@"
